// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"terminator",
		"keywordImport",
		"keywordAs",
		"keywordBusinessObject",
		"{",
		"}",
		"keywordNode",
		"[",
		",",
		"]",
		"n",
		"message",
		"text",
		"stringLit",
		":",
		"keywordAssociation",
		"keywordTo",
		"keywordValuation",
		"(",
		")",
		"element",
		"=",
		"keywordAction",
		"floatLit",
		"intLit",
		"boolLit",
		"&&",
		"cmpOp",
		".",
		"empty",
		"keywordRaises",
		"identifier",
		"assignOp",
		"runeLit",
	},

	idMap: map[string]Type{
		"INVALID":               0,
		"$":                     1,
		"terminator":            2,
		"keywordImport":         3,
		"keywordAs":             4,
		"keywordBusinessObject": 5,
		"{":                     6,
		"}":                     7,
		"keywordNode":           8,
		"[":                     9,
		",":                     10,
		"]":                     11,
		"n":                     12,
		"message":               13,
		"text":                  14,
		"stringLit":             15,
		":":                     16,
		"keywordAssociation":    17,
		"keywordTo":             18,
		"keywordValuation":      19,
		"(":                     20,
		")":                     21,
		"element":               22,
		"=":                     23,
		"keywordAction":         24,
		"floatLit":              25,
		"intLit":                26,
		"boolLit":               27,
		"&&":                    28,
		"cmpOp":                 29,
		".":                     30,
		"empty":                 31,
		"keywordRaises":         32,
		"identifier":            33,
		"assignOp":              34,
		"runeLit":               35,
	},
}
