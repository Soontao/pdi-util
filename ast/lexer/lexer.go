// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/Soontao/pdi-util/ast/token"
)

const (
	NoState    = -1
	NumStates  = 160
	NumSymbols = 218
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: 't'
4: 'o'
5: 'a'
6: 's'
7: 'b'
8: 'u'
9: 's'
10: 'i'
11: 'n'
12: 'e'
13: 's'
14: 's'
15: 'o'
16: 'b'
17: 'j'
18: 'e'
19: 'c'
20: 't'
21: 'n'
22: 'o'
23: 'd'
24: 'e'
25: 'r'
26: 'a'
27: 'i'
28: 's'
29: 'e'
30: 's'
31: 'a'
32: 'c'
33: 't'
34: 'i'
35: 'o'
36: 'n'
37: 'a'
38: 's'
39: 's'
40: 'o'
41: 'c'
42: 'i'
43: 'a'
44: 't'
45: 'i'
46: 'o'
47: 'n'
48: 'v'
49: 'a'
50: 'l'
51: 'u'
52: 'a'
53: 't'
54: 'i'
55: 'o'
56: 'n'
57: '.'
58: '.'
59: 't'
60: 'r'
61: 'u'
62: 'e'
63: 'f'
64: 'a'
65: 'l'
66: 's'
67: 'e'
68: 'i'
69: 'm'
70: 'p'
71: 'o'
72: 'r'
73: 't'
74: 'r'
75: 'e'
76: 't'
77: 'u'
78: 'r'
79: 'n'
80: 'v'
81: 'a'
82: 'r'
83: '='
84: ':'
85: 'f'
86: 'o'
87: 'r'
88: 'e'
89: 'a'
90: 'c'
91: 'h'
92: '('
93: 'i'
94: 'n'
95: ')'
96: 'i'
97: 'f'
98: 'e'
99: 'l'
100: 's'
101: 'e'
102: 'r'
103: 'a'
104: 'i'
105: 's'
106: 'e'
107: '{'
108: '}'
109: '['
110: ','
111: ']'
112: 'n'
113: 'm'
114: 'e'
115: 's'
116: 's'
117: 'a'
118: 'g'
119: 'e'
120: 't'
121: 'e'
122: 'x'
123: 't'
124: 'e'
125: 'l'
126: 'e'
127: 'm'
128: 'e'
129: 'n'
130: 't'
131: '|'
132: '|'
133: '&'
134: '&'
135: '+'
136: '-'
137: '*'
138: '/'
139: '%'
140: '.'
141: '!'
142: '&'
143: '='
144: '='
145: '!'
146: '='
147: '<'
148: '='
149: '<'
150: '>'
151: '='
152: '>'
153: '/'
154: '/'
155: '\n'
156: '/'
157: '*'
158: '*'
159: '*'
160: '/'
161: '_'
162: '0'
163: '0'
164: 'x'
165: 'X'
166: 'e'
167: 'E'
168: '+'
169: '-'
170: '`'
171: '`'
172: '"'
173: '\'
174: '"'
175: '"'
176: '\'
177: 'n'
178: '\'
179: 'r'
180: '\'
181: 't'
182: '='
183: '='
184: '!'
185: '='
186: '<'
187: '<'
188: '='
189: '>'
190: '>'
191: '='
192: '+'
193: '-'
194: '|'
195: '^'
196: '*'
197: '/'
198: '%'
199: '<'
200: '<'
201: '>'
202: '>'
203: '&'
204: '&'
205: '^'
206: ' '
207: '\t'
208: '\r'
209: '\n'
210: 'a'-'z'
211: 'A'-'Z'
212: '0'-'9'
213: '0'-'7'
214: 'a'-'f'
215: 'A'-'F'
216: '1'-'9'
217: .
*/
