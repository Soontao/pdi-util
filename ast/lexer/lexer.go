// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/Soontao/pdi-util/ast/token"
)

const (
	NoState    = -1
	NumStates  = 142
	NumSymbols = 174
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: 't'
4: 'o'
5: 'i'
6: 'm'
7: 'p'
8: 'o'
9: 'r'
10: 't'
11: 'a'
12: 's'
13: 'b'
14: 'u'
15: 's'
16: 'i'
17: 'n'
18: 'e'
19: 's'
20: 's'
21: 'o'
22: 'b'
23: 'j'
24: 'e'
25: 'c'
26: 't'
27: 'n'
28: 'o'
29: 'd'
30: 'e'
31: 'r'
32: 'a'
33: 'i'
34: 's'
35: 'e'
36: 's'
37: 'a'
38: 'c'
39: 't'
40: 'i'
41: 'o'
42: 'n'
43: 'a'
44: 's'
45: 's'
46: 'o'
47: 'c'
48: 'i'
49: 'a'
50: 't'
51: 'i'
52: 'o'
53: 'n'
54: 'v'
55: 'a'
56: 'l'
57: 'u'
58: 'a'
59: 't'
60: 'i'
61: 'o'
62: 'n'
63: '.'
64: '.'
65: '''
66: '\'
67: '''
68: 't'
69: 'r'
70: 'u'
71: 'e'
72: 'f'
73: 'a'
74: 'l'
75: 's'
76: 'e'
77: '='
78: '{'
79: '}'
80: '['
81: ','
82: ']'
83: 'n'
84: 'm'
85: 'e'
86: 's'
87: 's'
88: 'a'
89: 'g'
90: 'e'
91: 't'
92: 'e'
93: 'x'
94: 't'
95: ':'
96: '('
97: ')'
98: 'e'
99: 'l'
100: 'e'
101: 'm'
102: 'e'
103: 'n'
104: 't'
105: '='
106: '&'
107: '&'
108: '.'
109: '/'
110: '/'
111: '\n'
112: '/'
113: '*'
114: '*'
115: '*'
116: '/'
117: '_'
118: '0'
119: '0'
120: 'x'
121: 'X'
122: 'e'
123: 'E'
124: '+'
125: '-'
126: '`'
127: '`'
128: '"'
129: '\'
130: '"'
131: '"'
132: '\'
133: 'n'
134: '\'
135: 'r'
136: '\'
137: 't'
138: '='
139: '='
140: '!'
141: '='
142: '<'
143: '<'
144: '='
145: '>'
146: '>'
147: '='
148: '+'
149: '-'
150: '|'
151: '^'
152: '*'
153: '/'
154: '%'
155: '<'
156: '<'
157: '>'
158: '>'
159: '&'
160: '&'
161: '^'
162: ' '
163: '\t'
164: '\r'
165: '\n'
166: 'a'-'z'
167: 'A'-'Z'
168: '0'-'9'
169: '0'-'7'
170: 'a'-'f'
171: 'A'-'F'
172: '1'-'9'
173: .
*/
