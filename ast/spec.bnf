// === [ Lexical part] =========================================================

terminator
: ';' '\n' 
| ';' 
;

// --- [ Keywords ] ------------------------------------------------------------

keywordTo
: 't' 'o'
;

keywordImport
: 'i' 'm' 'p' 'o' 'r' 't'
;

keywordAs
: 'a' 's'
;

keywordBusinessObject
: 'b' 'u' 's' 'i' 'n' 'e' 's' 's' 'o' 'b' 'j' 'e' 'c' 't'
;

keywordNode
: 'n' 'o' 'd' 'e'
;

keywordRaises
: 'r' 'a' 'i' 's' 'e' 's'
;

keywordAction
: 'a' 'c' 't' 'i' 'o' 'n'
;

keywordAssociation
: 'a' 's' 's' 'o' 'c' 'i' 'a' 't' 'i' 'o' 'n'
;

keywordValuation
: 'v' 'a' 'l' 'u' 'a' 't' 'i' 'o' 'n'
;

// --- [ Whitespaces (suppressed) ] --------------------------------------------
!whitespace 
: ' ' 
| '\t' 
| '\r' 
| '\n'
;

// --- [ Comments (suppressed) ] -----------------------------------------------

!comment
: _lineComment 
| _blockComment
;

_lineComment  
: '/' '/' { . } '\n' 
;

_blockComment : '/' '*' { . | '*' } '*' '/' ;

// --- [ Letters and digits ] --------------------------------------------------

_letter       	
: _unicodeLetter 
| '_' 
;

_unicodeLetter 	
: 'a' - 'z' 
| 'A' - 'Z' 
;

_decimalDigit  	
: '0' - '9' 
;

_octalDigit
: '0' - '7' 
;

_hexDigit      	
: _decimalDigit 
| 'a' - 'f' 
| 'A' - 'F' 
;

// --- [ Identifiers ] ---------------------------------------------------------

identifier 	
: _letter { _letter | _decimalDigit } 
;

// --- [ Integer literals ] ----------------------------------------------------

intLit      
: _decimalLit 
| _octalLit 
| _hexLit 
;

_decimalLit 
: '1' - '9' { _decimalDigit } 
;

_octalLit   
: '0' { _octalDigit } 
;

_hexLit     
: '0' ( 'x' | 'X' ) _hexDigit { _hexDigit } 
;

// --- [ Floating-point literals ] ---------------------------------------------

floatLit  
: _decimals '.' [ _decimals ] [ _exponent ]
| _decimals _exponent
| '.' _decimals [ _exponent ]
;

_decimals 
: _decimalDigit { _decimalDigit } 
;

_exponent 
: ( 'e' | 'E' ) [ '+' | '-' ] _decimals 
;

// --- [ String literals ] -----------------------------------------------------

stringLit
:  _rawStrLit 
| _interpretedStrLit 
;

_rawStrLit
: '`' { . } '`' 
;

_interpretedStrLit 
: '"' { . | '\\' '"' | _escapeChar } '"' 
;

// --- [ Single-character escapes ] --------------------------------------------

_escapeChar 
: '\\' 'n' 
| '\\' 'r' 
| '\\' 't' 
;

// --- [ Rune literals ] -------------------------------------------------------

runeLit  
: '\'' [ '\\' ] [ . ] '\'' 
;

// --- [ Predeclared constants ] -----------------------------------------------

boolLit
: 't' 'r' 'u' 'e' 
| 'f' 'a' 'l' 's' 'e' 
;

// --- [ Operators ] -----------------------------------------------------------
_relOp      : '=' '=' | '!' '=' | '<' | '<' '=' | '>' | '>' '=' ;
_addOp      : '+' | '-' | '|' | '^' ;
_mulOp      : '*' | '/' | '%' | '<' '<' | '>' '>' | '&' | '&' '^' ;
assignOp    : [ _addOp | _mulOp ] '=' ;
cmpOp
: _relOp
;

<< import "github.com/Soontao/pdi-util/ast" >> 

// === [ Syntax part] ==========================================================

Program
: StatementList BusinessObjectDefination << ast.NewProgram($0, $1) >>
;

StatementList
: Statement terminator RepeatTerminator StatementList << ast.NewStatementList($0, $3) >>
| Statement RepeatTerminator << ast.NewStatementList($0, nil) >>
;

Statement
: ImportAsDeclaration	<< ast.NewStatement($0) >> 
| ImportNormalDeclaration << ast.NewStatement($0) >> 
;

ImportAsDeclaration
: keywordImport Namespace keywordAs Identifier << ast.NewImportDeclaration($1, $3) >> 
;	

ImportNormalDeclaration
: keywordImport Namespace << ast.NewImportDeclaration($1, nil) >> 
;

BusinessObjectDefination
: keywordBusinessObject Identifier "{" BOItemList "}" << ast.NewBODefination(nil, $1, nil, $3 ) >>
| keywordBusinessObject Identifier RaiseExpr "{" BOItemList "}" << ast.NewBODefination(nil, $1, $2, $5 ) >>
| AnnotationList keywordBusinessObject Identifier "{" BOItemList "}" << ast.NewBODefination($0, $2, nil, $4 ) >>
| AnnotationList keywordBusinessObject Identifier RaiseExpr "{" BOItemList "}"  << ast.NewBODefination($0, $2, $3, $5 ) >>
;

BOItemList
: AnnotatedBOItem  << ast.NewCommonList(nil, $0) >>
| BOItemList AnnotatedBOItem << ast.NewCommonList($0, $1) >>
;

// wrap
AnnotatedBOItem
: AnnotationList BOItem << ast.NewAnnotatedBOItem($0, $1) >>
| BOItem << ast.NewAnnotatedBOItem(nil, $0) >>
;

BusinessObjectNode
: keywordNode Identifier "{" BOItemList "}" << ast.NewBusinessObjectNode($1, $3) >>
| keywordNode Identifier Multiplicity "{" BOItemList "}" << ast.NewBusinessObjectNode($1, $4, $2) >>
| keywordNode Identifier RaiseExpr "{" BOItemList "}" << ast.NewBusinessObjectNode($1, $4, nil, $2) >>
| keywordNode Identifier Multiplicity RaiseExpr "{" BOItemList "}" << ast.NewBusinessObjectNode($1, $5, $2, $3) >>
;

Multiplicity
: "[" Value "," Value "]" << ast.NewMultiplicity($1, $3) >>
| "[" Value "," "n" "]" << ast.NewMultiplicity($1, "n") >>
;

BOItem
: ElementItem << $0, nil >>
| AssociationItem
| MessageItem
| ActionItem << $0, nil >>
| BusinessObjectNode << $0, nil >>
;

MessageItem
: "message" Identifier "text" stringLit ":" Namespace terminator
;

AssociationItem
: keywordAssociation Identifier keywordTo Identifier terminator
| keywordAssociation Identifier Multiplicity keywordTo Identifier terminator
| keywordAssociation Identifier Multiplicity keywordTo Identifier keywordValuation "(" Valuation ")" terminator << ast.NewAssociationItem($1, $2, $4, $7), nil >>
;

ElementItem
: "element" Identifier ":" DataType terminator << ast.NewElementItem($1, $3, nil) >>
| "element" Identifier ":" DataType "=" Value terminator << ast.NewElementItem($1, $3, $5) >>
;

ActionItem
: keywordAction Identifier terminator << ast.NewActionItem($1, nil), nil >>
| keywordAction Identifier RaiseExpr terminator << ast.NewActionItem($1, $2), nil >>
;

DataType
: Identifier << ast.NewDataType($0, nil) >>
| Namespace ":" Identifier << ast.NewDataType($0, $2) >>
;

Value
: floatLit << ast.NewNumberValue($0) >>
| intLit << ast.NewNumberValue($0) >>
| stringLit << ast.NewStringValue($0) >>
| boolLit << ast.NewBoolValue($0) >>
| ComplexValue
;

ComplexValue
: "{" KeyValueList "}" << ast.NewComplexValue($1) >>
;

KeyValueList
: KeyValue  << ast.NewKeyValueList($0, nil) >>
| KeyValueList "," KeyValue << ast.NewKeyValueList($2, $0) >>
;

KeyValue
: Identifier "=" Value << ast.NewKeyValuePair($0, $2) >>
;

Valuation
: Condition
| Valuation "&&" Condition
;

Condition
: Identifier cmpOp Identifier
| Identifier cmpOp Value << ast.NewCondition($0, $2), nil >>
;

NamespaceList
: Namespace
| Namespace "," NamespaceList
;

AnnotationList
: Annotation << ast.NewAnnotationList($0, nil) >>
| Annotation AnnotationList << ast.NewAnnotationList($0, $1) >>
;

Namespace
: Identifier << ast.NewNamespace($0, nil) >>
| Identifier "." Namespace << ast.NewNamespace($0, $2) >>
;

Annotation
: "[" Identifier "]"  << ast.NewAnnotation($1, nil, nil) >>
| "[" Identifier "(" stringLit ")" "]" << ast.NewAnnotation($1, nil, $3) >>
| "[" Identifier "(" Namespace ")" "]" << ast.NewAnnotation($1, $3, nil) >>
;

RepeatTerminator
: terminator RepeatTerminator 
| empty	
;

RaiseExpr
: keywordRaises IdentifierList << ast.NewRaiseExpr($1) >>
;

IdentifierList
: Identifier  << ast.NewCommonList(nil, $0) >>
| IdentifierList "," Identifier << ast.NewCommonList($0, $2) >>
;

Identifier
: identifier << ast.NewIdentifier($0) >> 
;