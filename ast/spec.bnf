// === [ Lexical part] =========================================================

terminator
: ';' '\n' 
| ';' 
| '\n'
;

// --- [ Whitespaces (suppressed) ] --------------------------------------------
!whitespace 
: ' ' 
| '\t' 
| '\r' 
;

// --- [ Comments (suppressed) ] -----------------------------------------------

!comment
: _lineComment 
| _blockComment
;

_lineComment  
: '/' '/' { . } '\n' 
;

_blockComment : '/' '*' { . | '*' } '*' '/' ;

// --- [ Letters and digits ] --------------------------------------------------

_letter       	
: _unicodeLetter 
| '_' 
;

_unicodeLetter 	
: 'a' - 'z' 
| 'A' - 'Z' 
;

_decimalDigit  	
: '0' - '9' 
;

_octalDigit
: '0' - '7' 
;

_hexDigit      	
: _decimalDigit 
| 'a' - 'f' 
| 'A' - 'F' 
;

// --- [ Identifiers ] ---------------------------------------------------------

identifier 	
: _letter { _letter | _decimalDigit } 
;

// --- [ Integer literals ] ----------------------------------------------------

intLit      
: _decimalLit 
| _octalLit 
| _hexLit 
;

_decimalLit 
: '1' - '9' { _decimalDigit } 
;

_octalLit   
: '0' { _octalDigit } 
;

_hexLit     
: '0' ( 'x' | 'X' ) _hexDigit { _hexDigit } 
;

// --- [ Floating-point literals ] ---------------------------------------------

floatLit  
: _decimals '.' [ _decimals ] [ _exponent ]
| _decimals _exponent
| '.' _decimals [ _exponent ]
;

_decimals 
: _decimalDigit { _decimalDigit } 
;

_exponent 
: ( 'e' | 'E' ) [ '+' | '-' ] _decimals 
;

// --- [ String literals ] -----------------------------------------------------

stringLit
:  _rawStrLit 
| _interpretedStrLit 
;

_rawStrLit
: '`' { . } '`' 
;

_interpretedStrLit 
: '"' { . | '\\' '"' | _escapeChar } '"' 
;

// --- [ Single-character escapes ] --------------------------------------------

_escapeChar 
: '\\' 'n' 
| '\\' 'r' 
| '\\' 't' 
;

// --- [ Rune literals ] -------------------------------------------------------

runeLit  
: '\'' [ '\\' ] [ . ] '\'' 
;

<< import "github.com/Soontao/pdi-util/ast" >>

// === [ Syntax part] ==========================================================

StatementList
: Statement terminator RepeatTerminator StatementList
| Statement RepeatTerminator
;

RepeatTerminator
: terminator RepeatTerminator 
| empty	
;

Statement
: ImportAsDeclaration	
| ImportNormalDeclaration 
;

ImportAsDeclaration
: "import" Namespace "as" Identifier << ast.NewImportAsDeclaration($1, $3) >> 
;	

ImportNormalDeclaration
: "import" Namespace 
;										

Namespace
: Identifier << ast.NewNamespace($0, nil) >>
| Identifier "." Namespace << ast.NewNamespace($0, $2) >>
;


Identifier
: identifier << ast.NewIdentifier($0) >> 
;
