//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_g "errors";_da "fmt";_gf "github.com/unidoc/unioffice/spreadsheet/update";_d "regexp";_c "strconv";_f "strings";);

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_f .TrimSpace (s );if len (s )< 2{return CellReference {},_g .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_b :=CellReference {};_cc ,_ba ,_af :=_cef (s );if _af !=nil {return CellReference {},_af ;};if _cc !=""{_b .SheetName =_cc ;};if s [0]=='$'{_b .AbsoluteColumn =true ;_ba =_ba [1:];};_cca :=-1;_e :for _gc :=0;_gc < len (_ba );_gc ++{switch {case _ba [_gc ]>='0'&&_ba [_gc ]<='9'||_ba [_gc ]=='$':_cca =_gc ;break _e ;};};switch _cca {case 0:return CellReference {},_da .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_ba );case -1:return CellReference {},_da .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_ba );};_b .Column =_ba [0:_cca ];if _ba [_cca ]=='$'{_b .AbsoluteRow =true ;_cca ++;};_b .ColumnIdx =ColumnToIndex (_b .Column );_ae ,_af :=_c .ParseUint (_ba [_cca :],10,32);if _af !=nil {return CellReference {},_da .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_af );};if _ae ==0{return CellReference {},_da .Errorf ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0072\u006f\u0077\u003a \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0030");};_b .RowIdx =uint32 (_ae );return _b ,nil ;};var _ag =_d .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// String returns a string representation of CellReference.
func (_db CellReference )String ()string {_fc :=make ([]byte ,0,4);if _db .AbsoluteColumn {_fc =append (_fc ,'$');};_fc =append (_fc ,_db .Column ...);if _db .AbsoluteRow {_fc =append (_fc ,'$');};_fc =_c .AppendInt (_fc ,int64 (_db .RowIdx ),10);return string (_fc );};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_be *ColumnReference )Update (updateType _gf .UpdateAction )*ColumnReference {switch updateType {case _gf .UpdateActionRemoveColumn :_gg :=_be ;_gg .ColumnIdx =_be .ColumnIdx -1;_gg .Column =IndexToColumn (_gg .ColumnIdx );return _gg ;default:return _be ;};};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_gfe ,_eg CellReference ,_cd error ){_bg ,_bac ,_cd :=_cef (s );if _cd !=nil {return CellReference {},CellReference {},_cd ;};_ab :=_f .Split (_bac ,"\u003a");if len (_ab )!=2{return CellReference {},CellReference {},_g .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _bg !=""{_ab [0]=_bg +"\u0021"+_ab [0];_ab [1]=_bg +"\u0021"+_ab [1];};_fg ,_cd :=ParseCellReference (_ab [0]);if _cd !=nil {return CellReference {},CellReference {},_cd ;};_fcb ,_cd :=ParseCellReference (_ab [1]);if _cd !=nil {return CellReference {},CellReference {},_cd ;};return _fg ,_fcb ,nil ;};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_f .ToUpper (col );_ca :=uint32 (0);for _ ,_bc :=range col {_ca *=26;_ca +=uint32 (_bc -'A'+1);};return _ca -1;};

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_fcf *CellReference )Update (updateType _gf .UpdateAction )*CellReference {switch updateType {case _gf .UpdateActionRemoveColumn :_gd :=_fcf ;_gd .ColumnIdx =_fcf .ColumnIdx -1;_gd .Column =IndexToColumn (_gd .ColumnIdx );return _gd ;default:return _fcf ;};};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_ccca ,_dag ColumnReference ,_ccb error ){_fd :="";_caa :=_f .Split (s ,"\u0021");if len (_caa )==2{_fd =_caa [0];s =_caa [1];};_ccd :=_f .Split (s ,"\u003a");if len (_ccd )!=2{return ColumnReference {},ColumnReference {},_g .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _fd !=""{_ccd [0]=_fd +"\u0021"+_ccd [0];_ccd [1]=_fd +"\u0021"+_ccd [1];};_egd ,_ccb :=ParseColumnReference (_ccd [0]);if _ccb !=nil {return ColumnReference {},ColumnReference {},_ccb ;};_fcg ,_ccb :=ParseColumnReference (_ccd [1]);if _ccb !=nil {return ColumnReference {},ColumnReference {},_ccb ;};return _egd ,_fcg ,nil ;};func _cef (_eb string )(string ,string ,error ){_beb :="";_fb :=_f .LastIndex (_eb ,"\u0021");if _fb > -1{_beb =_eb [:_fb ];_eb =_eb [_fb +1:];if _beb ==""{return "","",_g .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");};};return _beb ,_eb ,nil ;};

// String returns a string representation of ColumnReference.
func (_ee ColumnReference )String ()string {_ff :=make ([]byte ,0,4);if _ee .AbsoluteColumn {_ff =append (_ff ,'$');};_ff =append (_ff ,_ee .Column ...);return string (_ff );};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _ce [64+1]byte ;_afb :=len (_ce );_bae :=col ;const _bca =26;for _bae >=_bca {_afb --;_cb :=_bae /_bca ;_ce [_afb ]=byte ('A'+uint (_bae -_cb *_bca ));_bae =_cb -1;};_afb --;_ce [_afb ]=byte ('A'+uint (_bae ));return string (_ce [_afb :]);};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_f .TrimSpace (s );if len (s )< 1{return ColumnReference {},_g .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_ccc :=ColumnReference {};_gb ,_gbe ,_ef :=_cef (s );if _ef !=nil {return ColumnReference {},_ef ;};if _gb !=""{_ccc .SheetName =_gb ;};if _gbe [0]=='$'{_ccc .AbsoluteColumn =true ;_gbe =_gbe [1:];};if !_ag .MatchString (_gbe ){return ColumnReference {},_g .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_ccc .Column =_gbe ;_ccc .ColumnIdx =ColumnToIndex (_ccc .Column );return _ccc ,nil ;};