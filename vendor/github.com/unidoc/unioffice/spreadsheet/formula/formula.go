//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_b "bytes";_c "errors";_a "fmt";_dd "github.com/unidoc/unioffice";_fc "github.com/unidoc/unioffice/internal/mergesort";_dc "github.com/unidoc/unioffice/internal/wildcard";_ef "github.com/unidoc/unioffice/spreadsheet/format";_bd "github.com/unidoc/unioffice/spreadsheet/reference";_bg "github.com/unidoc/unioffice/spreadsheet/update";_ab "io";_gc "math";_ae "math/big";_gd "math/rand";_dg "regexp";_d "sort";_e "strconv";_f "strings";_fe "sync";_dge "time";_ce "unicode";);func _cecbda (_dffb Result )*criteriaParsed {_abfab :=_dffb .Type ==ResultTypeNumber ;_gdff :=_dffb .ValueNumber ;_edeef :=_f .ToLower (_dffb .ValueString );_ccad :=_agfgg (_edeef );return &criteriaParsed {_abfab ,_gdff ,_edeef ,_ccad };};func (_ege *evCache )GetFromCache (key string )(Result ,bool ){_ege ._aaea .Lock ();_dad ,_aga :=_ege ._eac [key ];_ege ._aaea .Unlock ();return _dad ,_aga ;};type countMode byte ;

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func (_bfcaf PrefixVerticalRange )verticalRangeReference (_eacfg string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eacfg ,_bfcaf ._bfgce ,_bfcaf ._ccecb );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bec :=ctx .GetEpoch ();_agfab ,_gbea :=_faaf (args [0].Value (),_bec );if _gbea !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_agfab .Year ()));};func (_cd BinOpType )String ()string {if _cd >=BinOpType (len (_afa )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cd );};return _bgb [_afa [_cd ]:_afa [_cd +1]];};func _dade (_dfff ,_bcff Result ,_gddae string )(*xargs ,Result ){if _dfff .Type !=ResultTypeList &&_dfff .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gddae +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_fcgf :=_bdbg (_dfff );_ffdg :=[]float64 {};for _ ,_abbgd :=range _fcgf {for _ ,_cabc :=range _abbgd {if _cabc .Type ==ResultTypeNumber &&!_cabc .IsBoolean {_ffdg =append (_ffdg ,_cabc .ValueNumber );}else {return nil ,MakeErrorResult (_gddae +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_bfgde :=len (_ffdg );if len (_ffdg )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _bcff .Type !=ResultTypeList &&_bcff .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gddae +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_aeeg :=_bdbg (_bcff );_edaaa :=[]float64 {};_bgag :=0.0;for _ ,_afbf :=range _aeeg {for _ ,_gdg :=range _afbf {if _gdg .Type ==ResultTypeNumber &&!_gdg .IsBoolean {_fdce :=float64 (int (_gdg .ValueNumber ));if _fdce < _bgag {return nil ,MakeErrorResultType (ErrorTypeNum ,_gddae +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_edaaa =append (_edaaa ,_fdce );_bgag =_fdce ;}else {return nil ,MakeErrorResult (_gddae +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_edaaa )!=_bfgde {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_ffdg ,_edaaa },MakeEmptyResult ();};func _edcdb (_ffceb yyLexer )int {return _defae ().Parse (_ffceb )};func _deac (_gffab ,_fbab float64 )float64 {_gffab =_gc .Trunc (_gffab );_fbab =_gc .Trunc (_fbab );if _gffab ==0&&_fbab ==0{return 0;};return _gffab *_fbab /_aecd (_gffab ,_fbab );};func _ffce ()evCache {_gdb :=evCache {};_gdb ._eac =make (map[string ]Result );_gdb ._aaea =&_fe .Mutex {};return _gdb ;};func _face (_fafa ,_fdaa _dge .Time ,_cedg int )float64 {if _fafa .After (_fdaa ){_fafa ,_fdaa =_fdaa ,_fafa ;};_dcfb :=0;_ggg ,_gcag ,_bea :=_fafa .Date ();_bfc ,_fcba ,_facg :=_fdaa .Date ();_efaf ,_bgd :=int (_gcag ),int (_fcba );_beee ,_bdba :=_dfdg (_ggg ,_efaf ,_bea ,_cedg ),_dfdg (_bfc ,_bgd ,_facg ,_cedg );if !_gcb (_cedg ){return _cde (_bfc ,_bgd ,_bdba )-_cde (_ggg ,_efaf ,_beee );};if _cedg ==0{if (_efaf ==2||_beee < 30)&&_facg ==31{_bdba =31;}else if _bgd ==2&&_bdba ==_fba (_bfc ,_bgd ){_bdba =_fba (_bfc ,2);};}else {if _efaf ==2&&_beee ==30{_beee =_fba (_ggg ,2);};if _bgd ==2&&_bdba ==30{_bdba =_fba (_bfc ,2);};};if _ggg < _bfc ||(_ggg ==_bfc &&_efaf < _bgd ){_dcfb =30-_beee +1;_bea =1;_beee =1;_fbd :=_dge .Date (_ggg ,_dge .Month (_efaf ),_bea ,0,0,0,0,_dge .UTC ).AddDate (0,1,0);if _fbd .Year ()< _bfc {_dcfb +=_cfd (_fbd .Year (),int (_fbd .Month ()),12,_cedg );_fbd =_fbd .AddDate (0,13-int (_fbd .Month ()),0);_dcfb +=_dbca (_fbd .Year (),_bfc -1,_cedg );};_dcfb +=_cfd (_bfc ,int (_fbd .Month ()),_bgd -1,_cedg );_fbd =_fbd .AddDate (0,_bgd -int (_fbd .Month ()),0);_efaf =_fbd .Day ();};_dcfb +=_bdba -_beee ;if _dcfb > 0{return float64 (_dcfb );}else {return 0;};};func _gcfa (_daeed Result ,_fgca *criteriaParsed )bool {if _daeed .Type ==ResultTypeEmpty {return false ;};if _fgca ._agcea {return _daeed .ValueNumber ==_fgca ._gaed ;}else {_fffbd :=_f .ToLower (_daeed .ValueString );return _fgca ._babdb ==_fffbd ||_dc .Match (_fgca ._babdb ,_fffbd );};};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcec :=args [0].AsNumber ();if _dcec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daef :=0;if len (args )> 1{_bdcc :=args [1];if _bdcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_daef =int (_bdcc .ValueNumber );if _daef < 0{_daef =0;}else if _daef > 4{_daef =4;};};_accb :=_afceb ;switch _daef {case 1:_accb =_gdfeg ;case 2:_accb =_acda ;case 3:_accb =_gdcea ;case 4:_accb =_bfeb ;};_ffbc :=_gc .Trunc (_dcec .ValueNumber );_egbdf :=_b .Buffer {};for _ ,_deef :=range _accb {for _ffbc >=_deef ._dgaa {_egbdf .WriteString (_deef ._bagfa );_ffbc -=_deef ._dgaa ;};};return MakeStringResult (_egbdf .String ());};func _aag (_fdg ,_egg _dge .Time ,_ffgd ,_bfea int )_dge .Time {_ccdf :=_egg ;_eadf :=_fdg .Year ()-_egg .Year ();_ccdf =_ccdf .AddDate (_eadf ,0,0);if _fdg .After (_ccdf ){_ccdf =_ccdf .AddDate (1,0,0);};_cacf :=-12/_ffgd ;for _ccdf .After (_fdg ){_ccdf =_ccdf .AddDate (0,_cacf ,0);};return _ccdf ;};

// Eval evaluates and returns a string.
func (_cbcgd String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_cbcgd ._dcgg )};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_fgb :=len (args );if _fgb < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgdb :=args [0].ValueNumber ;if _bgdb ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bagb :=[]float64 {};for _ ,_dddf :=range args [1:]{switch _dddf .Type {case ResultTypeNumber :_bagb =append (_bagb ,_dddf .ValueNumber );case ResultTypeArray ,ResultTypeList :_egfbg :=_bdbg (_dddf );for _ ,_gggf :=range _egfbg {for _ ,_cacc :=range _gggf {if _cacc .Type ==ResultTypeNumber &&!_cacc .IsBoolean {_bagb =append (_bagb ,_cacc .ValueNumber );};};};};};_abbbe :=0.0;for _ebbb ,_ffgg :=range _bagb {_abbbe +=_ffgg /_gc .Pow (1+_bgdb ,float64 (_ebbb )+1);};return MakeNumberResult (_abbbe );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fccgg :=args [0];switch _fccgg .Type {case ResultTypeError :return _fccgg ;case ResultTypeNumber ,ResultTypeString :return _cdfe (args [0]);case ResultTypeList :_bbgg :=_fccgg .ValueList ;_agbfb :=[]Result {};for _ ,_deeef :=range _bbgg {_ffgf :=_cdfe (_deeef );if _ffgf .Type ==ResultTypeError {return _ffgf ;};_agbfb =append (_agbfb ,_ffgf );};return MakeListResult (_agbfb );case ResultTypeArray :_fcdcg :=_fccgg .ValueArray ;_adgga :=[][]Result {};for _ ,_bbbd :=range _fcdcg {_fddcf :=[]Result {};for _ ,_fcged :=range _bbbd {_gfcb :=_cdfe (_fcged );if _gfcb .Type ==ResultTypeError {return _gfcb ;};_fddcf =append (_fddcf ,_gfcb );};_adgga =append (_adgga ,_fddcf );};return MakeArrayResult (_adgga );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func _aecd (_deec ,_gaagc float64 )float64 {_deec =_gc .Trunc (_deec );_gaagc =_gc .Trunc (_gaagc );if _deec ==0{return _gaagc ;};if _gaagc ==0{return _deec ;};for _deec !=_gaagc {if _deec > _gaagc {_deec =_deec -_gaagc ;}else {_gaagc =_gaagc -_deec ;};};return _deec ;};

// String returns an empty string for Error.
func (_eab Error )String ()string {return ""};func _gdad (_degf string )bool {for _ ,_bee :=range _fafd {_fdb :=_bee .FindStringSubmatch (_degf );if len (_fdb )> 1{return true ;};};return false ;};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_gc .Pi );};func _fbg (_fea BinOpType ,_cb ,_gb []Result )Result {_eg :=[]Result {};for _dcd :=range _cb {_aee :=_cb [_dcd ].AsNumber ();_fd :=_gb [_dcd ].AsNumber ();if _aee .Type !=ResultTypeNumber ||_fd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fea {case BinOpTypePlus :_eg =append (_eg ,MakeNumberResult (_aee .ValueNumber +_fd .ValueNumber ));case BinOpTypeMinus :_eg =append (_eg ,MakeNumberResult (_aee .ValueNumber -_fd .ValueNumber ));case BinOpTypeMult :_eg =append (_eg ,MakeNumberResult (_aee .ValueNumber *_fd .ValueNumber ));case BinOpTypeDiv :if _fd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eg =append (_eg ,MakeNumberResult (_aee .ValueNumber /_fd .ValueNumber ));case BinOpTypeExp :_eg =append (_eg ,MakeNumberResult (_gc .Pow (_aee .ValueNumber ,_fd .ValueNumber )));case BinOpTypeLT :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber < _fd .ValueNumber ));case BinOpTypeGT :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber > _fd .ValueNumber ));case BinOpTypeEQ :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber ==_fd .ValueNumber ));case BinOpTypeLEQ :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber <=_fd .ValueNumber ));case BinOpTypeGEQ :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber >=_fd .ValueNumber ));case BinOpTypeNE :_eg =append (_eg ,MakeBoolResult (_aee .ValueNumber !=_fd .ValueNumber ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fea ));};};return MakeListResult (_eg );};func _fegd (_geaa ,_gdab ,_bcef ,_ceda ,_abff float64 ,_ddeb int )float64 {_fcad :=_bca (_geaa ,_bcef ,_ceda ,_abff ,_ddeb );var _afce float64 ;if _gdab ==1{if _ddeb ==1{_afce =0;}else {_afce =-_ceda ;};}else {if _ddeb ==1{_afce =_agfe (_geaa ,_gdab -2,_fcad ,_ceda ,1)-_fcad ;}else {_afce =_agfe (_geaa ,_gdab -1,_fcad ,_ceda ,0);};};return _afce *_geaa ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_beed :=args [0];switch _beed .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_bbef :=0.0;_dbbc :=0.0;for _ ,_baee :=range _beed .ValueString {_cggc :=0.0;switch _baee {case 'I':_cggc =1;case 'V':_cggc =5;case 'X':_cggc =10;case 'L':_cggc =50;case 'C':_cggc =100;case 'D':_cggc =500;case 'M':_cggc =1000;};_bbef +=_cggc ;switch {case _dbbc ==_cggc &&(_dbbc ==5||_dbbc ==50||_dbbc ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dbbc ==_cggc :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _dbbc < _cggc {_bbef -=2*_dbbc ;};_dbbc =_cggc ;};return MakeNumberResult (_bbef );case ResultTypeError :return _beed ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_beed .Type ));};};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbcd :=args [0].AsNumber ();if _gbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becgb :=args [1].AsNumber ();if _becgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_gc .Pow (_gbcd .ValueNumber ,_becgb .ValueNumber ));};func _fcagf (_fbaca ,_gdfe ,_dabbc ,_fadc ,_eabfb float64 )float64 {var _gdec float64 ;_ecab :=_eabfb /_dabbc ;if _ecab >=1{_ecab =1;if _fadc ==1{_gdec =_fbaca ;}else {_gdec =0;};}else {_gdec =_fbaca *_gc .Pow (1-_ecab ,_fadc -1);};_ddg :=_fbaca *_gc .Pow (1-_ecab ,_fadc );var _faac float64 ;if _ddg < _gdfe {_faac =_gdec -_gdfe ;}else {_faac =_gdec -_ddg ;};if _faac < 0{_faac =0;};return _faac ;};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_feead :=args [0].AsString ();if _feead .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afff :=_b .Buffer {};for _ ,_ecbg :=range _feead .ValueString {if _ce .IsPrint (_ecbg ){_afff .WriteRune (_ecbg );};};return MakeStringResult (_afff .String ());};const _efcce =187;

// String returns a string representation of FunctionCall expression.
func (_dbce FunctionCall )String ()string {_gcec :=_b .Buffer {};_gcec .WriteString (_dbce ._bffe );_gcec .WriteString ("\u0028");_cfefe :=len (_dbce ._cdeb )-1;for _agdbf ,_eadb :=range _dbce ._cdeb {_gcec .WriteString (_eadb .String ());if _agdbf !=_cfefe {_gcec .WriteString ("\u002c");};};_gcec .WriteString ("\u0029");return _gcec .String ();};const _bdbgf =57373;const _fdddb =57372;

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fgd *defEval )LastEvalIsRef ()bool {return _fgd ._fga };func _dcdge (_dgaff int )string {if _dgaff >=0&&_dgaff < len (_fcec ){if _fcec [_dgaff ]!=""{return _fcec [_dgaff ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dgaff );};const _eec ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_ebab :=_bagfe (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _ebab .Type !=ResultTypeEmpty {return _ebab ;};_dfaff :=_bbbg (args );return MakeNumberResult (float64 (len (_dfaff )));};func _bdbag (_debg string ,_fdfgc func (_ddcb float64 )float64 )Function {return func (_egdfb []Result )Result {if len (_egdfb )!=1{return MakeErrorResult (_debg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eacfb :=_egdfb [0].AsNumber ();switch _eacfb .Type {case ResultTypeNumber :_dcfc :=_fdfgc (_eacfb .ValueNumber );if _gc .IsNaN (_dcfc ){return MakeErrorResult (_debg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gc .IsInf (_dcfc ,0){return MakeErrorResult (_debg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _dcfc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_debg +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_dcfc );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_debg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eacfb ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_debg ,_eacfb .Type ));};};};func (_bgbgb *Lexer )lex (_fdgg _ab .Reader ){_ddgac ,_efgg ,_ddbad :=0,0,0;_aeefd :=-1;_fbeab ,_dbffe ,_gaac :=0,0,0;_ =_gaac ;_fefbd :=1;_ =_fefbd ;_deced :=make ([]byte ,4096);_cfdbf :=false ;for !_cfdbf {_dbbg :=0;if _fbeab > 0{_dbbg =_efgg -_fbeab ;};_efgg =0;_dcaga ,_dgcb :=_fdgg .Read (_deced [_dbbg :]);if _dcaga ==0||_dgcb !=nil {_cfdbf =true ;};_ddbad =_dcaga +_dbbg ;if _ddbad < len (_deced ){_aeefd =_ddbad ;};{_ddgac =_dcbc ;_fbeab =0;_dbffe =0;_gaac =0;};{var _fgga int ;var _fgbfd uint ;if _efgg ==_ddbad {goto _ggbf ;};if _ddgac ==0{goto _fgdd ;};_fdfae :_fgga =int (_fbbg [_ddgac ]);_fgbfd =uint (_gagae [_fgga ]);_fgga ++;for ;_fgbfd > 0;_fgbfd --{_fgga ++;switch _gagae [_fgga -1]{case 2:_fbeab =_efgg ;};};switch _ddgac {case 30:switch _deced [_efgg ]{case 34:goto _cgfcc ;case 35:goto _gdbdf ;case 36:goto _ebagdb ;case 38:goto _gfea ;case 39:goto _cdfc ;case 40:goto _bcgff ;case 41:goto _bgeg ;case 42:goto _fgfgc ;case 43:goto _ffggd ;case 44:goto _bcdag ;case 45:goto _aega ;case 47:goto _bbfdf ;case 58:goto _fcgeg ;case 59:goto _gdcgg ;case 60:goto _gafaf ;case 61:goto _dfdf ;case 62:goto _afde ;case 63:goto _ccgc ;case 70:goto _cbgea ;case 84:goto _aedf ;case 92:goto _geae ;case 94:goto _ggdbc ;case 95:goto _cedd ;case 123:goto _cbegb ;case 125:goto _baef ;};switch {case _deced [_efgg ]< 65:switch {case _deced [_efgg ]> 37:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _dgfbc ;};case _deced [_efgg ]>=33:goto _ccgc ;};case _deced [_efgg ]> 90:switch {case _deced [_efgg ]> 93:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _gaabg ;};case _deced [_efgg ]>=91:goto _ccgc ;};default:goto _gfbec ;};goto _gbed ;case 1:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _dbcca ;case 123:goto _dbcca ;case 125:goto _dbcca ;};switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _dbcca ;};case _deced [_efgg ]> 45:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _dbcca ;};case _deced [_efgg ]>=58:goto _dbcca ;};default:goto _dbcca ;};goto _gbed ;case 0:goto _fgdd ;case 2:if _deced [_efgg ]==34{goto _abebf ;};goto _cgfcc ;case 31:if _deced [_efgg ]==34{goto _cgfcc ;};goto _effb ;case 3:switch _deced [_efgg ]{case 78:goto _cgbdg ;case 82:goto _gfgb ;};goto _ccgc ;case 4:switch _deced [_efgg ]{case 47:goto _fddg ;case 85:goto _ddgag ;};goto _ccgc ;case 5:if _deced [_efgg ]==65{goto _ggaefb ;};goto _ccgc ;case 6:switch _deced [_efgg ]{case 76:goto _eafg ;case 77:goto _ecbfe ;};goto _ccgc ;case 7:if _deced [_efgg ]==76{goto _ecbfe ;};goto _ccgc ;case 8:if _deced [_efgg ]==33{goto _ggaefb ;};goto _ccgc ;case 9:if _deced [_efgg ]==69{goto _agbg ;};goto _ccgc ;case 10:if _deced [_efgg ]==70{goto _dccg ;};goto _ccgc ;case 11:if _deced [_efgg ]==33{goto _abefbd ;};goto _ccgc ;case 12:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _ccgc ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _ccgc ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]< 65:if 58<=_deced [_efgg ]&&_deced [_efgg ]<=63{goto _ccgc ;};case _deced [_efgg ]> 90:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _ccgc ;};default:goto _bgfc ;};default:goto _fddccb ;};goto _gbed ;case 13:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _ccgc ;case 58:goto _cebac ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _ccgc ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _ccgc ;};case _deced [_efgg ]>=59:goto _ccgc ;};default:goto _fddccb ;};goto _gbed ;case 14:if _deced [_efgg ]==36{goto _fgfdf ;};if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _fcda ;};goto _dbcca ;case 15:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _fcda ;};goto _dbcca ;case 32:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _fcda ;};goto _cabgf ;case 16:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 47:goto _ccgc ;case 58:goto _afaaa ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 45:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cgdbd ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]> 90:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _ccgc ;};case _deced [_efgg ]>=65:goto _bgfc ;};default:goto _ccgc ;};goto _gbed ;case 17:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _dbcca ;case 123:goto _dbcca ;case 125:goto _dbcca ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _dbcca ;};case _deced [_efgg ]>=34:goto _dbcca ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _dbcca ;};case _deced [_efgg ]>=58:goto _dbcca ;};default:goto _cgdbd ;};goto _gbed ;case 33:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _fddb ;case 123:goto _fddb ;case 125:goto _fddb ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _fddb ;};case _deced [_efgg ]>=34:goto _fddb ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _fddb ;};case _deced [_efgg ]>=58:goto _fddb ;};default:goto _cgdbd ;};goto _gbed ;case 18:if _deced [_efgg ]==36{goto _fafab ;};if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _agafc ;};goto _dbcca ;case 19:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _agafc ;};goto _dbcca ;case 34:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _agafc ;};goto _gccf ;case 20:switch _deced [_efgg ]{case 39:goto _ccgc ;case 42:goto _ccgc ;case 47:goto _ccgc ;case 58:goto _ccgc ;case 63:goto _ccgc ;};if 91<=_deced [_efgg ]&&_deced [_efgg ]<=93{goto _ccgc ;};goto _ccddb ;case 21:switch _deced [_efgg ]{case 39:goto _gfga ;case 42:goto _ccgc ;case 47:goto _ccgc ;case 58:goto _ccgc ;case 63:goto _ccgc ;};if 91<=_deced [_efgg ]&&_deced [_efgg ]<=93{goto _ccgc ;};goto _ccddb ;case 22:if _deced [_efgg ]==33{goto _adfbf ;};goto _ccgc ;case 35:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _ddgdc ;case 58:goto _cebac ;case 101:goto _acfdf ;case 123:goto _gaebg ;case 125:goto _gaebg ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=47{goto _gaebg ;};case _deced [_efgg ]>=34:goto _gaebg ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _gaebg ;};case _deced [_efgg ]>=59:goto _gaebg ;};default:goto _dgfbc ;};goto _gbed ;case 36:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _gaebg ;case 101:goto _acfdf ;case 123:goto _gaebg ;case 125:goto _gaebg ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _gaebg ;};case _deced [_efgg ]>=34:goto _gaebg ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _gaebg ;};case _deced [_efgg ]>=58:goto _gaebg ;};default:goto _ddgdc ;};goto _gbed ;case 23:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _ddge ;case 123:goto _ddge ;case 125:goto _ddge ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _ddge ;};case _deced [_efgg ]>=34:goto _ddge ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _ddge ;};case _deced [_efgg ]>=58:goto _ddge ;};default:goto _caaf ;};goto _gbed ;case 37:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 47:goto _gaebg ;case 123:goto _gaebg ;case 125:goto _gaebg ;};switch {case _deced [_efgg ]< 48:switch {case _deced [_efgg ]> 35:if 37<=_deced [_efgg ]&&_deced [_efgg ]<=45{goto _gaebg ;};case _deced [_efgg ]>=34:goto _gaebg ;};case _deced [_efgg ]> 57:switch {case _deced [_efgg ]> 63:if 91<=_deced [_efgg ]&&_deced [_efgg ]<=94{goto _gaebg ;};case _deced [_efgg ]>=58:goto _gaebg ;};default:goto _caaf ;};goto _gbed ;case 38:switch _deced [_efgg ]{case 61:goto _fgcde ;case 62:goto _fccgc ;};goto _bgfbf ;case 39:if _deced [_efgg ]==61{goto _geaeg ;};goto _dbae ;case 24:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _ccgc ;};default:goto _ccgc ;};goto _gbed ;case 40:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 40:goto _edeagb ;case 46:goto _caca ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _caca ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _caca ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 41:switch _deced [_efgg ]{case 46:goto _abbbb ;case 92:goto _abbbb ;case 95:goto _abbbb ;};switch {case _deced [_efgg ]< 65:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _abbbb ;};case _deced [_efgg ]> 90:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _abbbb ;};default:goto _abbbb ;};goto _gaeadd ;case 42:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 43:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 40:goto _edeagb ;case 46:goto _caca ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _fddb ;case 125:goto _fddb ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _fddb ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};default:goto _fddb ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _caca ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _fddb ;};default:goto _fddb ;};goto _gbed ;case 44:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _dbcca ;case 125:goto _dbcca ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _dbcca ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _dbcca ;};default:goto _dbcca ;};goto _gbed ;case 25:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 65:goto _affd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 66<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _ccgc ;};default:goto _ccgc ;};goto _gbed ;case 45:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 76:goto _fedc ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 46:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 83:goto _acfgb ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 47:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 69:goto _dbac ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 26:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 79:goto _edbgf ;case 82:goto _fcgea ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _ccgc ;};default:goto _ccgc ;};goto _gbed ;case 48:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 68:goto _dggcg ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 49:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 79:goto _bgbf ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 50:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 36:goto _adge ;case 40:goto _edeagb ;case 46:goto _caca ;case 58:goto _afaaa ;case 85:goto _acfgb ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 59:switch {case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cfbbd ;};case _deced [_efgg ]>=34:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _dfcaa ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 27:switch _deced [_efgg ]{case 46:goto _abbbb ;case 92:goto _abbbb ;case 95:goto _abbbb ;};switch {case _deced [_efgg ]< 65:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _abbbb ;};case _deced [_efgg ]> 90:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _abbbb ;};default:goto _abbbb ;};goto _ccgc ;case 28:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 120:goto _cfgb ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _ccgc ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _ccgc ;};default:goto _ccgc ;};goto _gbed ;case 51:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 108:goto _deabf ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 52:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 102:goto _gfgbd ;case 110:goto _cbee ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 53:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 110:goto _feedd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 54:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _dcfce ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 55:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _bgdcb ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _bgdcb ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 56:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 40:goto _bbdc ;case 46:goto _bgdcb ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _bgdcb ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _bgdcb ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 57:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 109:goto _bfca ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 58:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _dfgg ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _gaeadd ;case 125:goto _gaeadd ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _gaeadd ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _gaeadd ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _gaeadd ;};default:goto _gaeadd ;};goto _gbed ;case 59:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _gbfbe ;case 123:goto _dbcca ;case 125:goto _dbcca ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _dbcca ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _dbcca ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _gbfbe ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _dbcca ;};default:goto _dbcca ;};goto _gbed ;case 29:switch _deced [_efgg ]{case 33:goto _ecdcf ;case 46:goto _cebcd ;case 92:goto _abbbb ;case 95:goto _cebcd ;case 123:goto _ccgc ;case 125:goto _ccgc ;};switch {case _deced [_efgg ]< 58:switch {case _deced [_efgg ]< 37:if 34<=_deced [_efgg ]&&_deced [_efgg ]<=35{goto _ccgc ;};case _deced [_efgg ]> 47:if 48<=_deced [_efgg ]&&_deced [_efgg ]<=57{goto _cebcd ;};default:goto _ccgc ;};case _deced [_efgg ]> 63:switch {case _deced [_efgg ]< 91:if 65<=_deced [_efgg ]&&_deced [_efgg ]<=90{goto _cebcd ;};case _deced [_efgg ]> 94:if 97<=_deced [_efgg ]&&_deced [_efgg ]<=122{goto _cebcd ;};default:goto _ccgc ;};default:goto _ccgc ;};goto _gbed ;};_ccgc :_ddgac =0;goto _bfgba ;_gbed :_ddgac =1;goto _bfgba ;_cgfcc :_ddgac =2;goto _bfgba ;_gdbdf :_ddgac =3;goto _bfgba ;_cgbdg :_ddgac =4;goto _bfgba ;_fddg :_ddgac =5;goto _bfgba ;_ddgag :_ddgac =6;goto _bfgba ;_eafg :_ddgac =7;goto _bfgba ;_ecbfe :_ddgac =8;goto _bfgba ;_gfgb :_ddgac =9;goto _bfgba ;_agbg :_ddgac =10;goto _bfgba ;_dccg :_ddgac =11;goto _bfgba ;_ebagdb :_ddgac =12;goto _bfgba ;_fddccb :_ddgac =13;goto _bfgba ;_cebac :_ddgac =14;goto _bfgba ;_fgfdf :_ddgac =15;goto _bfgba ;_bgfc :_ddgac =16;goto _bfgba ;_adge :_ddgac =17;goto _bfgba ;_afaaa :_ddgac =18;goto _bfgba ;_fafab :_ddgac =19;goto _bfgba ;_cdfc :_ddgac =20;goto _bfgba ;_ccddb :_ddgac =21;goto _bfgba ;_gfga :_ddgac =22;goto _bfgba ;_acfdf :_ddgac =23;goto _bfgba ;_gfbec :_ddgac =24;goto _bfgba ;_cbgea :_ddgac =25;goto _bfgba ;_aedf :_ddgac =26;goto _bfgba ;_geae :_ddgac =27;goto _bfgba ;_cedd :_ddgac =28;goto _bfgba ;_gaabg :_ddgac =29;goto _bfgba ;_dbcca :_ddgac =30;goto _bccd ;_ecdcf :_ddgac =30;goto _baff ;_ggaefb :_ddgac =30;goto _dadf ;_abefbd :_ddgac =30;goto _fadab ;_adfbf :_ddgac =30;goto _ececb ;_ddge :_ddgac =30;goto _begb ;_edeagb :_ddgac =30;goto _fbfd ;_gfea :_ddgac =30;goto _edecc ;_bcgff :_ddgac =30;goto _bbbad ;_bgeg :_ddgac =30;goto _egfgc ;_fgfgc :_ddgac =30;goto _bccgf ;_ffggd :_ddgac =30;goto _efgf ;_bcdag :_ddgac =30;goto _ddfb ;_aega :_ddgac =30;goto _gedca ;_bbfdf :_ddgac =30;goto _cbag ;_fcgeg :_ddgac =30;goto _cdec ;_gdcgg :_ddgac =30;goto _cbgfa ;_dfdf :_ddgac =30;goto _ggbc ;_ggdbc :_ddgac =30;goto _eecg ;_cbegb :_ddgac =30;goto _fcbad ;_baef :_ddgac =30;goto _dbcgf ;_effb :_ddgac =30;goto _cbbaa ;_cabgf :_ddgac =30;goto _bggc ;_fddb :_ddgac =30;goto _fgee ;_gccf :_ddgac =30;goto _dcga ;_gaebg :_ddgac =30;goto _fagfd ;_bgfbf :_ddgac =30;goto _daecc ;_fgcde :_ddgac =30;goto _cafaa ;_fccgc :_ddgac =30;goto _fdba ;_dbae :_ddgac =30;goto _fbcea ;_geaeg :_ddgac =30;goto _egdge ;_gaeadd :_ddgac =30;goto _abgc ;_bbdc :_ddgac =30;goto _fcfdf ;_abebf :_ddgac =31;goto _agbd ;_fcda :_ddgac =32;goto _bfgba ;_cgdbd :_ddgac =33;goto _dccga ;_agafc :_ddgac =34;goto _bfgba ;_dgfbc :_ddgac =35;goto _gbfa ;_ddgdc :_ddgac =36;goto _gbfa ;_caaf :_ddgac =37;goto _gbfa ;_gafaf :_ddgac =38;goto _bfgba ;_afde :_ddgac =39;goto _bfgba ;_caca :_ddgac =40;goto _fdbaa ;_abbbb :_ddgac =41;goto _bfgba ;_cebcd :_ddgac =42;goto _fdbaa ;_cfbbd :_ddgac =43;goto _dccga ;_dfcaa :_ddgac =44;goto _fdbaa ;_dbac :_ddgac =44;goto _gagda ;_bgbf :_ddgac =44;goto _bbdgg ;_affd :_ddgac =45;goto _fdbaa ;_fedc :_ddgac =46;goto _fdbaa ;_acfgb :_ddgac =47;goto _fdbaa ;_edbgf :_ddgac =48;goto _fdbaa ;_dggcg :_ddgac =49;goto _fdbaa ;_fcgea :_ddgac =50;goto _fdbaa ;_cfgb :_ddgac =51;goto _fdbaa ;_deabf :_ddgac =52;goto _fdbaa ;_gfgbd :_ddgac =53;goto _fdbaa ;_feedd :_ddgac =54;goto _fdbaa ;_dcfce :_ddgac =55;goto _fdbaa ;_bgdcb :_ddgac =56;goto _fdbaa ;_cbee :_ddgac =57;goto _fdbaa ;_bfca :_ddgac =58;goto _fdbaa ;_dfgg :_ddgac =59;goto _fdbaa ;_gbfbe :_ddgac =59;goto _cedca ;_dadf :_fgga =3;goto _ebdaa ;_fadab :_fgga =5;goto _ebdaa ;_baff :_fgga =7;goto _ebdaa ;_ececb :_fgga =9;goto _ebdaa ;_fbfd :_fgga =11;goto _ebdaa ;_fcfdf :_fgga =13;goto _ebdaa ;_edecc :_fgga =15;goto _ebdaa ;_fcbad :_fgga =17;goto _ebdaa ;_dbcgf :_fgga =19;goto _ebdaa ;_bbbad :_fgga =21;goto _ebdaa ;_egfgc :_fgga =23;goto _ebdaa ;_efgf :_fgga =25;goto _ebdaa ;_gedca :_fgga =27;goto _ebdaa ;_bccgf :_fgga =29;goto _ebdaa ;_cbag :_fgga =31;goto _ebdaa ;_eecg :_fgga =33;goto _ebdaa ;_ggbc :_fgga =35;goto _ebdaa ;_cafaa :_fgga =37;goto _ebdaa ;_egdge :_fgga =39;goto _ebdaa ;_fdba :_fgga =41;goto _ebdaa ;_cdec :_fgga =43;goto _ebdaa ;_cbgfa :_fgga =45;goto _ebdaa ;_ddfb :_fgga =47;goto _ebdaa ;_fagfd :_fgga =49;goto _ebdaa ;_fgee :_fgga =51;goto _ebdaa ;_bggc :_fgga =53;goto _ebdaa ;_dcga :_fgga =55;goto _ebdaa ;_abgc :_fgga =57;goto _ebdaa ;_cbbaa :_fgga =59;goto _ebdaa ;_daecc :_fgga =61;goto _ebdaa ;_fbcea :_fgga =63;goto _ebdaa ;_begb :_fgga =65;goto _ebdaa ;_bccd :_fgga =67;goto _ebdaa ;_gagda :_fgga =72;goto _ebdaa ;_gbfa :_fgga =75;goto _ebdaa ;_dccga :_fgga =78;goto _ebdaa ;_bbdgg :_fgga =81;goto _ebdaa ;_cedca :_fgga =84;goto _ebdaa ;_fdbaa :_fgga =87;goto _ebdaa ;_agbd :_fgga =90;goto _ebdaa ;_ebdaa :_fgbfd =uint (_gagae [_fgga ]);_fgga ++;for ;_fgbfd > 0;_fgbfd --{_fgga ++;switch _gagae [_fgga -1]{case 3:_dbffe =_efgg +1;case 4:_gaac =1;case 5:_gaac =2;case 6:_gaac =3;case 7:_gaac =4;case 8:_gaac =11;case 9:_gaac =14;case 10:_gaac =15;case 11:_dbffe =_efgg +1;{_bgbgb .emit (_eeae ,_deced [_fbeab :_dbffe ]);};case 12:_dbffe =_efgg +1;{_bgbgb .emit (_ebdeg ,_deced [_fbeab :_dbffe ]);};case 13:_dbffe =_efgg +1;{_bgbgb .emit (_edeag ,_deced [_fbeab :_dbffe -1]);};case 14:_dbffe =_efgg +1;{_bgbgb .emit (_edeag ,_deced [_fbeab +1:_dbffe -2]);};case 15:_dbffe =_efgg +1;{_bgbgb .emit (_deggf ,_deced [_fbeab :_dbffe -1]);};case 16:_dbffe =_efgg +1;{_bgbgb .emit (_deggf ,_deced [_fbeab :_dbffe -1]);};case 17:_dbffe =_efgg +1;{_bgbgb .emit (_defdf ,_deced [_fbeab :_dbffe ]);};case 18:_dbffe =_efgg +1;{_bgbgb .emit (_agddd ,_deced [_fbeab :_dbffe ]);};case 19:_dbffe =_efgg +1;{_bgbgb .emit (_ceeae ,_deced [_fbeab :_dbffe ]);};case 20:_dbffe =_efgg +1;{_bgbgb .emit (_bgaeg ,_deced [_fbeab :_dbffe ]);};case 21:_dbffe =_efgg +1;{_bgbgb .emit (_fceda ,_deced [_fbeab :_dbffe ]);};case 22:_dbffe =_efgg +1;{_bgbgb .emit (_eccfd ,_deced [_fbeab :_dbffe ]);};case 23:_dbffe =_efgg +1;{_bgbgb .emit (_dbdca ,_deced [_fbeab :_dbffe ]);};case 24:_dbffe =_efgg +1;{_bgbgb .emit (_cbea ,_deced [_fbeab :_dbffe ]);};case 25:_dbffe =_efgg +1;{_bgbgb .emit (_acbf ,_deced [_fbeab :_dbffe ]);};case 26:_dbffe =_efgg +1;{_bgbgb .emit (_ceee ,_deced [_fbeab :_dbffe ]);};case 27:_dbffe =_efgg +1;{_bgbgb .emit (_bcdba ,_deced [_fbeab :_dbffe ]);};case 28:_dbffe =_efgg +1;{_bgbgb .emit (_fdddb ,_deced [_fbeab :_dbffe ]);};case 29:_dbffe =_efgg +1;{_bgbgb .emit (_bdbgf ,_deced [_fbeab :_dbffe ]);};case 30:_dbffe =_efgg +1;{_bgbgb .emit (_cgcc ,_deced [_fbeab :_dbffe ]);};case 31:_dbffe =_efgg +1;{_bgbgb .emit (_fefag ,_deced [_fbeab :_dbffe ]);};case 32:_dbffe =_efgg +1;{_bgbgb .emit (_bcabd ,_deced [_fbeab :_dbffe ]);};case 33:_dbffe =_efgg +1;{_bgbgb .emit (_gbaaa ,_deced [_fbeab :_dbffe ]);};case 34:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_bdebg ,_deced [_fbeab :_dbffe ]);};case 35:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_egegd ,_deced [_fbeab :_dbffe ]);};case 36:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_afbda ,_deced [_fbeab :_dbffe ]);};case 37:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_cdad ,_deced [_fbeab :_dbffe ]);};case 38:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_cddcc ,_deced [_fbeab :_dbffe ]);};case 39:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_gefb ,_deced [_fbeab +1:_dbffe -1]);};case 40:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_ddfa ,_deced [_fbeab :_dbffe ]);};case 41:_dbffe =_efgg ;_efgg --;{_bgbgb .emit (_cfbe ,_deced [_fbeab :_dbffe ]);};case 42:_efgg =(_dbffe )-1;{_bgbgb .emit (_bdebg ,_deced [_fbeab :_dbffe ]);};case 43:switch _gaac {case 0:{_ddgac =0;goto _bfgba ;};case 1:{_efgg =(_dbffe )-1;_bgbgb .emit (_dbfcfe ,_deced [_fbeab :_dbffe ]);};case 2:{_efgg =(_dbffe )-1;_bgbgb .emit (_bdebg ,_deced [_fbeab :_dbffe ]);};case 3:{_efgg =(_dbffe )-1;_bgbgb .emit (_egegd ,_deced [_fbeab :_dbffe ]);};case 4:{_efgg =(_dbffe )-1;_bgbgb .emit (_bfbf ,_deced [_fbeab :_dbffe ]);};case 11:{_efgg =(_dbffe )-1;_bgbgb .emit (_bdcbc ,_deced [_fbeab :_dbffe ]);};case 14:{_efgg =(_dbffe )-1;_bgbgb .emit (_cddcc ,_deced [_fbeab :_dbffe ]);};case 15:{_efgg =(_dbffe )-1;_bgbgb .emit (_gefb ,_deced [_fbeab +1:_dbffe -1]);};};};};goto _bfgba ;_bfgba :_fgga =int (_fcebg [_ddgac ]);_fgbfd =uint (_gagae [_fgga ]);_fgga ++;for ;_fgbfd > 0;_fgbfd --{_fgga ++;switch _gagae [_fgga -1]{case 0:_fbeab =0;case 1:_gaac =0;};};if _ddgac ==0{goto _fgdd ;};if _efgg ++;_efgg !=_ddbad {goto _fdfae ;};_ggbf :{};if _efgg ==_aeefd {switch _ddgac {case 1:goto _dbcca ;case 2:goto _dbcca ;case 31:goto _effb ;case 14:goto _dbcca ;case 15:goto _dbcca ;case 32:goto _cabgf ;case 17:goto _dbcca ;case 33:goto _fddb ;case 18:goto _dbcca ;case 19:goto _dbcca ;case 34:goto _gccf ;case 35:goto _gaebg ;case 36:goto _gaebg ;case 23:goto _ddge ;case 37:goto _gaebg ;case 38:goto _bgfbf ;case 39:goto _dbae ;case 40:goto _gaeadd ;case 41:goto _gaeadd ;case 42:goto _gaeadd ;case 43:goto _fddb ;case 44:goto _dbcca ;case 45:goto _gaeadd ;case 46:goto _gaeadd ;case 47:goto _gaeadd ;case 48:goto _gaeadd ;case 49:goto _gaeadd ;case 50:goto _gaeadd ;case 51:goto _gaeadd ;case 52:goto _gaeadd ;case 53:goto _gaeadd ;case 54:goto _gaeadd ;case 55:goto _gaeadd ;case 56:goto _gaeadd ;case 57:goto _gaeadd ;case 58:goto _gaeadd ;case 59:goto _dbcca ;};};_fgdd :{};};if _fbeab > 0{copy (_deced [0:],_deced [_fbeab :]);};};_ =_aeefd ;if _ddgac ==_effg {_bgbgb .emit (_fecc ,nil );};close (_bgbgb ._ebcgb );};func _agfc (_bbcf ,_fcdc float64 ,_fbac ,_cgdb int )float64 {_cgee :=_be (_bbcf );_bdca :=_be (_fcdc );_abg :=_fefa (_cgee ,_bdca ,_fbac );return _face (_cgee ,_abg ,_cgdb );};type yySymType struct{_cgcdb int ;_ggebb *node ;_eede Expression ;_fecd []Expression ;_dfaac [][]Expression ;};func (_bbggg ResultType )String ()string {if _bbggg >=ResultType (len (_bdgf )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bbggg );};return _gbbgc [_bdgf [_bbggg ]:_bdgf [_bbggg +1]];};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};var _afc Result =MakeEmptyResult ();func _fefa (_ggae ,_gffa _dge .Time ,_fbe int )_dge .Time {_fefg :=_dge .Date (_ggae .Year (),_gffa .Month (),_gffa .Day (),0,0,0,0,_dge .UTC );if _fefg .After (_ggae ){_fefg =_fefg .AddDate (-1,0,0);};for !_fefg .After (_ggae ){_fefg =_fefg .AddDate (0,12/_fbe ,0);};return _fefg ;};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_fbgg :s }};

// Eval evaluates the binary expression using the context given.
func (_ff BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_eb :=_ff ._ag .Eval (ctx ,ev );if _eb .Type ==ResultTypeError {return _eb ;};_fb :=_ff ._af .Eval (ctx ,ev );if _fb .Type ==ResultTypeError {return _fb ;};if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeArray {if !_df (_eb .ValueArray ,_fb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ge (_ff ._fa ,_eb .ValueArray ,_fb .ValueArray );}else if _eb .Type ==ResultTypeList {if len (_eb .ValueList )!=len (_fb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _fbg (_ff ._fa ,_eb .ValueList ,_fb .ValueList );};}else if _eb .Type ==ResultTypeArray &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return _ffc (_ff ._fa ,_eb .ValueArray ,_fb );}else if _eb .Type ==ResultTypeList &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return _ee (_ff ._fa ,_eb .ValueList ,_fb );};switch _ff ._fa {case BinOpTypePlus :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeNumberResult (_eb .ValueNumber +_fb .ValueNumber );};};case BinOpTypeMinus :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeNumberResult (_eb .ValueNumber -_fb .ValueNumber );};};case BinOpTypeMult :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeNumberResult (_eb .ValueNumber *_fb .ValueNumber );};};case BinOpTypeDiv :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {if _fb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_eb .ValueNumber /_fb .ValueNumber );};};case BinOpTypeExp :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeNumberResult (_gc .Pow (_eb .ValueNumber ,_fb .ValueNumber ));};};case BinOpTypeLT :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber < _fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString < _fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber > _fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString > _fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber ==_fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString ==_fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber )||(_eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (_bdd (_fb ));}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (_bdd (_eb ));};case BinOpTypeNE :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber !=_fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString !=_fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber )||(_eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (!_bdd (_fb ));}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (!_bdd (_eb ));};case BinOpTypeLEQ :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber <=_fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString <=_fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (_bdd (_fb ));}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (_bdd (_eb ));};case BinOpTypeGEQ :if _eb .Type ==_fb .Type {if _eb .Type ==ResultTypeNumber {return MakeBoolResult (_eb .ValueNumber >=_fb .ValueNumber );};if _eb .Type ==ResultTypeString {return MakeBoolResult (_eb .ValueString >=_fb .ValueString );};if _eb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _eb .Type ==ResultTypeString &&_fb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _eb .Type ==ResultTypeNumber &&_fb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _eb .Type ==ResultTypeEmpty &&(_fb .Type ==ResultTypeNumber ||_fb .Type ==ResultTypeString ){return MakeBoolResult (_bdd (_fb ));}else if (_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString )&&_fb .Type ==ResultTypeEmpty {return MakeBoolResult (_bdd (_eb ));};case BinOpTypeConcat :return MakeStringResult (_eb .Value ()+_fb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_ebaa Result )ListValues ()[]Result {if _ebaa .Type ==ResultTypeArray {_ebbcb :=[]Result {};for _ ,_gbfag :=range _ebaa .ValueArray {for _ ,_aade :=range _gbfag {_ebbcb =append (_ebbcb ,_aade );};};return _ebbcb ;};if _ebaa .Type ==ResultTypeList {return _ebaa .ValueList ;};return nil ;};func _feefga (){_cdbgg =_dg .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_gfce =_dg .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_fadcf =_dg .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_abfac =_dg .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_feec =_dg .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_beae =_dg .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};var _afa =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Eval evaluates and returns the result of an error expression.
func (_acd Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_acd ._aab )};func _bbce (_efc ,_efd int )int {switch _efd {case 1:if _aeb (_efc ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};var _dcbe =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};func _adaf (_ddbb string ,_fccb []Result )(*parsedSearchObject ,Result ){_gac :=len (_fccb );if _gac !=2&&_gac !=3{return nil ,MakeErrorResult (_ddbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_faffe :=_fccb [0];if _faffe .Type ==ResultTypeError {return nil ,_faffe ;};if _faffe .Type !=ResultTypeString &&_faffe .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_bcbcf :=_fccb [1];if _bcbcf .Type ==ResultTypeError {return nil ,_bcbcf ;};if _bcbcf .Type !=ResultTypeString &&_bcbcf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_edg :=_bcbcf .Value ();_abcgbe :=_faffe .Value ();_gcfec :=1;if _gac ==3&&_fccb [2].Type !=ResultTypeEmpty {_aeeee :=_fccb [2];if _aeeee .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_gcfec =int (_aeeee .ValueNumber );if _gcfec < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _gcfec > len (_edg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_abcgbe ,_edg ,_gcfec },_afc ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_afac CellRef )Update (q *_bg .UpdateQuery )Expression {if q .UpdateCurrentSheet {_afac ._cf =_cac (_afac ._cf ,q );};return _afac ;};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_bcfb ,_feea :=_ecag (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _feea .Type ==ResultTypeError {return _feea ;};_adb :=_bcfb ._aegc ;_bbgd :=_bcfb ._gbg ;_gdac ,_feea :=_aca (_bcfb ._eedda ,_bcfb ._daga ,_adb ,_bbgd );if _feea .Type ==ResultTypeError {return _feea ;};return MakeNumberResult (_gdac );};

// Reference returns a string reference value to a named range.
func (_deaa NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_deaa ._baba };};func _gfagd (_ebegf int )string {if _ebegf >=1&&_ebegf -1< len (_cbcc ){if _cbcc [_ebegf -1]!=""{return _cbcc [_ebegf -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_ebegf );};const _caeb =_dge .Second *1;

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecge :=args [0].Ref ;if _ecge .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_ecge .Value ));};func _ee (_ebc BinOpType ,_gg []Result ,_cebd Result )Result {_ggb :=[]Result {};switch _cebd .Type {case ResultTypeNumber :_fge :=_cebd .ValueNumber ;for _dea :=range _gg {_eaa :=_gg [_dea ].AsNumber ();if _eaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ebc {case BinOpTypePlus :_ggb =append (_ggb ,MakeNumberResult (_eaa .ValueNumber +_fge ));case BinOpTypeMinus :_ggb =append (_ggb ,MakeNumberResult (_eaa .ValueNumber -_fge ));case BinOpTypeMult :_ggb =append (_ggb ,MakeNumberResult (_eaa .ValueNumber *_fge ));case BinOpTypeDiv :if _fge ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ggb =append (_ggb ,MakeNumberResult (_eaa .ValueNumber /_fge ));case BinOpTypeExp :_ggb =append (_ggb ,MakeNumberResult (_gc .Pow (_eaa .ValueNumber ,_fge )));case BinOpTypeLT :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber < _fge ));case BinOpTypeGT :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber > _fge ));case BinOpTypeEQ :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber ==_fge ));case BinOpTypeLEQ :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber <=_fge ));case BinOpTypeGEQ :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber >=_fge ));case BinOpTypeNE :_ggb =append (_ggb ,MakeBoolResult (_eaa .ValueNumber !=_fge ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ebc ));};};case ResultTypeString :_fed :=_cebd .ValueString ;for _ebg :=range _gg {_aa :=_gg [_ebg ].AsString ();if _aa .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ebc {case BinOpTypeLT :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString < _fed ));case BinOpTypeGT :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString > _fed ));case BinOpTypeEQ :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString ==_fed ));case BinOpTypeLEQ :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString <=_fed ));case BinOpTypeGEQ :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString >=_fed ));case BinOpTypeNE :_ggb =append (_ggb ,MakeBoolResult (_aa .ValueString !=_fed ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ebc ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ggb );};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efdfc :=args [0].AsString ();if _efdfc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_bdfg :=args [1].AsNumber ();if _bdfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccff :=_efdfc .ValueString ;if len (_ccff )> 2&&(_f .HasPrefix (_ccff ,"\u0030\u0078")||_f .HasPrefix (_ccff ,"\u0030\u0058")){_ccff =_ccff [2:];};_gcge ,_cece :=_e .ParseInt (_ccff ,int (_bdfg .ValueNumber ),64);if _cece !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_gcge ));};func init (){_dbb ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_cfed :=len (args );if _cfed !=5&&_cfed !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eebfb ,_ggaef ,_agcb :=_fead (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _agcb .Type ==ResultTypeError {return _agcb ;};_dbbf ,_agcb :=_daee (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _agcb .Type ==ResultTypeError {return _agcb ;};if _dbbf >=_eebfb {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgef :=args [3].ValueNumber ;if _bgef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbgdd :=args [4].ValueNumber ;if _cbgdd <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_fdge :=0;if _cfed ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdge =int (args [5].ValueNumber );if !_bdaa (_fdge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_bfdd ,_agcb :=_bfaf (_dbbf ,_ggaef ,_fdge );if _agcb .Type ==ResultTypeError {return _agcb ;};_bfcbf ,_agcb :=_bfaf (_dbbf ,_eebfb ,_fdge );if _agcb .Type ==ResultTypeError {return _agcb ;};_cecbd ,_agcb :=_bfaf (_eebfb ,_ggaef ,_fdge );if _agcb .Type ==ResultTypeError {return _agcb ;};_fdfd :=1+_bfdd *_bgef ;_fdfd /=_cbgdd /100+_bfcbf *_bgef ;_fdfd --;_fdfd /=_cecbd ;return MakeNumberResult (_fdfd );};

// String returns a string representation of ConstArrayExpr.
func (_eee ConstArrayExpr )String ()string {return ""};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_dddc SheetPrefixExpr )Update (q *_bg .UpdateQuery )Expression {return _dddc };type amorArgs struct{_ffea float64 ;_dgeb float64 ;_dbff float64 ;_abbce float64 ;_eebd int ;_ffca float64 ;_ffde int ;};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fdfg :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dabg :=args [2].ValueNumber +1;if _dabg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gbfbg :=_bdbg (args [0]);_edaf :=float64 (len (_gbfbg ));_bdbf ,_aafc :=0.0,0.0;_ggfd ,_ecg :=1.0,1.0;_dgdg ,_bfeg :=false ,false ;for _ ,_deba :=range _gbfbg {for _ ,_eaacb :=range _deba {if _eaacb .Type ==ResultTypeNumber &&!_eaacb .IsBoolean {_gdbd :=_eaacb .ValueNumber ;if _gdbd ==0{continue ;}else {if _gdbd > 0{_dgdg =true ;_aafc +=_eaacb .ValueNumber *_ecg ;}else {_bfeg =true ;_bdbf +=_eaacb .ValueNumber *_ggfd ;};_ggfd /=_fdfg ;_ecg /=_dabg ;};};};};if !_dgdg ||!_bfeg {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gcea :=-_aafc /_bdbf ;_gcea *=_gc .Pow (_dabg ,_edaf -1);_gcea =_gc .Pow (_gcea ,1/(_edaf -1));return MakeNumberResult (_gcea -1);};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_baba :v }};func _fbga (_fade int ,_ddb _dge .Month ,_gafa int )int64 {if _fade ==1900&&int (_ddb )<=2{_gafa --;};_dbgdc :=_dge .Date (_fade ,_ddb ,_gafa ,0,0,0,0,_dge .UTC );return _dbgdc .Unix ();};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_cgde :=len (args );if _cgde < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cgde > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adfea :=args [0];_eeda :=args [1];if _eeda .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_efgcg :=args [2].AsNumber ();if _efgcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dffea :=false ;if _cgde ==4&&args [3].Type !=ResultTypeEmpty {_bfcg :=args [3].AsNumber ();if _bfcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bfcg .ValueNumber ==0{_dffea =true ;};};_cfbfe :=int (_efgcg .ValueNumber )-1;_daeea :=-1;_ggac :=false ;_gcgb :for _cgbgg ,_cgag :=range _eeda .ValueArray {if len (_cgag )==0{continue ;};_gdcag :=_cgag [0];switch _bbcaf (_gdcag ,_adfea ,false ,_dffea ){case _agab :_daeea =_cgbgg ;case _dbdcd :_daeea =_cgbgg ;_ggac =true ;break _gcgb ;};};if _daeea ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_acca :=_eeda .ValueArray [_daeea ];if _cfbfe < 0||_cfbfe >=len (_acca ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ggac ||!_dffea {return _acca [_cfbfe ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var (_bbge =0;_dcgd =false ;);

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_bccge ,_abbgg :=_adaf ("\u0046\u0049\u004e\u0044",args );if _abbgg .Type !=ResultTypeEmpty {return _abbgg ;};_edgf :=_f .ToLower (_bccge ._ecbgd );if _edgf ==""{return MakeNumberResult (1.0);};_gcagf :=_f .ToLower (_bccge ._ggce );_ffdeb :=_bccge ._gceaa ;_dgedf :=1;for _fedd :=range _gcagf {if _dgedf < _ffdeb {_dgedf ++;continue ;};_ceeg :=_dc .Index (_edgf ,_gcagf [_fedd :]);if _ceeg ==0{return MakeNumberResult (float64 (_dgedf ));};_dgedf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_acdd ,_dbfc :=_daac (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dbfc .Type ==ResultTypeError {return _dbfc ;};_ffced :=_acdd ._dbed ;_eaec :=_acdd ._agfg ;_bcg :=_acdd ._edfc ;_gdcg :=_acdd ._eabb ;_fff :=_acdd ._bbeb ;_cbba :=_acdd ._debb ;_ggda :=_bca (_ffced ,_eaec ,_bcg ,0,_cbba );_gbbg :=0.0;if _gdcg ==1{if _cbba ==0{_gbbg =_ggda +_bcg *_ffced ;}else {_gbbg =_ggda ;};_gdcg ++;};for _ccdfb :=_gdcg ;_ccdfb <=_fff ;_ccdfb ++{if _cbba ==1{_gbbg +=_ggda -(_agfe (_ffced ,_ccdfb -2,_ggda ,_bcg ,1)-_ggda )*_ffced ;}else {_gbbg +=_ggda -_agfe (_ffced ,_ccdfb -1,_ggda ,_bcg ,0)*_ffced ;};};return MakeNumberResult (_gbbg );};

// Update updates the FunctionCall references after removing a row/column.
func (_fgegc FunctionCall )Update (q *_bg .UpdateQuery )Expression {_cdgc :=[]Expression {};for _ ,_cbdba :=range _fgegc ._cdeb {_afbd :=_cbdba .Update (q );_cdgc =append (_cdgc ,_afbd );};return FunctionCall {_bffe :_fgegc ._bffe ,_cdeb :_cdgc };};func _eeddf (_dfbd []string ,_gabaa int )string {return _e .Itoa (len (_dfbd [len (_dfbd )-1-_gabaa ]))};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_aab :v }};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};const _ecb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_caef +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fdcc ,_acfg :=_fbda (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _acfg .Type ==ResultTypeError {return _acfg ;};_bded :=_fdcc ._fgfg ;_gded :=_fdcc ._ebb ;_abac :=_fdcc ._dgecb ;_baac :=_fdcc ._degc ;_dgac :=_fdcc ._cege ;_adgba :=_fdcc ._bgcg ;_fbef :=_fadg (_bded ,_gded ,_abac ,_baac ,_dgac ,_adgba );if _fbef .Type ==ResultTypeError {return _fbef ;};_adfe :=_fbef .ValueNumber /(1.0+_baac /_dgac );return MakeNumberResult (_adfe );};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdcg :=args [0];_cdedf :=args [1];if _cdedf .Type !=ResultTypeArray &&_cdedf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_baebf :=_adggg (_cdedf );_addb :=-1;for _dfcf ,_cdcg :=range _baebf {if _bbcaf (_bdcg ,_cdcg ,false ,false )==_dbdcd {_addb =_dfcf ;};};if _addb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_eaba :=_baebf ;if len (args )==3{_eaba =_adggg (args [2]);};if _addb < 0||_addb >=len (_eaba ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _eaba [_addb ];};func _acaa (_edfb float64 ,_fdfbe *criteriaRegex )bool {_fdabc ,_geff :=_e .ParseFloat (_fdfbe ._defd ,64);if _geff !=nil {return false ;};switch _fdfbe ._bcefb {case _eagda :return _edfb ==_fdabc ;case _beab :return _edfb <=_fdabc ;case _agafd :return _edfb >=_fdabc ;case _dfdda :return _edfb < _fdabc ;case _daeef :return _edfb > _fdabc ;};return false ;};var _ebcc *_gd .Rand ;

// Match implements the MATCH function.
func Match (args []Result )Result {_cdfgb :=len (args );if _cdfgb !=2&&_cdfgb !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfef :=1;if _cdfgb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_dece :=args [2].ValueNumber ;if _dece ==-1||_dece ==0{_cfef =int (_dece );};};_dagb :=args [1];var _fbeff []Result ;switch _dagb .Type {case ResultTypeList :_fbeff =_dagb .ValueList ;case ResultTypeArray :_bfdb :=_dagb .ValueArray ;for _ ,_adac :=range _bfdb {if len (_adac )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fbeff =append (_fbeff ,_adac [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bbd :=_cecbda (args [0]);switch _cfef {case 0:for _efbg ,_dafa :=range _fbeff {if _gcfa (_dafa ,_bbd ){return MakeNumberResult (float64 (_efbg +1));};};case -1:for _dacf :=0;_dacf < len (_fbeff );_dacf ++{if _gcfa (_fbeff [_dacf ],_bbd ){return MakeNumberResult (float64 (_dacf +1));};if _bbd ._agcea &&(_fbeff [_dacf ].ValueNumber < _bbd ._gaed ){if _dacf ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dacf ));};};case 1:for _cgdd :=0;_cgdd < len (_fbeff );_cgdd ++{if _gcfa (_fbeff [_cgdd ],_bbd ){return MakeNumberResult (float64 (_cgdd +1));};if _bbd ._agcea &&(_fbeff [_cgdd ].ValueNumber > _bbd ._gaed ){if _cgdd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cgdd ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aebbg :=args [0].ValueNumber ;if _aebbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_fgcfc ,_ccgf :=_dade (args [1],args [2],"\u0058\u004e\u0050\u0056");if _ccgf .Type ==ResultTypeError {return _ccgf ;};_dfee :=_fgcfc ._bab ;_cegc :=_fgcfc ._defe ;_affb :=0.0;_ddcd :=_cegc [0];for _bbff ,_cfaf :=range _dfee {_affb +=_cfaf /_gc .Pow (1+_aebbg ,(_cegc [_bbff ]-_ddcd )/365);};return MakeNumberResult (_affb );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_aabbb :=len (args );if _aabbb < 4||_aabbb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ebed :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbfe :=args [1].ValueNumber ;if _gbfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfb :=args [2].ValueNumber ;if _acfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbce :=args [3].ValueNumber ;_bgbb :=0.0;if _aabbb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgbb =args [4].ValueNumber ;};_fddc :=0;if _aabbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fddc =int (args [5].ValueNumber );if _fddc !=0{_fddc =1;};};return MakeNumberResult (_fegd (_ebed ,_gbfe ,_acfb ,_cbce ,_bgbb ,_fddc ));};

// Reference returns a string reference value to a horizontal range with prefix.
func (_bfccf PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_fgaaf :=_bfccf ._ffbb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bfccf .horizontalRangeReference (_fgaaf .Value )};};func (_cecca ReferenceType )String ()string {if _cecca >=ReferenceType (len (_dfcbc )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cecca );};return _fceeb [_dfcbc [_cecca ]:_dfcbc [_cecca +1]];};

// Eval evaluates and returns the result of a Negate expression.
func (_badb Negate )Eval (ctx Context ,ev Evaluator )Result {_gcgeb :=_badb ._gfgaa .Eval (ctx ,ev );if _gcgeb .Type ==ResultTypeNumber {return MakeNumberResult (-_gcgeb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_cf :v }};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fgecda (args ,false )};

// String returns a string representation of SheetPrefixExpr.
func (_ccdfg SheetPrefixExpr )String ()string {return _ccdfg ._fbgg };

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ggef (args ,_cebga ))};func _dfdg (_fae ,_cfg ,_acge ,_fgeg int )int {if !_gcb (_fgeg ){return _acge ;};_gcg :=_acge ;_ddbe :=_fba (_fae ,_cfg );if _gcg > 30||_acge >=_ddbe ||_gcg >=_ddbe {_gcg =30;};return _gcg ;};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eafd :=len (args );if _eafd !=2&&_eafd !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aedb ,_egdb :=_dade (args [0],args [1],"\u0058\u0049\u0052\u0052");if _egdb .Type ==ResultTypeError {return _egdb ;};_cdgac :=_aedb ._bab ;_ebga :=_aedb ._defe ;_fbacd :=0.1;if _eafd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbacd =args [2].ValueNumber ;if _fbacd <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _cff (_cdgac ,_ebga ,_fbacd );};

// Eval evaluates and returns the result of the cell reference.
func (_ba CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_ba ._cf ,ev )};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gaffg :=args [0].AsNumber ();if _gaffg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbd :=_gc .Signbit (_gaffg .ValueNumber );_feag ,_acac :=_gc .Modf (_gaffg .ValueNumber /2);_ddcce :=_feag *2;if _acac !=0{if !_gbbd {_ddcce +=2;}else {_ddcce -=2;};};return MakeNumberResult (_ddcce );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebbcg :=args [0].AsString ();if _ebbcg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_bcgfg :="\u0041\u0031";if len (args )==2{_aebf :=args [1].Ref ;if _aebf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_bcgfg =_aebf .Value ;};switch _ebbcg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_caccb ,_aafbf :=_bd .ParseCellReference (_bcgfg );if _aafbf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcgfg );};_bcab :="\u0024"+_caccb .Column +"\u0024"+_e .Itoa (int (_caccb .RowIdx ));if _caccb .SheetName !=""{_bcab =_caccb .SheetName +"\u0021"+_bcab ;};return MakeStringResult (_bcab );case "\u0063\u006f\u006c":_bfdc ,_bbdb :=_bd .ParseCellReference (_bcgfg );if _bbdb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcgfg );};return MakeNumberResult (float64 (_bfdc .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_efce :=_f .Contains (ctx .GetFormat (_bcgfg ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_efce );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_gddgb :="\u0047";_dbedf :=ctx .GetFormat (_bcgfg );if _dbedf =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fbgce .MatchString (_dbedf ){_gddgb ="\u0046\u0030";}else if _dbedf =="\u0030\u0025"{_gddgb ="\u0050\u0030";}else if _dbedf =="\u004d\u004d\u004d\u0020\u0044\u0044"{_gddgb ="\u0044\u0032";}else if _dbedf =="\u004d\u004d\u002fY\u0059"{_gddgb ="\u0044\u0033";}else if _dbedf =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_dbedf =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_gddgb ="\u0044\u0034";}else if _dbedf =="\u004d\u004d\u005c\u002d\u0044\u0044"{_gddgb ="\u0044\u0035";}else if _dbedf =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gddgb ="\u0044\u0036";}else if _dbedf =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_gddgb ="\u0044\u0037";}else if _dbedf =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_gddgb ="\u0044\u0038";}else if _dbedf =="\u0048\u0048\u003aM\u004d"{_gddgb ="\u0044\u0039";}else if _cgcg .MatchString (_dbedf ){_gddgb ="\u002e\u0030";}else if _gdge .MatchString (_dbedf ){_gddgb ="\u002e\u0030\u0028\u0029";}else if _egea .MatchString (_dbedf ){_gddgb ="\u0043\u0030";}else if _abdf .MatchString (_dbedf )||_geba .MatchString (_dbedf ){_gddgb ="\u0044\u0031";}else if _efcbf :=_dfed .FindStringSubmatch (_dbedf );len (_efcbf )> 1{_gddgb ="\u0046"+_e .Itoa (len (_efcbf [1]));}else if _gdfa :=_gebb .FindStringSubmatch (_dbedf );len (_gdfa )> 1{_gddgb ="\u002e"+_e .Itoa (len (_gdfa [2]));}else if _efegc :=_ddad .FindStringSubmatch (_dbedf );len (_efegc )> 1{_gddgb ="\u0050"+_e .Itoa (len (_efegc [2]));}else if _ggaed :=_ecfa .FindStringSubmatch (_dbedf );len (_ggaed )> 1{_gddgb ="\u0043"+_eeddf (_ggaed ,1);}else if _fegcg :=_cbfad .FindStringSubmatch (_dbedf );len (_fegcg )> 1{_gddgb ="\u0043"+_eeddf (_fegcg ,1);}else if _cebc :=_cegd .FindStringSubmatch (_dbedf );len (_cebc )> 1{_gddgb ="\u002e"+_eeddf (_cebc ,1)+"\u0028\u0029";}else if _gbggc :=_ceccb .FindStringSubmatch (_dbedf );len (_gbggc )> 1{_gddgb ="\u002e"+_eeddf (_gbggc ,1);}else if _bbec :=_bfgf .FindStringSubmatch (_dbedf );len (_bbec )> 1{_gddgb ="\u0053"+_eeddf (_bbec ,3);};if _gddgb !="\u0047"&&_f .Contains (_dbedf ,"\u005b\u0052\u0045D\u005d"){_gddgb +="\u002d";};return MakeStringResult (_gddgb );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_fafag :=ctx .GetFormat (_bcgfg );if _degb .MatchString (_fafag ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bcgfg ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_agad :=0.0;if ctx .GetLocked (_bcgfg ){_agad =1.0;};return MakeNumberResult (_agad );case "\u0072\u006f\u0077":_afgg ,_fgdag :=_bd .ParseCellReference (_bcgfg );if _fgdag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcgfg );};return MakeNumberResult (float64 (_afgg .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_ebea ,_acdf :=_bd .ParseCellReference (_bcgfg );if _acdf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcgfg );};if _ebea .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_ebea .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_ebea .SheetName ).GetWidth (int (_ebea .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_ebbcg .ValueString );};func _bcbg (_faff []Result )(float64 ,float64 ,Result ){_acbccd :=0.0;_beag :=1.0;for _ ,_egbf :=range _faff {switch _egbf .Type {case ResultTypeNumber :_acbccd +=_egbf .ValueNumber ;_beag *=_fbgag (_egbf .ValueNumber );case ResultTypeList ,ResultTypeArray :_cacg ,_faad ,_dgfd :=_bcbg (_egbf .ListValues ());_acbccd +=_cacg ;_beag *=_fbgag (_faad );if _dgfd .Type ==ResultTypeError {return 0,0,_dgfd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_egbf ;};};return _acbccd ,_beag ,_afc ;};type evCache struct{_eac map[string ]Result ;_aaea *_fe .Mutex ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_bcdc :=args [0].ValueNumber ;if _bcdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bce :=float64 (int (args [1].ValueNumber ));if _bce < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_gc .Pow ((1+_bcdc /_bce ),_bce )-1);};func _df (_ad ,_fg [][]Result )bool {if len (_ad )!=len (_fg ){return false ;};for _da :=range _ad {if len (_ad [_da ])!=len (_fg [_da ]){return false ;};};return true ;};const _fecc =57350;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bccee :=MakeNumberResult (0);for _ ,_cbaa :=range args {_cbaa =_cbaa .AsNumber ();switch _cbaa .Type {case ResultTypeNumber :_bccee .ValueNumber +=_cbaa .ValueNumber *_cbaa .ValueNumber ;case ResultTypeList ,ResultTypeArray :_adeb :=SumSquares (_cbaa .ListValues ());if _adeb .Type !=ResultTypeNumber {return _adeb ;};_bccee .ValueNumber +=_adeb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cbaa ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_cbaa .Type ));};};return _bccee ;};type criteriaParsed struct{_agcea bool ;_gaed float64 ;_babdb string ;_gbdc *criteriaRegex ;};var _fcf =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fadbd ,_ffdec ,_cfbb :=_fead (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _cfbb .Type ==ResultTypeError {return _cfbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbacf :=_ffdec -_fadbd ;if _fbacf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_degaf :=args [2].ValueNumber ;if _degaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_degaf *_fbacf /360));};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beacd :=args [0].ValueNumber ;if _beacd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbdaa :=args [1].ValueNumber ;if _cbdaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafed :=args [2].ValueNumber ;if _aafed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_gc .Pow (_aafed /_cbdaa ,1/_beacd )-1);};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _adgg (_eaedf []Result ,_bebc string )(float64 ,float64 ,Result ){if len (_eaedf )!=2{return 0,0,MakeErrorResult (_bebc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _eaedf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adcgf :=_eaedf [0].ValueNumber ;if _eaedf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bebc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eeeb :=float64 (int (_eaedf [1].ValueNumber ));if _eeeb < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bebc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _adcgf ,_eeeb ,_afc ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func _feg (_dae string )(int ,int ,float64 ,bool ,bool ,Result ){_cafd :="";_eaga :=[]string {};for _dega ,_fdd :=range _dca {_eaga =_fdd .FindStringSubmatch (_dae );if len (_eaga )> 1{_cafd =_dega ;break ;};};if _cafd ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_dde :=_eaga [1]=="";_eaga =_eaga [49:];_agce :=len (_eaga );_fece :=_eaga [_agce -1];_aedc :=_fece =="\u0061\u006d";_dbcc :=_fece =="\u0070\u006d";var _aaf ,_dege int ;var _cfa float64 ;var _aadb error ;switch _cafd {case "\u0068\u0068":_aaf ,_aadb =_e .Atoi (_eaga [0]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_dege =0;_cfa =0;case "\u0068\u0068\u003am\u006d":_aaf ,_aadb =_e .Atoi (_eaga [0]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_dege ,_aadb =_e .Atoi (_eaga [2]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_cfa =0;case "\u006d\u006d\u003as\u0073":_aaf =0;_dege ,_aadb =_e .Atoi (_eaga [0]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_cfa ,_aadb =_e .ParseFloat (_eaga [2],64);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_aaf ,_aadb =_e .Atoi (_eaga [0]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_dege ,_aadb =_e .Atoi (_eaga [2]);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};_cfa ,_aadb =_e .ParseFloat (_eaga [4],64);if _aadb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};};if _dege >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};if _aedc ||_dbcc {if _aaf > 12||_cfa >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );}else if _aaf ==12{_aaf =0;};}else if _aaf >=24||_cfa >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ade );};return _aaf ,_dege ,_cfa ,_dbcc ,_dde ,_afc ;};const _ade ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";func _bdaf (_aede []Result ,_beg bool )(float64 ,float64 ){_cabge :=0.0;_ffece :=0.0;for _ ,_adbe :=range _aede {switch _adbe .Type {case ResultTypeNumber :if _beg ||!_adbe .IsBoolean {_ffece +=_adbe .ValueNumber ;_cabge ++;};case ResultTypeList ,ResultTypeArray :_edbag ,_afadf :=_bdaf (_adbe .ListValues (),_beg );_ffece +=_edbag ;_cabge +=_afadf ;case ResultTypeString :if _beg {_cabge ++;};case ResultTypeEmpty :};};return _ffece ,_cabge ;};var _fbcb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dgegd :=args [0];if _dgegd .Type ==ResultTypeError {return _dgegd ;};if _dgegd .Type !=ResultTypeString &&_dgegd .Type !=ResultTypeNumber &&_dgegd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cefa :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ccdg :=int (args [1].ValueNumber );if _ccdg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gfda :=int (args [2].ValueNumber );if _gfda < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cegde :=len (_cefa );if _ccdg > _cegde {return MakeStringResult ("");};_ccdg --;_gafg :=_ccdg +_gfda ;if _gafg > _cegde {return MakeStringResult (_cefa [_ccdg :]);}else {return MakeStringResult (_cefa [_ccdg :_gafg ]);};};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_geeg :=len (args );if _geeg !=6&&_geeg !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ccec ,_acbg ,_cbdbe :=_fead (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _cbdbe .Type ==ResultTypeError {return _cbdbe ;};_ecca :=args [2];if _ecca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ecde :=_ecca .ValueNumber ;if _ecde < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fbdab :=args [3];if _fbdab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbdc :=_fbdab .ValueNumber ;if _dbdc <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_dcfaa :=args [4];if _dcfaa .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_dbfcf :=_dcfaa .ValueNumber ;if _dbfcf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bagf :=args [5];if _bagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbfc :=float64 (int (_bagf .ValueNumber ));if !_afgd (_bbfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_deca :=0;if _geeg ==7&&args [6].Type !=ResultTypeEmpty {_afdbf :=args [6];if _afdbf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_deca =int (_afdbf .ValueNumber );if !_bdaa (_deca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_agdf :=0.0;_abfd :=0.0;_gfgc :=1.0;_eccf ,_cbdbe :=_cdgd (_ccec ,_acbg ,_ecde ,_abfd ,_dbfcf ,_bbfc ,_deca );if _cbdbe .Type ==ResultTypeError {return _cbdbe ;};_cgcbd ,_cbdbe :=_cdgd (_ccec ,_acbg ,_ecde ,_gfgc ,_dbfcf ,_bbfc ,_deca );if _cbdbe .Type ==ResultTypeError {return _cbdbe ;};_cfbbf :=(_gfgc -_abfd )*0.5;for _bceg :=0;_bceg < 100&&_agdf !=_dbdc ;_bceg ++{_agdf ,_cbdbe =_cdgd (_ccec ,_acbg ,_ecde ,_cfbbf ,_dbfcf ,_bbfc ,_deca );if _cbdbe .Type ==ResultTypeError {return _cbdbe ;};if _dbdc ==_eccf {return MakeNumberResult (_abfd );}else if _dbdc ==_cgcbd {return MakeNumberResult (_gfgc );}else if _dbdc ==_agdf {return MakeNumberResult (_cfbbf );}else if _dbdc < _cgcbd {_gfgc *=2.0;_cgcbd ,_cbdbe =_cdgd (_ccec ,_acbg ,_ecde ,_gfgc ,_dbfcf ,_bbfc ,_deca );if _cbdbe .Type ==ResultTypeError {return _cbdbe ;};_cfbbf =(_gfgc -_abfd )*0.5;}else {if _dbdc < _agdf {_abfd =_cfbbf ;_eccf =_agdf ;}else {_gfgc =_cfbbf ;_cgcbd =_agdf ;};_cfbbf =_gfgc -(_gfgc -_abfd )*((_dbdc -_cgcbd )/(_eccf -_cgcbd ));};};return MakeNumberResult (_cfbbf );};

// Reference returns a string reference value to a range with prefix.
func (_fdcad PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_baec :=_fdcad ._fbegbb .Reference (ctx ,ev );_dfbg :=_fdcad ._cfgad .Reference (ctx ,ev );_faea :=_fdcad ._bdcac .Reference (ctx ,ev );if _baec .Type ==ReferenceTypeSheet &&_dfbg .Type ==ReferenceTypeCell &&_faea .Type ==ReferenceTypeCell {return MakeRangeReference (_cgbgdf (_baec ,_dfbg ,_faea ));};return ReferenceInvalid ;};

// Reference returns a string reference value to a sheet.
func (_bgdbg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_bgdbg ._fbgg };};

// Eval evaluates the binary expression using the context given.
func (_bfd BinaryExpr )String ()string {_fce :="";switch _bfd ._fa {case BinOpTypePlus :_fce ="\u002b";case BinOpTypeMinus :_fce ="\u002d";case BinOpTypeMult :_fce ="\u002a";case BinOpTypeDiv :_fce ="\u002f";case BinOpTypeExp :_fce ="\u005e";case BinOpTypeLT :_fce ="\u003c";case BinOpTypeGT :_fce ="\u003e";case BinOpTypeEQ :_fce ="\u003d";case BinOpTypeLEQ :_fce ="\u003c\u003d";case BinOpTypeGEQ :_fce ="\u003e\u003d";case BinOpTypeNE :_fce ="\u003c\u003e";case BinOpTypeConcat :_fce ="\u0026";};return _bfd ._ag .String ()+_fce +_bfd ._af .String ();};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgbd :=args [0];if _cgbd .Type ==ResultTypeError ||_cgbd .Type ==ResultTypeString {return _cgbd ;};return _afc ;};const _bgaeg =57362;

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ffb :=args [0];switch _ffb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_eged :=_be (_ffb .ValueNumber );return MakeNumberResult (float64 (_eged .Month ()));case ResultTypeString :_gaf :=_f .ToLower (_ffb .ValueString );if !_ccf (_gaf ){_ ,_ ,_ ,_ ,_aff ,_abag :=_feg (_gaf );if _abag .Type ==ResultTypeError {_abag .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _abag ;};if _aff {return MakeNumberResult (1);};};_ ,_egd ,_ ,_ ,_bafc :=_dafb (_gaf );if _bafc .Type ==ResultTypeError {return _bafc ;};return MakeNumberResult (float64 (_egd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_baab :pfx ,_ecagf :exp }};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_ebgg :=len (args );if _ebgg < 3||_ebgg > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegb :=args [0].ValueNumber ;if _gegb !=float64 (int (_gegb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdff :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gbbbd :=args [2].ValueNumber ;_cgbb :=0.0;if _ebgg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgbb =args [3].ValueNumber ;};_feaaa :=0.0;if _ebgg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_feaaa =args [4].ValueNumber ;if _feaaa !=0{_feaaa =1;};};_gfec :=0.1;if _ebgg >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfec =args [5].ValueNumber ;};_fbfb :=100;_ecgg :=0;_cgcda :=false ;_eaaef :=1e-6;_gaff :=_gfec ;for _ecgg < _fbfb &&!_cgcda {_cdfg :=_gc .Pow (_gaff +1,_gegb );_fbafe :=_gc .Pow (_gaff +1,_gegb -1);_cede :=_gaff *_feaaa +1;_afgb :=_fdff *(_cdfg -1);_ebag :=_cgbb +_cdfg *_gbbbd +_afgb *_cede /_gaff ;_efedeg :=_gegb *_fbafe *_gbbbd -_afgb *_cede /_gc .Pow (_gaff ,2);_ffga :=(_gegb *_fdff *_fbafe *_cede +_afgb *_feaaa )/_gaff ;_feeb :=_ebag /(_efedeg +_ffga );if _gc .Abs (_feeb )< _eaaef {_cgcda =true ;};_ecgg ++;_gaff -=_feeb ;};return MakeNumberResult (_gaff );};func _ecag (_edaa []Result ,_aea string )(*couponArgs ,Result ){_agff :=len (_edaa );if _agff !=3&&_agff !=4{return nil ,MakeErrorResult (_aea +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cefc ,_abgd ,_cea :=_fead (_edaa [0],_edaa [1],_aea );if _cea .Type ==ResultTypeError {return nil ,_cea ;};if _edaa [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aea +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gag :=_edaa [2].ValueNumber ;if !_afgd (_gag ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_aea );};_fcbac :=0;if _agff ==4&&_edaa [3].Type !=ResultTypeEmpty {if _edaa [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aea +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcbac =int (_edaa [3].ValueNumber );if !_bdaa (_fcbac ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_aea );};};return &couponArgs {_cefc ,_abgd ,int (_gag ),_fcbac },_afc ;};var _ccbfc =[...]int {-1,1,1,-1,-2,0};const (_ byte =iota ;_eagda ;_beab ;_agafd ;_dfdda ;_daeef ;);type cmpResult int8 ;

// Eval evaluates and returns a boolean.
func (_dfc Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_dfc ._efe )};type node struct{_fagf tokenType ;_cbfc string ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_gfag :=_bagfe (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _gfag .Type !=ResultTypeEmpty {return _gfag ;};_geefe :=_bbbg (args [1:]);_dfgfb :=_gc .MaxFloat64 ;_adfba :=_bdbg (args [0]);for _ ,_bfaae :=range _geefe {_gdgc :=_adfba [_bfaae ._becd ][_bfaae ._facb ].ValueNumber ;if _dfgfb > _gdgc {_dfgfb =_gdgc ;};};if _dfgfb ==_gc .MaxFloat64 {_dfgfb =0;};return MakeNumberResult (float64 (_dfgfb ));};var _acda =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ebac ,_dbec :=_fcac (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dbec .Type ==ResultTypeError {return _dbec ;};_effc :=_ebac ._ffea ;_baa :=_ebac ._dgeb ;_eabf :=_ebac ._dbff ;_bgdca :=_ebac ._abbce ;_aegb :=_ebac ._eebd ;_dacd :=_ebac ._ffca ;_cfcc :=_ebac ._ffde ;_bcb ,_gdcbd :=_bfaf (_baa ,_eabf ,_cfcc );if _gdcbd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_fbf :=_bcb *_dacd *_effc ;if _aegb ==0{return MakeNumberResult (_fbf );};_aaed :=_effc *_dacd ;_bdce :=_effc -_bgdca ;_dagf :=int ((_bdce -_fbf )/_aaed );if _aegb <=_dagf {return MakeNumberResult (_aaed );}else if _aegb ==_dagf +1{return MakeNumberResult (_bdce -_aaed *float64 (_dagf )-_fbf );}else {return MakeNumberResult (0);};};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbfg :=args [0].AsString ();if _bbfg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_bbfg .ValueString )));};var _fbgce ,_dfed ,_cgcg ,_gdge ,_ceccb ,_gebb ,_cegd ,_degb ,_ddad ,_egea ,_ecfa ,_cbfad ,_abdf ,_geba ,_bfgf *_dg .Regexp ;var _ffaa =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};var _bfeb =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _cgbg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _dbca (_ggcd ,_eeba ,_facc int )int {if _ggcd > _eeba {return 0;};if _gcb (_facc ){return (_eeba -_ggcd +1)*360;};_ebeg :=0;for _adce :=_ggcd ;_adce <=_eeba ;_adce ++{_bac :=365;if _aeb (_adce ){_bac =366;};_ebeg +=_bac ;};return _ebeg ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_fbdf ,_dabb :=_ecag (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _dabb .Type ==ResultTypeError {return _dabb ;};return MakeNumberResult (_cge (_fbdf ._eedda ,_fbdf ._daga ,_fbdf ._aegc ,_fbdf ._gbg ));};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_cfbg :=_f .Split (v ,"\u003a");if len (_cfbg )!=2{return nil ;};if _cfbg [0]> _cfbg [1]{_cfbg [0],_cfbg [1]=_cfbg [1],_cfbg [0];};return PrefixVerticalRange {_dabf :pfx ,_bfgce :_cfbg [0],_ccecb :_cfbg [1]};};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_gbeb :=len (args );if _gbeb !=4&&_gbeb !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gbfd ,_ccc :=_daee (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ccc .Type ==ResultTypeError {return _ccc ;};_egga ,_ccc :=_daee (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ccc .Type ==ResultTypeError {return _ccc ;};if _gbfd >=_egga {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_caad :=args [2].ValueNumber ;if _caad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adcb :=args [3].ValueNumber ;if _adcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcfba :=0;if _gbeb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcfba =int (args [4].ValueNumber );if !_bdaa (_dcfba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_abcf ,_ccc :=_bfaf (_gbfd ,_egga ,_dcfba );if _ccc .Type ==ResultTypeError {return _ccc ;};return MakeNumberResult (_adcb *_caad *_abcf );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cfgd Context ,_bfdbb Evaluator ,_acfe []Result )Result ;

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _agea (args ,_bgedd )};func _cde (_ecebd ,_gab ,_eag int )float64 {return float64 (_fbga (_ecebd ,_dge .Month (_gab ),_eag )/86400)+_acf ;};const _gbc ="\u0028\u0020\u0028"+_dgee +"\u007c"+_afge +"\u007c"+_eec +"\u007c"+_cec +"\u0029\u0029\u003f\u0024";func (_eeeef *ivr )SetOffset (col ,row uint32 ){};func _cge (_afed ,_cfe float64 ,_dcab ,_ffg int )float64 {_febf :=_be (_afed );_gbcb :=_be (_cfe );_bfcb :=_aag (_febf ,_gbcb ,_dcab ,_ffg );return _face (_bfcb ,_febf ,_ffg );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_aggde :=_b .Buffer {};for _ ,_egfe :=range args {switch _egfe .Type {case ResultTypeString :_aggde .WriteString (_egfe .ValueString );case ResultTypeNumber :var _decb string ;if _egfe .IsBoolean {if _egfe .ValueNumber ==0{_decb ="\u0046\u0041\u004cS\u0045";}else {_decb ="\u0054\u0052\u0055\u0045";};}else {_decb =_egfe .AsString ().ValueString ;};_aggde .WriteString (_decb );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_aggde .String ());};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _ebbd (args ,true )};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_dabf Expression ;_bfgce ,_ccecb string ;};var _efac =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Update returns the same object as updating sheet references does not affect Bool.
func (_agd Bool )Update (q *_bg .UpdateQuery )Expression {return _agd };

// String returns a string representation of CellRef.
func (_efed CellRef )String ()string {return _efed ._cf };

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_deee :=args [0].AsNumber ();_dbebf :=args [1].AsNumber ();if _deee .Type !=ResultTypeNumber ||_dbebf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _dbebf .ValueNumber < _deee .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_bcfd :=int64 (_deee .ValueNumber );_gfdb :=int64 (_dbebf .ValueNumber );return MakeNumberResult (float64 (_ebcc .Int63n (_gfdb -_bcfd +1)+_bcfd ));};const _ace =86400000000000;const _faef =16;

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafae :=args [0].Ref ;if _dafae .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_dafae .Value ,ev ).IsBoolean );};const _agddd =57360;func _babfg (_egfdb yyLexer ,_baebd *yySymType )(_effea ,_dabge int ){_dabge =0;_effea =_egfdb .Lex (_baebd );if _effea <=0{_dabge =_ecabg [0];goto _gaafe ;};if _effea < len (_ecabg ){_dabge =_ecabg [_effea ];goto _gaafe ;};if _effea >=_ebfa {if _effea < _ebfa +len (_bbeae ){_dabge =_bbeae [_effea -_ebfa ];goto _gaafe ;};};for _cgfb :=0;_cgfb < len (_fedg );_cgfb +=2{_dabge =_fedg [_cgfb +0];if _dabge ==_effea {_dabge =_fedg [_cgfb +1];goto _gaafe ;};};_gaafe :if _dabge ==0{_dabge =_bbeae [1];};if _bbge >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_gfagd (_dabge ),uint (_effea ));};return _effea ,_dabge ;};func _faaf (_gcbc string ,_bdcb _dge .Time )(_dge .Time ,error ){_eggfa ,_ ,_fgfd :=_ae .ParseFloat (_gcbc ,10,128,_ae .ToNearestEven );if _fgfd !=nil {return _dge .Time {},_fgfd ;};_dcaee :=new (_ae .Float );_dcaee .SetUint64 (uint64 (24*_dge .Hour ));_eggfa .Mul (_eggfa ,_dcaee );_gagb ,_ :=_eggfa .Uint64 ();_faec :=_bdcb .Add (_dge .Duration (_gagb ));return _gcfg (_faec ),nil ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_eeag .Lock ();defer _eeag .Unlock ();if _dcbaf ,_cedfg :=_edbd [name ];_cedfg {return _dcbaf ;};return nil ;};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbbbd :=args [0].AsNumber ();_efae :=args [1].AsNumber ();if _dbbbd .Type !=ResultTypeNumber ||_efae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ggdaf :=_gc .Trunc (_dbbbd .ValueNumber );_ecbf :=_gc .Trunc (_efae .ValueNumber );if _ggdaf < _ecbf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _ggdaf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_ggdaf +_ecbf -1);args [1]=MakeNumberResult (_ggdaf -1);return Combin (args );};var _ggaf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _cfcef (_cgddb Reference ,_gdbdga Context )bool {return _gdbdga .Sheet (_cgddb .Value )==InvalidReferenceContext ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_agdd :=args [0].AsNumber ();if _agdd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecebde ,_efcc :=_gc .Modf (_agdd .ValueNumber );if _efcc < 0{_ecebde --;};return MakeNumberResult (_ecebde );};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbcf ,_bdbb ,_egc :=_fead (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _egc .Type ==ResultTypeError {return _egc ;};_gfae ,_egc :=_daee (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _egc .Type ==ResultTypeError {return _egc ;};if _gfae >=_gbcf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfge :=args [3].ValueNumber ;if _dfge < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bebae :=args [4].ValueNumber ;if _bebae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bcce :=args [5].ValueNumber ;if _bcce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afb :=float64 (int (args [6].ValueNumber ));if !_afgd (_afb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbcd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbcd =int (args [7].ValueNumber );if !_bdaa (_bbcd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_adcbb ,_egc :=_bfaf (_gfae ,_bdbb ,_bbcd );if _egc .Type ==ResultTypeError {return _egc ;};_adcbb *=_afb ;_dbfcc ,_egc :=_bfaf (_gbcf ,_bdbb ,_bbcd );if _egc .Type ==ResultTypeError {return _egc ;};_dbfcc *=_afb ;_ecad ,_egc :=_bfaf (_gfae ,_gbcf ,_bbcd );if _egc .Type ==ResultTypeError {return _egc ;};_ecad *=_afb ;_abfg :=_bcce +_adcbb *100*_dfge /_afb ;_abfg /=_bebae +_ecad *100*_dfge /_afb ;_abfg --;_abfg *=_afb /_dbfcc ;return MakeNumberResult (_abfg );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ffceda :=args [0].AsNumber ();if _ffceda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bbdd :=10.0;if len (args )> 1{_aaefd :=args [1].AsNumber ();if _aaefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_bbdd =args [1].ValueNumber ;};if _ffceda .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _bbdd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_gc .Log (_ffceda .ValueNumber )/_gc .Log (_bbdd ));};func _cbed (_afgea ,_dgf ,_eef float64 )float64 {return (_afgea *3600+_dgf *60+_eef )/86400};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cegce :=[]float64 {};for _ ,_fbeb :=range args {switch _fbeb .Type {case ResultTypeString :_cggg :=_fbeb .AsNumber ();if _cggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cegce =append (_cegce ,_cggg .ValueNumber );case ResultTypeList :_ebca :=LCM (_fbeb .ValueList );if _ebca .Type !=ResultTypeNumber {return _ebca ;};_cegce =append (_cegce ,_ebca .ValueNumber );case ResultTypeNumber :_cegce =append (_cegce ,_fbeb .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _fbeb ;};};if len (_cegce )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _cegce [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cegce )==1{return MakeNumberResult (_cegce [0]);};_dfaa :=_cegce [0];for _acgee :=1;_acgee < len (_cegce );_acgee ++{if _cegce [_acgee ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfaa =_deac (_dfaa ,_cegce [_acgee ]);};return MakeNumberResult (_dfaa );};func _daee (_afeb Result ,_gcfe ,_bgde string )(float64 ,Result ){var _dgb float64 ;switch _afeb .Type {case ResultTypeNumber :_dgb =float64 (int (_afeb .ValueNumber ));case ResultTypeString :_efdf :=DateValue ([]Result {_afeb });if _efdf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gcfe +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_bgde );};_dgb =_efdf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_bgde );};if _dgb < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gcfe +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _dgb ,_afc ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func _bagfe (_aadd []Result ,_fdgaa bool ,_fbbdf string )Result {var _eddg ,_fgege string ;if _fdgaa {_eddg ="\u0074\u0068\u0072e\u0065";_fgege ="\u006f\u0064\u0064";}else {_eddg ="\u0074\u0077\u006f";_fgege ="\u0065\u0076\u0065\u006e";};_bbda :=len (_aadd );if (_fdgaa &&_bbda < 3)||(!_fdgaa &&_bbda < 2){return MakeErrorResult (_fbbdf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_eddg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_bbda /2*2==_bbda )==_fdgaa {return MakeErrorResult (_fbbdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fgege +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_caadb :=-1;_ddbg :=-1;for _dacg :=0;_dacg < _bbda ;_dacg +=2{_beega :=_aadd [_dacg ];if _beega .Type !=ResultTypeArray &&_beega .Type !=ResultTypeList {return MakeErrorResult (_fbbdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_fcde :=_bdbg (_beega );if _ddbg ==-1{_ddbg =len (_fcde );_caadb =len (_fcde [0]);}else if len (_fcde )!=_ddbg ||len (_fcde [0])!=_caadb {return MakeErrorResult (_fbbdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fdgaa &&_dacg ==0{_dacg --;};};return _afc ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_dedf ,_bfacd :=_ecag (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bfacd .Type ==ResultTypeError {return _bfacd ;};_bacd :=_be (_dedf ._eedda );_dbd :=_be (_dedf ._daga );_acb :=_dedf ._aegc ;_afea :=_fefa (_bacd ,_dbd ,_acb );_def ,_aggfc ,_cgc :=_afea .Date ();return MakeNumberResult (_cde (_def ,int (_aggfc ),_cgc ));};func _ffcff (_fbcfe Result )bool {_dggg :=_fbcfe .Type ;return _dggg !=ResultTypeArray &&_dggg !=ResultTypeList ;};func (_efef *Lexer )Next ()*node {_efef ._beeef .Lock ();defer _efef ._beeef .Unlock ();if len (_efef ._ebgc )> 0{_eadce :=_efef ._ebgc [0];_efef ._ebgc =_efef ._ebgc [1:];return _eadce ;};return _efef .nextRaw ();};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ddade :=args [0].AsNumber ();if _ddade .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cafag :=float64 (1);_cabg :=args [1].AsNumber ();if _cabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cafag =_cabg .ValueNumber ;if _cafag < 0&&_ddade .ValueNumber > 0||_cafag > 0&&_ddade .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_cgbf :=_ddade .ValueNumber ;_cgbf ,_fgcd :=_gc .Modf (_cgbf /_cafag );if _gc .Trunc (_fgcd +0.5)> 0{_cgbf ++;};return MakeNumberResult (_cgbf *_cafag );};

// String returns a string representation of PrefixExpr.
func (_bgfg PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_bgfg ._baab .String (),_bgfg ._ecagf .String ());};func _dgcg (_cgcgd ,_bccdg Expression )(Expression ,Expression ,error ){_dfeg ,_gcfc :=_cgcgd .(CellRef );if !_gcfc {return nil ,nil ,_c .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_cgcgd .String ()));};_gbfbf ,_gcfc :=_bccdg .(CellRef );if !_gcfc {return nil ,nil ,_c .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bccdg .String ()));};_dagc ,_aeeeg :=_bd .ParseCellReference (_dfeg ._cf );if _aeeeg !=nil {return nil ,nil ,_aeeeg ;};_gecaa ,_fege :=_bd .ParseCellReference (_gbfbf ._cf );if _fege !=nil {return nil ,nil ,_fege ;};_ecfg :=false ;if _dagc .RowIdx > _gecaa .RowIdx {_ecfg =true ;_dagc .RowIdx ,_gecaa .RowIdx =_gecaa .RowIdx ,_dagc .RowIdx ;};if _dagc .ColumnIdx > _gecaa .ColumnIdx {_ecfg =true ;_dagc .ColumnIdx ,_gecaa .ColumnIdx =_gecaa .ColumnIdx ,_dagc .ColumnIdx ;_dagc .Column ,_gecaa .Column =_gecaa .Column ,_dagc .Column ;};if _ecfg {return NewCellRef (_dagc .String ()),NewCellRef (_gecaa .String ()),nil ;};return _cgcgd ,_bccdg ,nil ;};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_caa ,_adegc :=_ecag (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _adegc .Type ==ResultTypeError {return _adegc ;};return MakeNumberResult (_afef (_caa ._eedda ,_caa ._daga ,_caa ._aegc ,_caa ._gbg ));};const _cddcc =57351;

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cdac :=args [0];switch _cdac .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_ccba :=_be (_cdac .ValueNumber );return MakeNumberResult (float64 (_ccba .Minute ()));case ResultTypeString :_gbe :=_f .ToLower (_cdac .ValueString );if !_gdad (_gbe ){_ ,_ ,_ ,_afad ,_cgbga :=_dafb (_gbe );if _cgbga .Type ==ResultTypeError {_cgbga .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _cgbga ;};if _afad {return MakeNumberResult (0);};};_ ,_fceb ,_ ,_ ,_ ,_daa :=_feg (_gbe );if _daa .Type ==ResultTypeError {return _daa ;};return MakeNumberResult (float64 (_fceb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bgbc HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gafgc :=_bgbc .horizontalRangeReference ();if _dccd ,_bbgga :=ev .GetFromCache (_gafgc );_bbgga {return _dccd ;};_egdc ,_agbc :=_dcgc (ctx ,_bgbc ._daag ,_bgbc ._gegc );_cgagd :=_geebg (ctx ,ev ,_egdc ,_agbc );ev .SetCache (_gafgc ,_cgagd );return _cgagd ;};const _dbdca =57365;const (_ecaed rmode =iota ;_aedbe ;_bgedd ;);const _fgbgd =-1000;var _gagae []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};func _cfafb (_fbfg Context ,_bddaa ,_agbfa string )(string ,string ){_dfggc :=_bddaa +"\u0031";_gdade :=_fbfg .LastRow (_bddaa );_dbdf :=_agbfa +_e .Itoa (_gdade );return _dfggc ,_dbdf ;};const _deggf =57359;

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_ffbb Expression ;_afced ,_agae int ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ggef (args ,_dacc ))};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_ebcc .Float64 ());};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fgecda (args ,true )};func (_ccgfa *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gegfg :=args [0].AsString ();if _gegfg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbdb :=_b .Buffer {};_fccf :=false ;for _ ,_gbebg :=range _gegfg .ValueString {if !_fccf &&_ce .IsLetter (_gbebg ){_gbdb .WriteRune (_ce .ToUpper (_gbebg ));}else {_gbdb .WriteRune (_ce .ToLower (_gbebg ));};_fccf =_ce .IsLetter (_gbebg );};return MakeStringResult (_gbdb .String ());};func _gedgg (_abad []Result )[]float64 {_cdbee :=make ([]float64 ,0);for _ ,_babc :=range _abad {if _babc .Type ==ResultTypeEmpty {continue ;};_babc =_babc .AsNumber ();switch _babc .Type {case ResultTypeNumber :if !_babc .IsBoolean {_cdbee =append (_cdbee ,_babc .ValueNumber );};case ResultTypeList ,ResultTypeArray :_cdbee =append (_cdbee ,_gedgg (_babc .ListValues ())...);case ResultTypeString :default:_dd .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_babc .Type );};};return _cdbee ;};func _fbda (_gffg []Result ,_bddc string )(*durationArgs ,Result ){_egae :=len (_gffg );if _egae !=5&&_egae !=6{return nil ,MakeErrorResult (_bddc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aef ,_fega ,_abd :=_fead (_gffg [0],_gffg [1],_bddc );if _abd .Type ==ResultTypeError {return nil ,_abd ;};_dgfb :=_gffg [2];if _dgfb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bddc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gdcb :=_dgfb .ValueNumber ;if _gdcb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_agdbg :=_gffg [3];if _agdbg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bddc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ffdf :=_agdbg .ValueNumber ;if _ffdf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gaba :=_gffg [4];if _gaba .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bddc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eadd :=float64 (int (_gaba .ValueNumber ));if !_afgd (_eadd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eea :=0;if _egae ==6&&_gffg [5].Type !=ResultTypeEmpty {_egfa :=_gffg [5];if _egfa .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bddc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eea =int (_egfa .ValueNumber );if !_bdaa (_eea ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_bddc );};};return &durationArgs {_aef ,_fega ,_gdcb ,_ffdf ,_eadd ,_eea },_afc ;};const _defdf =57377;const _edeag =57357;func _fbgag (_cgfc float64 )float64 {_ddccef :=float64 (1);for _fcab :=float64 (2);_fcab <=_cgfc ;_fcab ++{_ddccef *=_fcab ;};return _ddccef ;};func _bfaf (_aafe ,_egfb float64 ,_bdb int )(float64 ,Result ){_dfcg ,_geeb :=_be (_aafe ),_be (_egfb );_ced :=_dfcg .Unix ();_afaa :=_geeb .Unix ();if _ced ==_afaa {return 0,_afc ;};_abbf ,_fabg ,_abcg :=_dfcg .Date ();_gfed ,_fda ,_fad :=_geeb .Date ();_dfcgb ,_ecedb :=int (_fabg ),int (_fda );var _cecc ,_cfbc float64 ;switch _bdb {case 0:if _abcg ==31{_abcg --;};if _abcg ==30&&_fad ==31{_fad --;}else if _fdef :=_aeb (_abbf );_dfcgb ==2&&((_fdef &&_abcg ==29)||(!_fdef &&_abcg ==28)){_abcg =30;if _fdbd :=_aeb (_gfed );_ecedb ==2&&((_fdbd &&_fad ==29)||(!_fdbd &&_fad ==28)){_fad =30;};};_cecc =float64 ((_gfed -_abbf )*360+(_ecedb -_dfcgb )*30+(_fad -_abcg ));_cfbc =360;case 1:_cecc =_egfb -_aafe ;_bbg :=_abbf !=_gfed ;if _bbg &&(_gfed !=_abbf +1||_dfcgb < _ecedb ||(_dfcgb ==_ecedb &&_abcg < _fad )){_bdc :=0;for _bbc :=_abbf ;_bbc <=_gfed ;_bbc ++{_bdc +=_bbce (_bbc ,1);};_cfbc =float64 (_bdc )/float64 (_gfed -_abbf +1);}else {if !_bbg &&_aeb (_abbf ){_cfbc =366;}else {if _bbg &&((_aeb (_abbf )&&(_dfcgb < 2||(_dfcgb ==2&&_abcg <=29)))||(_aeb (_gfed )&&(_ecedb > 2||(_ecedb ==2&&_fad ==29)))){_cfbc =366;}else {_cfbc =365;};};};case 2:_cecc =_egfb -_aafe ;_cfbc =360;case 3:_cecc =_egfb -_aafe ;_cfbc =365;case 4:if _abcg ==31{_abcg --;};if _fad ==31{_fad --;};_cecc =float64 ((_gfed -_abbf )*360+(_ecedb -_dfcgb )*30+(_fad -_abcg ));_cfbc =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _cecc /_cfbc ,_afc ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ggef (args ,_fdeaac ));};const _gbaaa =57376;func _gcb (_edde int )bool {return _edde ==0||_edde ==4};func _adggg (_ggge Result )[]Result {_cedf :=_ggge .ValueList ;if _ggge .Type ==ResultTypeArray {_cedf =nil ;for _ ,_abgac :=range _ggge .ValueArray {if len (_abgac )> 0{_cedf =append (_cedf ,_abgac [0]);}else {_cedf =append (_cedf ,_afc );};};};return _cedf ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func _afef (_acc ,_ggd float64 ,_dbab ,_aafb int )float64 {_abbc :=_be (_acc );_adgb :=_be (_ggd );if _aafb ==1{_cebdd :=_aag (_abbc ,_adgb ,_dbab ,1);_fgff :=_cebdd .AddDate (0,12/_dbab ,0);return _face (_cebdd ,_fgff ,_aafb );};return float64 (_bbce (0,_aafb ))/float64 (_dbab );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_daabg :=args [0].AsNumber ();if _daabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fedfe :=int (_daabg .ValueNumber );if _fedfe < 0||_fedfe > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_fedfe ));};var _acf float64 =25569.0;

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbcg :=_gedgg (args );_d .Float64s (_cbcg );var _abbfb float64 ;if len (_cbcg )%2==0{_abbfb =(_cbcg [len (_cbcg )/2-1]+_cbcg [len (_cbcg )/2])/2;}else {_abbfb =_cbcg [len (_cbcg )/2];};return MakeNumberResult (_abbfb );};var _afceb =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Update updates the horizontal range references after removing a row/column.
func (_dbbcc HorizontalRange )Update (q *_bg .UpdateQuery )Expression {return _dbbcc };func (_gea *evCache )SetCache (key string ,value Result ){_gea ._aaea .Lock ();_gea ._eac [key ]=value ;_gea ._aaea .Unlock ();};func _fead (_afee ,_dga Result ,_bed string )(float64 ,float64 ,Result ){_adeg ,_gfa :=_daee (_afee ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_bed );if _gfa .Type ==ResultTypeError {return 0,0,_gfa ;};_dfg ,_gfa :=_daee (_dga ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_bed );if _gfa .Type ==ResultTypeError {return 0,0,_gfa ;};if _adeg >=_dfg {return 0,0,MakeErrorResultType (ErrorTypeNum ,_bed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _adeg ,_dfg ,_afc ;};func _fadg (_aaa ,_eacd ,_fecb ,_egba ,_acga float64 ,_eagga int )Result {_cead ,_gde :=_bfaf (_aaa ,_eacd ,_eagga );if _gde .Type ==ResultTypeError {return _gde ;};_gegg ,_fca :=_aca (_aaa ,_eacd ,int (_acga ),_eagga );if _fca .Type ==ResultTypeError {return _fca ;};_gbgg :=0.0;_fadb :=0.0;_fecb *=100/_acga ;_egba /=_acga ;_egba ++;_gdee :=_cead *_acga -_gegg ;for _aadg :=1.0;_aadg < _gegg ;_aadg ++{_cba :=_aadg +_gdee ;_dfb :=_fecb /_gc .Pow (_egba ,_cba );_fadb +=_dfb ;_gbgg +=_cba *_dfb ;};_bdgg :=(_fecb +100)/_gc .Pow (_egba ,_gegg +_gdee );_fadb +=_bdgg ;_gbgg +=(_gegg +_gdee )*_bdgg ;_gbgg /=_fadb ;_gbgg /=_acga ;return MakeNumberResult (_gbgg );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_edda :=args [0].AsString ();if _edda .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_edda .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_edda .ValueString [0]));};

// Reference returns an invalid reference for Negate.
func (_dbfbc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ecac (_ddbae [][]Result )float64 {if len (_ddbae )==2{_edaee :=_ddbae [0][0].AsNumber ();_efbc :=_ddbae [0][1].AsNumber ();_efcff :=_ddbae [1][0].AsNumber ();_ggbd :=_ddbae [1][1].AsNumber ();if _edaee .Type !=ResultTypeNumber ||_efbc .Type !=ResultTypeNumber ||_efcff .Type !=ResultTypeNumber ||_ggbd .Type !=ResultTypeNumber {return _gc .NaN ();};return _edaee .ValueNumber *_ggbd .ValueNumber -_efcff .ValueNumber *_efbc .ValueNumber ;};_abfaa :=float64 (0);_abgb :=float64 (1);for _bdgbf :=range _ddbae {_abfaa +=_abgb *_ddbae [0][_bdgbf ].ValueNumber *_ecac (_feef (_ddbae ,_bdgbf ));_abgb *=-1;};return _abfaa ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdeb :=true ;for _ ,_baae :=range args {_baae =_baae .AsNumber ();switch _baae .Type {case ResultTypeList ,ResultTypeArray :_aaec :=And (_baae .ListValues ());if _aaec .Type ==ResultTypeError {return _aaec ;};if _aaec .ValueNumber ==0{_gdeb =false ;};case ResultTypeNumber :if _baae .ValueNumber ==0{_gdeb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _baae ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_gdeb );};

// Number is a nubmer expression.
type Number struct{_daaa float64 };

// String returns a string representation of a vertical range.
func (_cdef VerticalRange )String ()string {return _cdef .verticalRangeReference ()};var _dfcbc =[...]uint8 {0,20,37,60,78,96};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_ccgg :=len (args );if _ccgg !=4&&_ccgg !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acgf ,_gfd ,_beac :=_fead (args [0],args [1],"\u0044\u0049\u0053\u0043");if _beac .Type ==ResultTypeError {return _beac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dabc :=args [2].ValueNumber ;if _dabc <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbf :=args [3].ValueNumber ;if _bcbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cee :=0;if _ccgg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cee =int (args [4].ValueNumber );if !_bdaa (_cee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_bcaa ,_beac :=_bfaf (_acgf ,_gfd ,_cee );if _beac .Type ==ResultTypeError {return _beac ;};return MakeNumberResult ((_bcbf -_dabc )/_bcbf /_bcaa );};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcafb :=args [0].AsNumber ();if _gcafb .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _gcafb .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_fbgag (_gcafb .ValueNumber ));};func _afgd (_dgag float64 )bool {return _dgag ==1||_dgag ==2||_dgag ==4};var _ecdea string =string ([]byte {92});func init (){_dcbb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbfcg :=args [0].AsNumber ();if _bbfcg .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edff :=float64 (1);if _bbfcg .ValueNumber < 0{_edff =-1;};if len (args )> 1{_cgdf :=args [1].AsNumber ();if _cgdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_edff =_cgdf .ValueNumber ;};_fbegb :=float64 (1);if len (args )> 2{_eeefb :=args [2].AsNumber ();if _eeefb .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbegb =_eeefb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gc .Floor (_bbfcg .ValueNumber ));};_cgac :=_bbfcg .ValueNumber ;_cgac ,_eegf :=_gc .Modf (_cgac /_edff );if _eegf !=0&&_bbfcg .ValueNumber < 0&&_fbegb > 0{_cgac ++;};return MakeNumberResult (_cgac *_edff );};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfgf :=args [0].AsNumber ();_cegf :=args [1].AsNumber ();if _dfgf .Type !=ResultTypeNumber ||_cegf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _cegf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fcee ,_fgaa :=_gc .Modf (_dfgf .ValueNumber /_cegf .ValueNumber );if _fgaa < 0{_fcee --;};return MakeNumberResult (_dfgf .ValueNumber -_cegf .ValueNumber *_fcee );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aefg :=args [0].AsNumber ();_eebac :=args [1].AsNumber ();if _aefg .Type !=ResultTypeNumber ||_eebac .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_afcag :=_gc .Trunc (_aefg .ValueNumber );_aaba :=_gc .Trunc (_eebac .ValueNumber );if _aaba > _afcag {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _aaba ==_afcag ||_aaba ==0{return MakeNumberResult (1);};_fdfgd :=float64 (1);for _accd :=float64 (1);_accd <=_aaba ;_accd ++{_fdfgd *=(_afcag +1-_accd )/_accd ;};return MakeNumberResult (_fdfgd );};type ri struct{_dgaa float64 ;_bagfa string ;};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// String is a string expression.
type String struct{_dcgg string };

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dbeb ,_fdf :=_ecag (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _fdf .Type ==ResultTypeError {return _fdf ;};_gbf :=_be (_dbeb ._eedda );_dfaf :=_be (_dbeb ._daga );_bcdb :=_dbeb ._aegc ;_bgdc :=_dbeb ._gbg ;_dfgc :=_aag (_gbf ,_dfaf ,_bcdb ,_bgdc );_dcfa ,_dcfag ,_gfbe :=_dfgc .Date ();return MakeNumberResult (_cde (_dcfa ,int (_dcfag ),_gfbe ));};

// Eval evaluates and returns the result of an empty expression.
func (_cgb EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfbf :=[]float64 {};for _ ,_gabfb :=range args {switch _gabfb .Type {case ResultTypeString :_abgdc :=_gabfb .AsNumber ();if _abgdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfbf =append (_dfbf ,_abgdc .ValueNumber );case ResultTypeList ,ResultTypeArray :_eecdf :=GCD (_gabfb .ListValues ());if _eecdf .Type !=ResultTypeNumber {return _eecdf ;};_dfbf =append (_dfbf ,_eecdf .ValueNumber );case ResultTypeNumber :_dfbf =append (_dfbf ,_gabfb .ValueNumber );case ResultTypeError :return _gabfb ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gabfb .Type ));};};if _dfbf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dfbf )==1{return MakeNumberResult (_dfbf [0]);};_abee :=_dfbf [0];for _ffabe :=1;_ffabe < len (_dfbf );_ffabe ++{if _dfbf [_ffabe ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abee =_aecd (_abee ,_dfbf [_ffabe ]);};return MakeNumberResult (_abee );};

// Eval evaluates and returns the result of a function call.
func (_gebba FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_gecd :=LookupFunction (_gebba ._bffe );if _gecd !=nil {_cfbff :=make ([]Result ,len (_gebba ._cdeb ));for _bfdgg ,_cbff :=range _gebba ._cdeb {_cfbff [_bfdgg ]=_cbff .Eval (ctx ,ev );_cfbff [_bfdgg ].Ref =_cbff .Reference (ctx ,ev );};if _ ,_deceb :=_cfdc [_gebba ._bffe ];!_deceb {if _egbg ,_deea :=_bacf (_cfbff );_egbg {return _deea ;};};return _gecd (_cfbff );};_debac :=LookupFunctionComplex (_gebba ._bffe );if _debac !=nil {_dfde :=make ([]Result ,len (_gebba ._cdeb ));for _deaee ,_beaba :=range _gebba ._cdeb {_dfde [_deaee ]=_beaba .Eval (ctx ,ev );_dfde [_deaee ].Ref =_beaba .Reference (ctx ,ev );};if _ ,_fccc :=_cfdc [_gebba ._bffe ];!_fccc {if _fgega ,_dbdbed :=_bacf (_dfde );_fgega {return _dbdbed ;};};return _debac (ctx ,ev ,_dfde );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_gebba ._bffe );};func _cff (_eaae ,_gagd []float64 ,_bga float64 )Result {_efag :=false ;_ddef :=false ;for _cecg :=0;_cecg < len (_eaae );_cecg ++{if _eaae [_cecg ]> 0{_efag =true ;};if _eaae [_cecg ]< 0{_ddef =true ;};};if !_efag ||!_ddef {return MakeErrorResultType (ErrorTypeNum ,"");};_acgc :=_bga ;_dbcb :=1e-10;_cdga :=0;_gead :=50;_egdg :=false ;for {_bba :=_geggd (_eaae ,_gagd ,_acgc );_cbdg :=_acgc -_bba /_bede (_eaae ,_gagd ,_acgc );_dggd :=_gc .Abs (_cbdg -_acgc );_acgc =_cbdg ;_cdga ++;if _dggd <=_dbcb ||_gc .Abs (_bba )<=_dbcb {break ;};if _cdga > _gead {_egdg =true ;break ;};};if _egdg ||_gc .IsNaN (_acgc )||_gc .IsInf (_acgc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_acgc );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_dcgcb PrefixRangeExpr )Update (q *_bg .UpdateQuery )Expression {_gegab :=_dcgcb ;_baebc :=_dcgcb ._fbegbb .String ();if _baebc ==q .SheetToUpdate {_cfeb :=*q ;_cfeb .UpdateCurrentSheet =true ;_gegab ._cfgad =_dcgcb ._cfgad .Update (&_cfeb );_gegab ._bdcac =_dcgcb ._bdcac .Update (&_cfeb );};return _gegab ;};

// Reference returns an invalid reference for Bool.
func (_deab Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_efeg *defEval )checkLastEvalIsRef (_aae Context ,_efg Expression ){switch _efg .(type ){case FunctionCall :switch _efg .(FunctionCall )._bffe {case "\u0049\u0053\u0052E\u0046":for _ ,_ccb :=range _efg .(FunctionCall )._cdeb {switch _ccb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_fac :=_ccb .Eval (_aae ,_efeg );_efeg ._fga =!(_fac .Type ==ResultTypeError &&_fac .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_efeg ._fga =false ;};};};};};func _bdbg (_ffcbe Result )[][]Result {switch _ffcbe .Type {case ResultTypeArray :return _ffcbe .ValueArray ;case ResultTypeList :return [][]Result {_ffcbe .ValueList };default:return [][]Result {};};};func (_egdgee *noCache )SetCache (key string ,value Result ){};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgc :=args [0];if _cfgc .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faedb :=len (_cfgc .ValueArray );for _ ,_bcdce :=range _cfgc .ValueArray {if len (_bcdce )!=_faedb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_ecac (_cfgc .ValueArray ));};

// LastRow returns 0 for the invalid reference context.
func (_ebdb *ivr )LastRow (colFrom string )int {return 0};var _fedg =[...]int {0};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bcgaa Result )AsNumber ()Result {if _bcgaa .Type ==ResultTypeString {_bceee ,_degdc :=_e .ParseFloat (_bcgaa .ValueString ,64);if _degdc ==nil {return MakeNumberResult (_bceee );};};if _bcgaa .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bcgaa ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};var _fcebg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _ebbd (args ,false )};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedb :=args [0].Type ;for _ ,_dabgb :=range args {if _dabgb .Type !=_cedb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _cedb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_fgecd :=len (args [0].ListValues ());_fgfe :=make ([]float64 ,_fgecd );for _gefde :=range _fgfe {_fgfe [_gefde ]=1.0;};for _ ,_eeed :=range args {if len (_eeed .ListValues ())!=_fgecd {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _adff ,_decg :=range _eeed .ListValues (){_decg =_decg .AsNumber ();if _decg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_fgfe [_adff ]=_fgfe [_adff ]*_decg .ValueNumber ;};};_egeaa :=0.0;for _ ,_ggdb :=range _fgfe {_egeaa +=_ggdb ;};return MakeNumberResult (_egeaa );};return MakeNumberResult (1.0);};

// Reference returns a string reference value to an expression with prefix.
func (_aggdbd PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_ggfc :=_aggdbd ._baab .Reference (ctx ,ev );_gfff :=_aggdbd ._ecagf .Reference (ctx ,ev );if _ggfc .Type ==ReferenceTypeSheet &&_gfff .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_ggfc .Value +"\u0021"+_gfff .Value };};return ReferenceInvalid ;};

// Reference returns an invalid reference for Number.
func (_eccd Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func _bacf (_bgaga []Result )(bool ,Result ){for _ ,_dfade :=range _bgaga {if _dfade .Type ==ResultTypeError {return true ,_dfade ;};};return false ,MakeEmptyResult ();};

// Reference returns a string reference value to a cell.
func (_fbgf CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_fbgf ._cf };};var _ddgd =false ;

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbcgc :=args [0].AsString ();if _dbcgc .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcfb :=_b .Buffer {};_fgcc :=false ;_geddb :=false ;_adae :=0;for _ ,_ddaac :=range _dbcgc .ValueString {_abefb :=_ddaac ==' ';if _abefb {if !_fgcc {continue ;};if !_geddb {_adae ++;_gcfb .WriteRune (_ddaac );};}else {_adae =0;_fgcc =true ;_gcfb .WriteRune (_ddaac );};_geddb =_abefb ;};_gcfb .Truncate (_gcfb .Len ()-_adae );return MakeStringResult (_gcfb .String ());};

// HasFormula returns FALSE for the invalid reference context.
func (_ccbd *ivr )HasFormula (cellRef string )bool {return false };

// Error is called in the case of parsing error and saves an error to a plex.
func (_gffc *plex )Error (s string ){_dd .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gffc ._bdda =s ;};var _bbeae =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ag :lhs ,_af :rhs ,_fa :op };};func _fba (_feafb ,_gegf int )int {if _gegf ==2&&_aeb (_feafb ){return 29;}else {return _fcf [_gegf -1];};};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_bfeaa PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_fceea :=_bfeaa ._fbegbb .Reference (ctx ,ev );_ecbb :=_bfeaa ._cfgad .Reference (ctx ,ev );_fafb :=_bfeaa ._bdcac .Reference (ctx ,ev );switch _fceea .Type {case ReferenceTypeSheet :if _cfcef (_fceea ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fceea .Value ));};_gecc :=_cgbgdf (_fceea ,_ecbb ,_fafb );if _ecbb .Type ==ReferenceTypeCell &&_fafb .Type ==ReferenceTypeCell {if _adbfa ,_aabbf :=ev .GetFromCache (_gecc );_aabbf {return _adbfa ;}else {_bgaa :=_geebg (ctx .Sheet (_fceea .Value ),ev ,_ecbb .Value ,_fafb .Value );ev .SetCache (_gecc ,_bgaa );return _bgaa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gecc );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fceea .Type ));};};func init (){_ebcc =_gd .New (_gd .NewSource (_dge .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_ggff ("\u0041\u0053\u0049\u004e",_gc .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ggff ("\u0041\u0053\u0049\u004e",_gc .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ggff ("\u0041\u0053\u0049\u004e",_gc .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ggff ("\u0041\u0043\u004f\u0054",func (_eebbb float64 )float64 {return _gc .Pi /2-_gc .Atan (_eebbb )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ggff ("\u0041\u0043\u004fT\u0048",func (_dbdbg float64 )float64 {return _gc .Atanh (1/_dbdbg )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ggff ("\u0041\u0053\u0049\u004e",_gc .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ggff ("\u0041\u0053\u0049N\u0048",_gc .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_ggff ("\u0041\u0054\u0041\u004e",_gc .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ggff ("\u0041\u0054\u0041N\u0048",_gc .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ggff ("\u0043\u004f\u0053",_gc .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_ggff ("\u0043\u004f\u0053\u0048",_gc .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_bdbag ("\u0043\u004f\u0054",_gc .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_bdbag ("\u0043\u004f\u0054\u0048",_gc .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_bdbag ("\u0043\u0053\u0043",_gc .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_bdbag ("\u0043\u0053\u0043",_gc .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ggff ("\u0045\u0058\u0050",_gc .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ggff ("\u004c\u004e",_gc .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ggff ("\u004c\u004f\u00471\u0030",_gc .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_bdbag ("\u0053\u0045\u0043",_gc .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_bdbag ("\u0053\u0045\u0043\u0048",_gc .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_ggff ("\u0053\u0049\u004e",_gc .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ggff ("\u0053\u0049\u004e\u0048",_gc .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ggff ("\u0053\u0051\u0052\u0054",_gc .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ggff ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bged float64 )float64 {return _gc .Sqrt (_bged *_gc .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ggff ("\u0054\u0041\u004e",_gc .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_ggff ("\u0054\u0041\u004e\u0048",_gc .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};func (_cadbb *ivr )Sheet (name string )Context {return _cadbb };

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _fbaa (args ,true )};func _ggcc (_dged Result ,_bcec ,_becg int )[][]Result {_ddba :=[][]Result {};switch _dged .Type {case ResultTypeArray :for _fdfc ,_egef :=range _dged .ValueArray {if _fdfc < _bcec {_ddba =append (_ddba ,_gedd (MakeListResult (_egef ),_becg ));}else {_ddba =append (_ddba ,_gedd (MakeErrorResultType (ErrorTypeNA ,""),_becg ));};};case ResultTypeList :_caeg :=_gedd (_dged ,_becg );for _gdfb :=0;_gdfb < _bcec ;_gdfb ++{_ddba =append (_ddba ,_caeg );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gfdc :=0;_gfdc < _bcec ;_gfdc ++{_becbd :=_gedd (_dged ,_becg );_ddba =append (_ddba ,_becbd );};};return _ddba ;};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_dbebb ,_eebag ,_aafee :=_adgg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _aafee .Type ==ResultTypeError {return _aafee ;};if _eebag < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _dbebb ==0{return MakeNumberResult (0);};_gggg :=_dbebb < 0;if _gggg {_dbebb =-_dbebb ;};_cefe :=args [0].Value ();_bfacc :=_f .Split (_cefe ,"\u002e");_agcg :=float64 (int (_dbebb ));_adcg :=_bfacc [1];_bafg :=len (_adcg );_cbdb :=int (_gc .Log10 (_eebag ))+1;_faed :=float64 (_cbdb -_bafg );_fbdd ,_fbcf :=_e .ParseFloat (_adcg ,64);if _fbcf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_fbdd *=_gc .Pow (10,_faed );_cdb :=_agcg +_fbdd /_eebag ;if _gggg {_cdb =-_cdb ;};return MakeNumberResult (_cdb );};const _egcd int =30;

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgec :=args [0].AsNumber ();if _fgec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fgec .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dabcf :=float64 (1);_ggfbb :=_gc .Trunc (_fgec .ValueNumber );for _gcdge :=_ggfbb ;_gcdge > 1;_gcdge -=2{_dabcf *=_gcdge ;};return MakeNumberResult (_dabcf );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gefd :=_dge .Now ();_ ,_agg :=_gefd .Zone ();_ccfe :=_cfbf (_cda ,_gefd .Unix ()+int64 (_agg ))+1;return MakeNumberResult (_ccfe );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eedf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbbd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfab :=args [2].ValueNumber ;if _bfab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edfd :=args [3].ValueNumber ;return MakeNumberResult (_edfd *_eedf *(_cbbd /_bfab -1));};func _fgecda (_egaecb []Result ,_eaef bool )Result {_bfdg :="\u004d\u0041\u0058";if _eaef {_bfdg ="\u004d\u0041\u0058\u0041";};if len (_egaecb )==0{return MakeErrorResult (_bfdg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bafe :=-_gc .MaxFloat64 ;for _ ,_ggeg :=range _egaecb {switch _ggeg .Type {case ResultTypeNumber :if (_eaef ||!_ggeg .IsBoolean )&&_ggeg .ValueNumber > _bafe {_bafe =_ggeg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bedd :=_fgecda (_ggeg .ListValues (),_eaef );if _bedd .ValueNumber > _bafe {_bafe =_bedd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dfddg :=0.0;if _eaef {_dfddg =_ggeg .AsNumber ().ValueNumber ;};if _dfddg > _bafe {_bafe =_dfddg ;};default:_dd .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bfdg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggeg .Type );};};if _bafe ==-_gc .MaxFloat64 {_bafe =0;};return MakeNumberResult (_bafe );};const _ceeae =57361;

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcca ,_cadd ,_gbae :=_fead (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _gbae .Type ==ResultTypeError {return _gbae ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgb :=_cadd -_gcca ;if _ccgb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_fgcf :=args [2].ValueNumber ;if _fgcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_fgcf )/(360-_fgcf *_ccgb ));};

// Eval evaluates and returns the result of a formula.
func (_cab *defEval )Eval (ctx Context ,formula string )Result {_cgd :=ParseString (formula );_dba :=make (chan Result );go func (){if _cgd ==nil {_dba <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_cab .checkLastEvalIsRef (ctx ,_cgd );_dba <-_cgd .Eval (ctx ,_cab );};}();select{case _caf :=<-_dba :return _caf ;case <-_dge .After (_caeb ):_dd .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bddeg PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_affgb :=_bddeg ._dabf .Reference (ctx ,ev );switch _affgb .Type {case ReferenceTypeSheet :if _cfcef (_affgb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_affgb .Value ));};_ebdcf :=_bddeg .verticalRangeReference (_affgb .Value );if _aafcb ,_bcfdb :=ev .GetFromCache (_ebdcf );_bcfdb {return _aafcb ;};_eaecd :=ctx .Sheet (_affgb .Value );_aeeea ,_gaafc :=_cfafb (_eaecd ,_bddeg ._bfgce ,_bddeg ._ccecb );_afdf :=_geebg (_eaecd ,ev ,_aeeea ,_gaafc );ev .SetCache (_ebdcf ,_afdf );return _afdf ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_affgb .Type ));};};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cg ConstArrayExpr )Update (q *_bg .UpdateQuery )Expression {return _cg };const _bfbf =57349;

// String returns a string representation of a vertical range with prefix.
func (_dfda PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dfda ._dabf .String (),_dfda ._bfgce ,_dfda ._ccecb );};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bfcgg :=_f .Split (v ,"\u003a");if len (_bfcgg )!=2{return nil ;};_efbfcb ,_ :=_e .Atoi (_bfcgg [0]);_agdbgd ,_ :=_e .Atoi (_bfcgg [1]);if _efbfcb > _agdbgd {_efbfcb ,_agdbgd =_agdbgd ,_efbfcb ;};return HorizontalRange {_daag :_efbfcb ,_gegc :_agdbgd };};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddc :=args [0];if _cddc .Type ==ResultTypeNumber {return _cddc ;};if _cddc .Type ==ResultTypeString {_eceg ,_aacae :=_e .ParseFloat (_cddc .Value (),64);if _aacae ==nil {return MakeNumberResult (_eceg );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// String returns an empty string for EmptyExpr.
func (_ecf EmptyExpr )String ()string {return ""};type tokenType int ;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbbg :=false ;for _ ,_dadb :=range args {switch _dadb .Type {case ResultTypeList ,ResultTypeArray :_bcfg :=Or (_dadb .ListValues ());if _bcfg .Type ==ResultTypeError {return _bcfg ;};if _bcfg .ValueNumber !=0{_cbbg =true ;};case ResultTypeNumber :if _dadb .ValueNumber !=0{_cbbg =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dadb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_cbbg );};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_eded ,_bcgdb :=_e .ParseFloat (v ,64);if _bcgdb !=nil {_dd .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_bcgdb );};return Number {_daaa :_eded };};const _fagd =1;var _dca =map[string ]*_dg .Regexp {};type xargs struct{_bab []float64 ;_defe []float64 ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_edefa NamedRangeRef )Update (q *_bg .UpdateQuery )Expression {return _edefa };

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_gdbdg :=len (args );if _gdbdg < 3||_gdbdg > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbgc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aaca :=args [1].ValueNumber ;if _aaca !=float64 (int (_aaca )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbg :=args [2].ValueNumber ;_bdeg :=0.0;if _gdbdg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdeg =args [3].ValueNumber ;};_geab :=0.0;if _gdbdg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_geab =args [4].ValueNumber ;if _geab !=0{_geab =1;};};if _cbgc ==0{return MakeNumberResult (-_cdbg *_aaca -_bdeg );}else {return MakeNumberResult ((((1-_gc .Pow (1+_cbgc ,_aaca ))/_cbgc )*_cdbg *(1+_cbgc *_geab )-_bdeg )/_gc .Pow (1+_cbgc ,_aaca ));};};var _gdd =map[string ]*_dg .Regexp {};const _fceda =57363;const (_dbdcd cmpResult =0;_agab cmpResult =-1;_dcba cmpResult =1;_cgfa cmpResult =2;);

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cecb :=len (args );if _cecb < 3||_cecb > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdeaa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cabdc :=args [2].ValueNumber ;_aac :=0.0;if _cecb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aac =args [3].ValueNumber ;};_beeg :=0.0;if _cecb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_beeg =args [4].ValueNumber ;if _beeg !=0{_beeg =1;};};_cbbc :=_dgfab *(1+_fdeaa *_beeg )-_aac *_fdeaa ;_egbd :=(_cabdc *_fdeaa +_dgfab *(1+_fdeaa *_beeg ));return MakeNumberResult (_gc .Log (_cbbc /_egbd )/_gc .Log (1+_fdeaa ));};func _ccfa (_efdc []Result ,_baad []string ,_gcadf bool )[]string {for _ ,_fadd :=range _efdc {switch _fadd .Type {case ResultTypeEmpty :if !_gcadf {_baad =append (_baad ,"");};case ResultTypeString :if _fadd .ValueString !=""||!_gcadf {_baad =append (_baad ,_fadd .ValueString );};case ResultTypeNumber :_baad =append (_baad ,_fadd .Value ());case ResultTypeList :_baad =_bgaf (_baad ,_ccfa (_fadd .ValueList ,[]string {},_gcadf ));case ResultTypeArray :for _ ,_ffbg :=range _fadd .ValueArray {_baad =_bgaf (_baad ,_ccfa (_ffbg ,[]string {},_gcadf ));};};};return _baad ;};const _ddfa =57370;func (_afbeg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecdf :=args [0].AsNumber ();_babf :=args [1].AsNumber ();if _ecdf .Type !=ResultTypeNumber ||_babf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _babf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_gc .Trunc (_ecdf .ValueNumber /_babf .ValueNumber ));};type rangeIndex struct{_becd int ;_facb int ;};

// Eval evaluates and returns the result of a sheet expression.
func (_abge SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _aeb (_dfa int )bool {if _dfa ==_dfa /400*400{return true ;};if _dfa ==_dfa /100*100{return false ;};return _dfa ==_dfa /4*4;};func _cgea (_afcab []Result )Result {_bgf :=_afcab [0].ValueArray ;if len (_afcab )==1{_bgcd :=[][]Result {};for _ ,_fbbd :=range _bgf {_bgcd =append (_bgcd ,_afbc ([]Result {MakeListResult (_fbbd )}).ValueList );};return MakeArrayResult (_bgcd );}else if len (_afcab )==2{_cbec :=len (_bgf );_ecgc :=len (_bgf [0]);_gega :=_ggcc (_afcab [1],_cbec ,_ecgc );_acbc :=len (_gega );_acede :=[][]Result {};var _dcg []Result ;for _afec ,_gfc :=range _bgf {if _afec < _acbc {_dcg =_gega [_afec ];}else {_dcg =_gedd (MakeErrorResultType (ErrorTypeNA ,""),_ecgc );};_acede =append (_acede ,_afbc ([]Result {MakeListResult (_gfc ),MakeListResult (_dcg )}).ValueList );};return MakeArrayResult (_acede );}else if len (_afcab )==3{_gcae :=len (_bgf );_gbcg :=len (_bgf [0]);_degd :=_ggcc (_afcab [1],_gcae ,_gbcg );_fccg :=_ggcc (_afcab [2],_gcae ,_gbcg );_gccab :=len (_degd );_afgc :=len (_fccg );_cdd :=[][]Result {};var _fefcd ,_dfba []Result ;for _daece ,_gcdg :=range _bgf {if _daece < _gccab {_fefcd =_degd [_daece ];}else {_fefcd =_gedd (MakeErrorResultType (ErrorTypeNA ,""),_gbcg );};if _daece < _afgc {_dfba =_fccg [_daece ];}else {_dfba =_gedd (MakeErrorResultType (ErrorTypeNA ,""),_gbcg );};_cdd =append (_cdd ,_afbc ([]Result {MakeListResult (_gcdg ),MakeListResult (_fefcd ),MakeListResult (_dfba )}).ValueList );};return MakeArrayResult (_cdd );};return MakeErrorResultType (ErrorTypeValue ,"");};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_baba string };func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcgd :=args [0].AsNumber ();if _gcgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acef :=float64 (0);if len (args )> 1{_febcb :=args [1].AsNumber ();if _febcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acef =_febcb .ValueNumber ;};_dbcf :=_gcgd .ValueNumber ;_aeaa :=1.0;if _acef >=0{_aeaa =_gc .Pow (1/10.0,_acef );}else {return MakeNumberResult (0);};_dbcf ,_eabbg :=_gc .Modf (_dbcf /_aeaa );_fedag :=0.99999;if _eabbg > _fedag {_dbcf ++;}else if _eabbg < -_fedag {_dbcf --;};_ =_eabbg ;return MakeNumberResult (_dbcf *_aeaa );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _fbaa (args ,false )};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_ebff :=len (args );if _ebff !=3&&_ebff !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfadf ,_aebfb :=_dgeeg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _aebfb .Type ==ResultTypeError {return _aebfb ;};_febgg ,_aebfb :=_dgeeg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _aebfb .Type ==ResultTypeError {return _aebfb ;};_cbga ,_aebfb :=_dgeeg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _aebfb .Type ==ResultTypeError {return _aebfb ;};_bdfgd :=0;if _ebff ==3{return MakeStringResult (_f .Replace (_bfadf ,_febgg ,_cbga ,-1));}else {_efbca ,_gabe :=_daca (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _gabe .Type ==ResultTypeError {return _gabe ;};_bdfgd =int (_efbca );if _bdfgd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_fdagc :=_bfadf ;_bbfgg :=_bdfgd ;_dddg :=-1;_afdad :=len (_febgg );_bddfa :=0;for {_bbfgg --;_ddfc :=_f .Index (_fdagc ,_febgg );if _ddfc ==-1{_dddg =-1;break ;}else {_dddg =_ddfc +_bddfa ;if _bbfgg ==0{break ;};_ebce :=_afdad +_ddfc ;_bddfa +=_ebce ;_fdagc =_fdagc [_ebce :];};};if _dddg ==-1{return MakeStringResult (_bfadf );}else {_gbebe :=_bfadf [:_dddg ];_fcff :=_bfadf [_dddg +_afdad :];return MakeStringResult (_gbebe +_cbga +_fcff );};};};

// Reference returns an invalid reference for Error.
func (_fbc Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_bdegd ,_aface :=_bdef ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _aface .Type !=ResultTypeEmpty {return _aface ;};_fcdg :=_bdegd ._fdbc ;_adcce :=_bdegd ._bdac ;_dbdd :=_bdegd ._edcdc ;_aedcfe :=_bdegd ._ddga ;_gbaa :=len (_fcdg );if _adcce > _gbaa {_adcce =_gbaa ;};_dfacf :=_adcce +_dbdd ;if _dfacf > _gbaa {_dfacf =_gbaa ;};_cfdda :=_fcdg [0:_adcce ]+_aedcfe +_fcdg [_dfacf :];return MakeStringResult (_cfdda );};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adec ,_fgbg ,_fgdf :=_fead (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fgdf .Type ==ResultTypeError {return _fgdf ;};_gdde ,_fgdf :=_daee (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fgdf .Type ==ResultTypeError {return _fgdf ;};if _gdde >=_adec {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_efdb :=args [3];if _efdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbeg :=_efdb .ValueNumber ;if _cbeg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ceag :=args [4];if _ceag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eagd :=_ceag .ValueNumber ;if _eagd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ggfb :=args [5];if _ggfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cca :=_ggfb .ValueNumber ;if _cca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_degg :=args [6];if _degg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baeb :=float64 (int (_degg .ValueNumber ));if !_afgd (_baeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efcd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_eeef :=args [7];if _eeef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_efcd =int (_eeef .ValueNumber );if !_bdaa (_efcd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_gcc ,_fgdf :=_bfaf (_gdde ,_fgbg ,_efcd );if _fgdf .Type ==ResultTypeError {return _fgdf ;};_gcc *=_baeb ;_fdbb ,_fgdf :=_bfaf (_adec ,_fgbg ,_efcd );if _fgdf .Type ==ResultTypeError {return _fgdf ;};_fdbb *=_baeb ;_dfag ,_fgdf :=_bfaf (_gdde ,_adec ,_efcd );if _fgdf .Type ==ResultTypeError {return _fgdf ;};_dfag *=_baeb ;_cbdf :=_cca +_gcc *100*_cbeg /_baeb ;_cbdf /=_fdbb *_eagd /_baeb +1;_cbdf -=_dfag *100*_cbeg /_baeb ;return MakeNumberResult (_cbdf );};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_aedcb :=args [0].AsNumber ();if _aedcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ddbf :=float64 (1);if _aedcb .ValueNumber < 0{_ddbf =-1;};if len (args )> 1{_cccd :=args [1].AsNumber ();if _cccd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddbf =_cccd .ValueNumber ;};if _ddbf < 0&&_aedcb .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_gc .Ceil (_aedcb .ValueNumber ));};_ecafg :=_aedcb .ValueNumber ;_ecafg ,_dbbe :=_gc .Modf (_ecafg /_ddbf );if _dbbe > 0{_ecafg ++;};return MakeNumberResult (_ecafg *_ddbf );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddcf :=args [0].AsNumber ();if _ddcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_gc .Pi /180.0*_ddcf .ValueNumber );};

// Reference returns an invalid reference for BinaryExpr.
func (_agf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type defEval struct{evCache ;_fga bool ;};

// Negate is a negate expression like -A1.
type Negate struct{_gfgaa Expression };type parsedReplaceObject struct{_fdbc string ;_bdac int ;_edcdc int ;_ddga string ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbgf :=args [0].AsNumber ();if _bbgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbdbe :=float64 (1);if _bbgf .ValueNumber < 0{_dbdbe =-1;};if len (args )> 1{_ffgb :=args [1].AsNumber ();if _ffgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbdbe =_gc .Abs (_ffgb .ValueNumber );};if len (args )==1{return MakeNumberResult (_gc .Ceil (_bbgf .ValueNumber ));};_dcbge :=_bbgf .ValueNumber ;_dcbge ,_efdg :=_gc .Modf (_dcbge /_dbdbe );if _efdg !=0{if _bbgf .ValueNumber > 0{_dcbge ++;};};return MakeNumberResult (_dcbge *_dbdbe );};func (_cade tokenType )String ()string {return _gfagd (int (_cade ))};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_gfgaa :e }};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};const _bdebg =57353;

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efgd :=args [0];_effe :=args [1];if _effe .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abeg :=args [2].AsNumber ();if _abeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecaf :=false ;if len (args )==4{_cbaf :=args [3].AsNumber ();if _cbaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cbaf .ValueNumber ==0{_ecaf =true ;};};_dgagc :=-1;_cffd :=false ;if len (_effe .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_aacc :=_effe .ValueArray [0];_bgbec :for _fgdc ,_bgbeb :=range _aacc {switch _bbcaf (_bgbeb ,_efgd ,false ,_ecaf ){case _agab :_dgagc =_fgdc ;case _dbdcd :_dgagc =_fgdc ;_cffd =true ;break _bgbec ;};};if _dgagc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cgfac :=int (_abeg .ValueNumber )-1;if _cgfac < 0||_cgfac > len (_effe .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_aacc =_effe .ValueArray [_cgfac ];if _dgagc < 0||_dgagc >=len (_aacc ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _cffd ||!_ecaf {return _aacc [_dgagc ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cabb :=args [0].AsNumber ();if _cabb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfed :=args [1].AsNumber ();if _bfed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfcc :=int (_bfed .ValueNumber );if _bfcc < 0||_bfcc > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_ccdfc :=0;if len (args )> 2{_gagdc :=args [2].AsNumber ();if _gagdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccdfc =int (_gagdc .ValueNumber );};_ffac :=_e .FormatInt (int64 (_cabb .ValueNumber ),_bfcc );if len (_ffac )< _ccdfc {_ffac =_f .Repeat ("\u0030",_ccdfc -len (_ffac ))+_ffac ;};return MakeStringResult (_ffac );};func init (){_feefga ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func _ggef (_gcgg []Result ,_ebbaa countMode )float64 {_fadga :=0.0;for _ ,_badde :=range _gcgg {switch _badde .Type {case ResultTypeNumber :if _ebbaa ==_cebga ||(_ebbaa ==_dacc &&!_badde .IsBoolean ){_fadga ++;};case ResultTypeList ,ResultTypeArray :_fadga +=_ggef (_badde .ListValues (),_ebbaa );case ResultTypeString :if _ebbaa ==_cebga {_fadga ++;};case ResultTypeEmpty :if _ebbaa ==_fdeaac {_fadga ++;};};};return _fadga ;};var _edbd =map[string ]FunctionComplex {};func _ebf (_adc ,_fbcg _dge .Time )bool {_bbe :=_adc .Unix ();_bbf :=_fbcg .Unix ();_aggf :=_adc .Year ();_adg :=_fbga (_aggf ,_dge .March ,1);if _aeb (_aggf )&&_bbe < _adg &&_bbf >=_adg {return true ;};var _bgc =_fbcg .Year ();var _deb =_fbga (_bgc ,_dge .March ,1);return (_aeb (_bgc )&&_bbf >=_deb &&_bbe < _deb );};

// FunctionCall is a function call expression.
type FunctionCall struct{_bffe string ;_cdeb []Expression ;};var _cda int64 =_fbga (1900,_dge .January ,1);const _fefag =57375;

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// String returns a string representation of a horizontal range with prefix.
func (_fcce PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_fcce ._ffbb .String (),_fcce ._afced ,_fcce ._agae );};func (_eaddb *yyParserImpl )Lookahead ()int {return _eaddb ._cdba };func _geagc (_bgff Result ,_baaea *criteriaParsed )bool {_dagge :=_f .ToLower (_bgff .ValueString );_ebagd :=_baaea ._gbdc ._bcefb ;_gagc :=_baaea ._gbdc ._defd ;if _ebagd ==_eagda {return _dagge ==_gagc ||_dc .Match (_gagc ,_dagge );};if _bgff .Type !=ResultTypeEmpty {if _dagge ==_baaea ._babdb ||_dc .Match (_baaea ._babdb ,_dagge ){return true ;};if _ ,_fggd :=_e .ParseFloat (_gagc ,64);_fggd ==nil {return false ;};switch _ebagd {case _beab :return _dagge <=_gagc ;case _agafd :return _dagge >=_gagc ;case _dfdda :return _dagge < _gagc ;case _daeef :return _dagge > _gagc ;};};return false ;};

// String returns a string of a range.
func (_adcgd Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_adcgd ._eccea .String (),_adcgd ._eggec .String ());};func (_efbac *yyParserImpl )Parse (yylex yyLexer )int {_fdbe :=_dge .Now ();var _ecdb int ;var _ffgag yySymType ;var _ccdb []yySymType ;_ =_ccdb ;_fddcc :=_efbac ._ebbcc [:];Nerrs :=0;Errflag :=0;_gdcga :=0;_efbac ._cdba =-1;_debgd :=-1;defer func (){_gdcga =-1;_efbac ._cdba =-1;_debgd =-1}();_gcdc :=-1;goto _fadba ;_aegf :return 0;_bbgfc :return 1;_fadba :if _febb (_fdbe ){_dd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bbgfc ;};if _bbge >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_gfagd (_debgd ),_dcdge (_gdcga ));};_gcdc ++;if _gcdc >=len (_fddcc ){_ebdf :=make ([]yySymType ,len (_fddcc )*2);copy (_ebdf ,_fddcc );_fddcc =_ebdf ;};_fddcc [_gcdc ]=_ffgag ;_fddcc [_gcdc ]._cgcdb =_gdcga ;_agedc :if _febb (_fdbe ){_dd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bbgfc ;};_ecdb =_ffaa [_gdcga ];if _ecdb <=_fgbgd {goto _ddada ;};if _efbac ._cdba < 0{_efbac ._cdba ,_debgd =_babfg (yylex ,&_efbac ._cedec );};_ecdb +=_debgd ;if _ecdb < 0||_ecdb >=_efcce {goto _ddada ;};_ecdb =_eefd [_ecdb ];if _dcbe [_ecdb ]==_debgd {_efbac ._cdba =-1;_debgd =-1;_ffgag =_efbac ._cedec ;_gdcga =_ecdb ;if Errflag > 0{Errflag --;};goto _fadba ;};_ddada :if _febb (_fdbe ){_dd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bbgfc ;};_ecdb =_bagdb [_gdcga ];if _ecdb ==-2{if _efbac ._cdba < 0{_efbac ._cdba ,_debgd =_babfg (yylex ,&_efbac ._cedec );};_gedc :=0;for {if _ccbfc [_gedc +0]==-1&&_ccbfc [_gedc +1]==_gdcga {break ;};_gedc +=2;};for _gedc +=2;;_gedc +=2{_ecdb =_ccbfc [_gedc +0];if _ecdb < 0||_ecdb ==_debgd {break ;};};_ecdb =_ccbfc [_gedc +1];if _ecdb < 0{goto _aegf ;};};if _ecdb ==0{switch Errflag {case 0:yylex .Error (_agfcdg (_gdcga ,_debgd ));Nerrs ++;if _bbge >=1{_a .Printf ("\u0025\u0073",_dcdge (_gdcga ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_gfagd (_debgd ));};fallthrough;case 1,2:Errflag =3;for _gcdc >=0{_ecdb =_ffaa [_fddcc [_gcdc ]._cgcdb ]+_bfaag ;if _ecdb >=0&&_ecdb < _efcce {_gdcga =_eefd [_ecdb ];if _dcbe [_gdcga ]==_bfaag {goto _fadba ;};};if _bbge >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_fddcc [_gcdc ]._cgcdb );};_gcdc --;};goto _bbgfc ;case 3:if _bbge >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_gfagd (_debgd ));};if _debgd ==_fagd {goto _bbgfc ;};_efbac ._cdba =-1;_debgd =-1;goto _agedc ;};};if _bbge >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_ecdb ,_dcdge (_gdcga ));};_ebaba :=_ecdb ;_ggfdg :=_gcdc ;_ =_ggfdg ;_gcdc -=_efac [_ecdb ];if _gcdc +1>=len (_fddcc ){_gfab :=make ([]yySymType ,len (_fddcc )*2);copy (_gfab ,_fddcc );_fddcc =_gfab ;};_ffgag =_fddcc [_gcdc +1];_ecdb =_ggaf [_ecdb ];_bccb :=_fbcb [_ecdb ];_bdae :=_bccb +_fddcc [_gcdc ]._cgcdb +1;if _bdae >=_efcce {_gdcga =_eefd [_bccb ];}else {_gdcga =_eefd [_bdae ];if _dcbe [_gdcga ]!=-_ecdb {_gdcga =_eefd [_bccb ];};};switch _ebaba {case 1:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{yylex .(*plex )._agbbe =_ffgag ._eede ;};case 3:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =_ccdb [2]._eede ;};case 4:_ccdb =_fddcc [_ggfdg -4:_ggfdg +1];{};case 5:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewBool (_ccdb [1]._ggebb ._cbfc );};case 6:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewNumber (_ccdb [1]._ggebb ._cbfc );};case 7:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewString (_ccdb [1]._ggebb ._cbfc );};case 8:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewError (_ccdb [1]._ggebb ._cbfc );};case 9:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =_ccdb [2]._eede ;};case 10:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =NewNegate (_ccdb [2]._eede );};case 15:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =_ccdb [2]._eede ;};case 17:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewConstArrayExpr (_ccdb [2]._dfaac );};case 18:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._dfaac =append (_ffgag ._dfaac ,_ccdb [1]._fecd );};case 19:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._dfaac =append (_ccdb [1]._dfaac ,_ccdb [3]._fecd );};case 20:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._fecd =append (_ffgag ._fecd ,_ccdb [1]._eede );};case 21:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._fecd =append (_ccdb [1]._fecd ,_ccdb [3]._eede );};case 23:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =NewPrefixExpr (_ccdb [1]._eede ,_ccdb [2]._eede );};case 25:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewSheetPrefixExpr (_ccdb [1]._ggebb ._cbfc );};case 26:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewCellRef (_ccdb [1]._ggebb ._cbfc );};case 27:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewRange (_ccdb [1]._eede ,_ccdb [3]._eede );};case 28:_ccdb =_fddcc [_ggfdg -4:_ggfdg +1];{_ffgag ._eede =NewPrefixRangeExpr (_ccdb [1]._eede ,_ccdb [2]._eede ,_ccdb [4]._eede );};case 29:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewNamedRangeRef (_ccdb [1]._ggebb ._cbfc );};case 30:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewHorizontalRange (_ccdb [1]._ggebb ._cbfc );};case 31:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._eede =NewVerticalRange (_ccdb [1]._ggebb ._cbfc );};case 32:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =NewPrefixHorizontalRange (_ccdb [1]._eede ,_ccdb [2]._ggebb ._cbfc );};case 33:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =NewPrefixVerticalRange (_ccdb [1]._eede ,_ccdb [2]._ggebb ._cbfc );};case 34:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypePlus ,_ccdb [3]._eede );};case 35:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeMinus ,_ccdb [3]._eede );};case 36:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeMult ,_ccdb [3]._eede );};case 37:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeDiv ,_ccdb [3]._eede );};case 38:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeExp ,_ccdb [3]._eede );};case 39:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeLT ,_ccdb [3]._eede );};case 40:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeGT ,_ccdb [3]._eede );};case 41:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeLEQ ,_ccdb [3]._eede );};case 42:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeGEQ ,_ccdb [3]._eede );};case 43:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeEQ ,_ccdb [3]._eede );};case 44:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeNE ,_ccdb [3]._eede );};case 45:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewBinaryExpr (_ccdb [1]._eede ,BinOpTypeConcat ,_ccdb [3]._eede );};case 47:_ccdb =_fddcc [_ggfdg -2:_ggfdg +1];{_ffgag ._eede =NewFunction (_ccdb [1]._ggebb ._cbfc ,nil );};case 48:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._eede =NewFunction (_ccdb [1]._ggebb ._cbfc ,_ccdb [2]._fecd );};case 49:_ccdb =_fddcc [_ggfdg -1:_ggfdg +1];{_ffgag ._fecd =append (_ffgag ._fecd ,_ccdb [1]._eede );};case 50:_ccdb =_fddcc [_ggfdg -3:_ggfdg +1];{_ffgag ._fecd =append (_ccdb [1]._fecd ,_ccdb [3]._eede );};case 53:_ccdb =_fddcc [_ggfdg -0:_ggfdg +1];{_ffgag ._eede =NewEmptyExpr ();};};goto _fadba ;};func _cdgd (_fded ,_adea ,_dfcd ,_gece ,_bgga ,_ccbga float64 ,_gdabc int )(float64 ,Result ){_aadgg :=int (_ccbga );_abfc :=_afef (_fded ,_adea ,_aadgg ,_gdabc );_defa :=_agfc (_fded ,_adea ,_aadgg ,_gdabc )/_abfc ;_fbgdf ,_abfcf :=_aca (_fded ,_adea ,_aadgg ,_gdabc );if _abfcf .Type ==ResultTypeError {return 0,_abfcf ;};_ggfba :=_cge (_fded ,_adea ,_aadgg ,_gdabc );_faee :=_bgga /_gc .Pow (1+_gece /_ccbga ,_fbgdf -1+_defa );_faee -=100*_dfcd /_ccbga *_ggfba /_abfc ;_faded :=100*_dfcd /_ccbga ;_agbfd :=1+_gece /_ccbga ;for _acbd :=0.0;_acbd < _fbgdf ;_acbd ++{_faee +=_faded /_gc .Pow (_agbfd ,_acbd +_defa );};return _faee ,MakeEmptyResult ();};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fbeabf PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gegdd :=_fbeabf ._ffbb .Reference (ctx ,ev );switch _gegdd .Type {case ReferenceTypeSheet :if _cfcef (_gegdd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gegdd .Value ));};_ddee :=_fbeabf .horizontalRangeReference (_gegdd .Value );if _dabd ,_gabdd :=ev .GetFromCache (_ddee );_gabdd {return _dabd ;};_daeg :=ctx .Sheet (_gegdd .Value );_deedf ,_beded :=_dcgc (_daeg ,_fbeabf ._afced ,_fbeabf ._agae );_bebbd :=_geebg (_daeg ,ev ,_deedf ,_beded );ev .SetCache (_ddee ,_bebbd );return _bebbd ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gegdd .Type ));};};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_dgc :=len (args );if _dgc !=5&&_dgc !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gcff ,_gcce ,_cgce :=_fead (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cgce .Type ==ResultTypeError {return _cgce ;};_aaeg ,_cgce :=_daee (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cgce .Type ==ResultTypeError {return _cgce ;};if _aaeg >=_gcff {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcef :=args [3].ValueNumber ;if _fcef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ddbeb :=args [4].ValueNumber ;if _ddbeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gdag :=0;if _dgc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdag =int (args [5].ValueNumber );if !_bdaa (_gdag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_bggd ,_cgce :=_bfaf (_gcff ,_gcce ,_gdag );if _cgce .Type ==ResultTypeError {return _cgce ;};_abaed ,_cgce :=_bfaf (_aaeg ,_gcce ,_gdag );if _cgce .Type ==ResultTypeError {return _cgce ;};_gcedd ,_cgce :=_bfaf (_aaeg ,_gcff ,_gdag );if _cgce .Type ==ResultTypeError {return _cgce ;};_feae :=1+_abaed *_fcef ;_fddf :=1+_bggd *_ddbeb ;return MakeNumberResult ((_feae /_fddf -_gcedd *_fcef )*100);};func _agfgg (_bgdg string )*criteriaRegex {_gfbc :=&criteriaRegex {};if _bgdg ==""{return _gfbc ;};if _gdfg :=_cdbgg .FindStringSubmatch (_bgdg );len (_gdfg )> 1{_gfbc ._bcefb =_eagda ;_gfbc ._defd =_gdfg [1];}else if _fdaf :=_gfce .FindStringSubmatch (_bgdg );len (_fdaf )> 1{_gfbc ._bcefb =_eagda ;_gfbc ._defd =_fdaf [1];}else if _aadbe :=_feec .FindStringSubmatch (_bgdg );len (_aadbe )> 1{_gfbc ._bcefb =_beab ;_gfbc ._defd =_aadbe [1];}else if _ddgg :=_beae .FindStringSubmatch (_bgdg );len (_ddgg )> 1{_gfbc ._bcefb =_agafd ;_gfbc ._defd =_ddgg [1];}else if _fegaf :=_fadcf .FindStringSubmatch (_bgdg );len (_fegaf )> 1{_gfbc ._bcefb =_dfdda ;_gfbc ._defd =_fegaf [1];}else if _fegcb :=_abfac .FindStringSubmatch (_bgdg );len (_fegcb )> 1{_gfbc ._bcefb =_daeef ;_gfbc ._defd =_fegcb [1];};return _gfbc ;};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dbbac ,_gabac ,_bbgb :=_dgcg (from ,to );if _bbgb !=nil {_dd .Log (_bbgb .Error ());return NewError (_bbgb .Error ());};return Range {_eccea :_dbbac ,_eggec :_gabac };};func _bca (_cdaa ,_cdc ,_bad ,_agfcd float64 ,_abcd int )float64 {var _agbf float64 ;if _cdaa ==0{_agbf =(_bad +_agfcd )/_cdc ;}else {_beec :=_gc .Pow (1+_cdaa ,_cdc );if _abcd ==1{_agbf =(_agfcd *_cdaa /(_beec -1)+_bad *_cdaa /(1-1/_beec ))/(1+_cdaa );}else {_agbf =_agfcd *_cdaa /(_beec -1)+_bad *_cdaa /(1-1/_beec );};};return -_agbf ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dcgec ,_cedfa :=_adaf ("\u0046\u0049\u004e\u0044",args );if _cedfa .Type !=ResultTypeEmpty {return _cedfa ;};_egfd :=_dcgec ._ecbgd ;if _egfd ==""{return MakeNumberResult (1.0);};_gbggd :=_dcgec ._ggce ;_bgcc :=_dcgec ._gceaa -1;_dcfae :=1;_dfab :=0;for _geac :=range _gbggd {if _geac !=0{_egbae :=1;if _geac -_dfab > 1{_egbae =2;};_dcfae +=_egbae ;};if _dcfae > _bgcc {_ccda :=_f .Index (_gbggd [_geac :],_egfd );if _ccda ==0{return MakeNumberResult (float64 (_dcfae ));};};_dfab =_geac ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const (_dacc countMode =iota ;_cebga ;_fdeaac ;);type criteriaRegex struct{_bcefb byte ;_defd string ;};func _gedd (_dfec Result ,_dfbdd int )[]Result {_gbgb :=[]Result {};switch _dfec .Type {case ResultTypeList :_febe :=_dfec .ValueList ;_agcgd :=len (_febe );for _dgda :=0;_dgda < _dfbdd ;_dgda ++{if _dgda < _agcgd {_gbgb =append (_gbgb ,_febe [_dgda ]);}else {_gbgb =append (_gbgb ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bcfff :=0;_bcfff < _dfbdd ;_bcfff ++{_gbgb =append (_gbgb ,_dfec );};};return _gbgb ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_abb [][]Expression };

// Reference returns a string reference value to a vertical range.
func (_baaa VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_baaa .verticalRangeReference ()};};

// Bool is a boolean expression.
type Bool struct{_efe bool };var _cbcc =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_acbb :=[]string {};for _ccaab :=range _gebge {_acbb =append (_acbb ,_ccaab );};for _ddfe :=range _edbd {_acbb =append (_acbb ,_ddfe );};_d .Strings (_acbb );return _acbb ;};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _dfe ,_gaa float64 ;switch args [0].Type {case ResultTypeNumber :_gaa =args [0].ValueNumber ;case ResultTypeString :_dgec :=DateValue ([]Result {args [0]});if _dgec .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gaa =_dgec .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_dfe =args [1].ValueNumber ;if _dfe < 62&&_gaa >=62{_dfe --;};case ResultTypeString :_bafb :=DateValue ([]Result {args [1]});if _bafb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_dfe =_bafb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bcf :=float64 (int (_gaa -_dfe ));return MakeNumberResult (_bcf );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abfb :=args [0].ValueNumber ;if _abfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbfg :=args [1].ValueNumber ;if _cbfg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caac :=args [2].ValueNumber ;if _caac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_gc .Log10 (_caac )-_gc .Log10 (_cbfg ))/_gc .Log10 (1+_abfb ));};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bggg :=int (args [0].ValueNumber );return MakeBoolResult (_bggg ==_bggg /2*2);};func _dbb (){_gdd ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_dg .MustCompile ("\u005e"+_cgbg +_gbc );_gdd ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_dg .MustCompile ("\u005e"+_febc +_gbc );_gdd ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_dg .MustCompile ("\u005e"+_gec +_gbc );_gdd ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_dg .MustCompile ("\u005e"+_ecb +_gbc );_dca ["\u0068\u0068"]=_dg .MustCompile (_cbg +_dgee +"\u0024");_dca ["\u0068\u0068\u003am\u006d"]=_dg .MustCompile (_cbg +_afge +"\u0024");_dca ["\u006d\u006d\u003as\u0073"]=_dg .MustCompile (_cbg +_eec +"\u0024");_dca ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_dg .MustCompile (_cbg +_cec +"\u0024");_dab =[]*_dg .Regexp {_dg .MustCompile ("\u005e"+_cgbg +"\u0024"),_dg .MustCompile ("\u005e"+_febc +"\u0024"),_dg .MustCompile ("\u005e"+_gec +"\u0024"),_dg .MustCompile ("\u005e"+_ecb +"\u0024")};_fafd =[]*_dg .Regexp {_dg .MustCompile ("\u005e"+_dgee +"\u0024"),_dg .MustCompile ("\u005e"+_afge +"\u0024"),_dg .MustCompile ("\u005e"+_eec +"\u0024"),_dg .MustCompile ("\u005e"+_cec +"\u0024")};};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cfaad NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_beddg :=ctx .NamedRange (_cfaad ._baba );_gfgcd :=_beddg .Value ;if _afdc ,_aecda :=ev .GetFromCache (_gfgcd );_aecda {return _afdc ;};_dfcdd :=_f .Split (_gfgcd ,"\u0021");if len (_dfcdd )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_gfgcd ));};_bgbac :=ctx .Sheet (_dfcdd [0]);_fdbbg :=_f .Split (_dfcdd [1],"\u003a");switch len (_fdbbg ){case 1:_dceg :=ev .Eval (_bgbac ,_fdbbg [0]);ev .SetCache (_gfgcd ,_dceg );return _dceg ;case 2:_gccb :=_geebg (_bgbac ,ev ,_fdbbg [0],_fdbbg [1]);ev .SetCache (_gfgcd ,_gccb );return _gccb ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_beddg .Type ));};const _dbfcfe =57352;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fgc :=args [0];switch _fgc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_daff :=_be (_fgc .ValueNumber );return MakeNumberResult (float64 (_daff .Day ()));case ResultTypeString :_edf :=_f .ToLower (_fgc .ValueString );if !_ccf (_edf ){_ ,_ ,_ ,_ ,_ebad ,_gcf :=_feg (_edf );if _gcf .Type ==ResultTypeError {_gcf .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _gcf ;};if _ebad {return MakeNumberResult (0);};};_ ,_ ,_dff ,_ ,_cbe :=_dafb (_edf );if _cbe .Type ==ResultTypeError {return _cbe ;};return MakeNumberResult (float64 (_dff ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_fdag :=_bagfe (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _fdag .Type !=ResultTypeEmpty {return _fdag ;};_feefg :=_bbbg (args [1:]);_afgce :=0.0;_bebb :=_bdbg (args [0]);for _ ,_bgdba :=range _feefg {_afgce +=_bebb [_bgdba ._becd ][_bgdba ._facb ].ValueNumber ;};return MakeNumberResult (float64 (_afgce ));};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _daac (_ffcf []Result ,_cbef string )(*cumulArgs ,Result ){if len (_ffcf )!=6{return nil ,MakeErrorResult (_cbef +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ffcf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbef +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_defg :=_ffcf [0].ValueNumber ;if _defg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ffcf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbef +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fdgc :=_ffcf [1].ValueNumber ;if _fdgc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _ffcf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbef +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cced :=_ffcf [2].ValueNumber ;if _cced <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ffcf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbef +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_becbc :=_ffcf [3].ValueNumber ;if _becbc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ffcf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbef +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfad :=_ffcf [4].ValueNumber ;if _gfad <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _gfad < _becbc {return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _gfad > _fdgc {return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_fag :=int (_ffcf [5].ValueNumber );if _fag !=0&&_fag !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbef +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_defg ,_fdgc ,_cced ,_becbc ,_gfad ,_fag },_afc ;};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_gbeba :=len (args );if _gbeba !=4&&_gbeba !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_beba :=args [0].ValueNumber ;if _beba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdc :=args [1].ValueNumber ;if _ecdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgg :=args [2].ValueNumber ;if _fgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbb :=args [3].ValueNumber ;if _fbb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _fbb > _fgg {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_aeee :=2.0;if _gbeba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeee =args [4].ValueNumber ;if _aeee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_fcagf (_beba ,_ecdc ,_fgg ,_fbb ,_aeee ));};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_abb :data }};func _ccf (_fdc string )bool {for _ ,_gcfd :=range _dab {_bfaa :=_gcfd .FindStringSubmatch (_fdc );if len (_bfaa )> 1{return true ;};};return false ;};const _bcdba =57369;type couponArgs struct{_eedda float64 ;_daga float64 ;_aegc int ;_gbg int ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func (_ebeb Result )String ()string {return _ebeb .Value ()};

// Reference returns a string reference value to a range.
func (_gcdbb Range )Reference (ctx Context ,ev Evaluator )Reference {_adab :=_gcdbb ._eccea .Reference (ctx ,ev );_ffeb :=_gcdbb ._eggec .Reference (ctx ,ev );if _adab .Type ==ReferenceTypeCell &&_ffeb .Type ==ReferenceTypeCell {return MakeRangeReference (_cdge (_adab ,_ffeb ));};return ReferenceInvalid ;};func _fbaa (_ffcb []Result ,_eebfc bool )Result {var _fgab string ;if _eebfc {_fgab ="\u004c\u0041\u0052G\u0045";}else {_fgab ="\u0053\u004d\u0041L\u004c";};if len (_ffcb )!=2{return MakeErrorResult (_fgab +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bggdf :=_ffcb [0];var _edad [][]Result ;switch _bggdf .Type {case ResultTypeArray :_edad =_bggdf .ValueArray ;case ResultTypeList :_edad =[][]Result {_bggdf .ValueList };default:return MakeErrorResult (_fgab +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_edad )==0{return MakeErrorResult (_fgab +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _ffcb [1].Type !=ResultTypeNumber {return MakeErrorResult (_fgab +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ddceb :=_ffcb [1].ValueNumber ;if _ddceb < 1{return MakeErrorResultType (ErrorTypeNum ,_fgab +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gabg :=int (_ddceb );if float64 (_gabg )!=_ddceb {return MakeErrorResultType (ErrorTypeNum ,_fgab +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ececg :=[]float64 {};for _ ,_dfdd :=range _edad {for _ ,_gddf :=range _dfdd {if _gddf .Type ==ResultTypeNumber {_ececg =append (_ececg ,_gddf .ValueNumber );};};};if _gabg > len (_ececg ){return MakeErrorResultType (ErrorTypeNum ,_fgab +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cfdd :=_fc .MergeSort (_ececg );if _eebfc {return MakeNumberResult (_cfdd [len (_cfdd )-_gabg ]);}else {return MakeNumberResult (_cfdd [_gabg -1]);};};func _bdef (_facae string ,_bcbdg []Result )(*parsedReplaceObject ,Result ){if len (_bcbdg )!=4{return nil ,MakeErrorResult (_facae +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bcbdg [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_facae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dccec :=_bcbdg [0].ValueString ;if _bcbdg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_facae +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_cbgdf :=int (_bcbdg [1].ValueNumber )-1;if _bcbdg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_facae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_eabfbb :=int (_bcbdg [2].ValueNumber );if _bcbdg [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_facae +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_baea :=_bcbdg [3].ValueString ;return &parsedReplaceObject {_dccec ,_cbgdf ,_eabfbb ,_baea },_afc ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _agea (args ,_aedbe )};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Error is an error expression.
type Error struct{_aab string };

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ebda ,_ccab :=_bdaf (args ,false );if _ccab ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_ebda /_ccab );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_faca :=args [0];if _faca .Type !=ResultTypeArray &&_faca .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bddd :=_cecbda (args [1]);_ggea :=0;for _ ,_edec :=range _bdbg (_faca ){for _ ,_adbc :=range _edec {if _dbfcg (_adbc ,_bddd ){_ggea ++;};};};return MakeNumberResult (float64 (_ggea ));};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eefb :=args [0].Ref ;if _eefb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_effd ,_dbde :=_bd .ParseCellReference (_eefb .Value );if _dbde !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_eefb .Value );};return MakeNumberResult (float64 (_effd .ColumnIdx +1));};const _cgcc =57374;

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbgg :=0;_bbaa :=false ;for _ ,_dage :=range args {switch _dage .Type {case ResultTypeList ,ResultTypeArray :_dbcac :=Xor (_dage .ListValues ());if _dbcac .Type ==ResultTypeError {return _dbcac ;};if _dbcac .ValueNumber !=0{_efbgg ++;};_bbaa =true ;case ResultTypeNumber :if _dage .ValueNumber !=0{_efbgg ++;};_bbaa =true ;case ResultTypeString :case ResultTypeError :return _dage ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_bbaa {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_efbgg %2!=0);};type durationArgs struct{_fgfg float64 ;_ebb float64 ;_dgecb float64 ;_degc float64 ;_cege float64 ;_bgcg int ;};

// String returns a string representation of a horizontal range.
func (_ddebe HorizontalRange )String ()string {return _ddebe .horizontalRangeReference ()};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ccbe :=int (args [0].ValueNumber );if _ccbe < 0||_ccbe >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _ccbe <=1899{_ccbe +=1900;};_bfe :=_dge .Month (args [1].ValueNumber );_bff :=int (args [2].ValueNumber );_gaag :=_fbga (_ccbe ,_bfe ,_bff );_cfc :=_cfbf (_cda ,_gaag )+1;if _cfc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_cfc );};const _dgee ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";func LexReader (r _ab .Reader )chan *node {_fgacb :=NewLexer ();go _fgacb .lex (r );return _fgacb ._ebcgb };const _eeae =57355;const _egegd =57358;type cumulArgs struct{_dbed float64 ;_agfg float64 ;_edfc float64 ;_eabb float64 ;_bbeb float64 ;_debb int ;};var _cfdc =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ebcgb chan *node ;_beeef _fe .Mutex ;_bfdba []chan *node ;_ebgc []*node ;};func (_becf *plex )Lex (lval *yySymType )int {_dcgd =true ;_ddfbf :=<-_becf ._fbdg ;if _ddfbf !=nil {lval ._ggebb =_ddfbf ;return int (lval ._ggebb ._fagf );};return 0;};

// Eval evaluates and returns a number.
func (_cffc Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_cffc ._daaa )};func _ddc (_eca int )int {if _eca < 1900{if _eca < 30{_eca +=2000;}else {_eca +=1900;};};return _eca ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_gdba ,_eadc :=_bdaf (args ,true );if _eadc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_gdba /_eadc );};type yyParserImpl struct{_cedec yySymType ;_ebbcc [_faef ]yySymType ;_cdba int ;};func _cac (_afe string ,_cc *_bg .UpdateQuery )string {_ffa ,_bfa :=_bd .ParseCellReference (_afe );if _bfa !=nil {return "\u0023\u0052\u0045F\u0021";};if _cc .UpdateType ==_bg .UpdateActionRemoveColumn {_ac :=_cc .ColumnIdx ;_ggf :=_ffa .ColumnIdx ;if _ggf < _ac {return _afe ;}else if _ggf ==_ac {return "\u0023\u0052\u0045F\u0021";}else {return _ffa .Update (_bg .UpdateActionRemoveColumn ).String ();};};return _afe ;};const _cfbe =57371;func NewLexer ()*Lexer {return &Lexer {_ebcgb :make (chan *node )}};type Reference struct{Type ReferenceType ;Value string ;};const _fceeb ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Eval evaluates and returns an expression with prefix.
func (_dafbf PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_feaac :=_dafbf ._baab .Reference (ctx ,ev );switch _feaac .Type {case ReferenceTypeSheet :if _cfcef (_feaac ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_feaac .Value ));};_ddgacg :=ctx .Sheet (_feaac .Value );return _dafbf ._ecagf .Eval (_ddgacg ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_feaac .Type ));};};func _be (_gcd float64 )_dge .Time {_cefb :=int64 ((_gcd -_acf )*_ace );return _dge .Unix (0,_cefb ).UTC ();};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_aaeff ,_edefc ,_fbfa :=_bcbg (args );if _fbfa .Type ==ResultTypeError {return _fbfa ;};return MakeNumberResult (_fbgag (_aaeff )/_edefc );};const _effg int =0;func (_egabc *noCache )GetFromCache (key string )(Result ,bool ){return _afc ,false };var _gdcea =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _dag =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _dcbb (){_fbgce =_dg .MustCompile ("\u005e\u0030\u002b\u0024");_cgcg =_dg .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_gdge =_dg .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_dfed =_dg .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_ceccb =_dg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_gebb =_dg .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cegd =_dg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_ddad =_dg .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_egea =_dg .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_ecfa =_dg .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_cbfad =_dg .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_abdf =_dg .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ecdea +_ecdea +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_ecdea +_ecdea +"\u0029\u002b\u0059+\u0024");_geba =_dg .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_ecdea +_ecdea +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_ecdea +_ecdea +"\u0029\u002b\u0059+\u0024");_bfgf =_dg .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_degb =_dg .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ag ,_af Expression ;_fa BinOpType ;};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_efbf :=len (args );if _efbf ==0||_efbf > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ebae :=_bdbg (args [0]);_bgg :=[]float64 {};for _ ,_bfgc :=range _ebae {for _ ,_daec :=range _bfgc {if _daec .Type ==ResultTypeNumber &&!_daec .IsBoolean {_bgg =append (_bgg ,_daec .ValueNumber );};};};_ged :=len (_bgg );if len (_bgg )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_edbe :=0.1;if _efbf ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_edbe =args [1].ValueNumber ;if _edbe <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_gdcf :=[]float64 {};for _eaf :=0;_eaf < _ged ;_eaf ++{if _eaf ==0{_gdcf =append (_gdcf ,0);}else {_gdcf =append (_gdcf ,_gdcf [_eaf -1]+365);};};return _cff (_bgg ,_gdcf ,_edbe );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbag :=args [0];if _bbag .Type !=ResultTypeArray &&_bbag .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ffecb :=_bdbg (_bbag );_cabbg :=args [2];if _cabbg .Type !=ResultTypeArray &&_cabbg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdfd :=_bdbg (_cabbg );_eafa :=_cecbda (args [1]);_cbbbd :=0.0;for _dafdd ,_cfdb :=range _ffecb {for _fcedg ,_ecaa :=range _cfdb {if _dbfcg (_ecaa ,_eafa ){_cbbbd +=_abdfd [_dafdd ][_fcedg ].ValueNumber ;};};};return MakeNumberResult (_cbbbd );};

// GetEpoch returns a null time object for the invalid reference context.
func (_fgdb *ivr )GetEpoch ()_dge .Time {return _dge .Time {}};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ebcg ,_dbba :=_fbda (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _dbba .Type ==ResultTypeError {return _dbba ;};_adcbf :=_ebcg ._fgfg ;_degaa :=_ebcg ._ebb ;_efba :=_ebcg ._dgecb ;_daab :=_ebcg ._degc ;_dec :=_ebcg ._cege ;_fcg :=_ebcg ._bgcg ;return _fadg (_adcbf ,_degaa ,_efba ,_daab ,_dec ,_fcg );};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_eacde :=args [0].ValueNumber ;if _eacde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_bbca :=float64 (int (args [1].ValueNumber ));if _bbca < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_gc .Pow (_eacde +1,1/_bbca )-1)*_bbca );};

// Value returns a string version of the result.
func (_accde Result )Value ()string {switch _accde .Type {case ResultTypeNumber :_ebef :=_e .FormatFloat (_accde .ValueNumber ,'f',-1,64);if len (_ebef )> 12{_bccbd :=12;for _fefe :=_bccbd ;_fefe > 0&&_ebef [_fefe ]=='0';_fefe --{_bccbd --;};_ebef =_ebef [0:_bccbd +1];};return _ebef ;case ResultTypeError :return _accde .ValueString ;case ResultTypeString :return _accde .ValueString ;case ResultTypeList :if len (_accde .ValueList )==0{return "";};return _accde .ValueList [0].Value ();case ResultTypeArray :if len (_accde .ValueArray )==0||len (_accde .ValueArray [0])==0{return "";};return _accde .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};const _bcabd =57378;const _dcbc int =30;

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_eeag .Lock ();defer _eeag .Unlock ();if _ ,_bbga :=_edbd [name ];_bbga {_dd .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_edbd [name ]=fn ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgbd :=args [0].AsString ();_aaeae :=args [1].AsString ();if _fgbd .Type !=ResultTypeString ||_aaeae .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_fgbd .ValueString ==_aaeae .ValueString );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_cffbc :=args [0].AsNumber ();if _cffbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_gcdb :=int (_cffbc .ValueNumber );_aggc :=make ([][]Result ,0,_gcdb );for _gbbae :=0;_gbbae < _gcdb ;_gbbae ++{_abeb :=make ([]Result ,_gcdb );for _aadcf :=0;_aadcf < _gcdb ;_aadcf ++{if _gbbae ==_aadcf {_abeb [_aadcf ]=MakeNumberResult (1.0);}else {_abeb [_aadcf ]=MakeNumberResult (0.0);};};_aggc =append (_aggc ,_abeb );};return MakeArrayResult (_aggc );};const _ceee =57368;

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_dggga PrefixVerticalRange )Update (q *_bg .UpdateQuery )Expression {if q .UpdateType ==_bg .UpdateActionRemoveColumn {_aceb :=_dggga ;_egdfa :=_dggga ._dabf .String ();if _egdfa ==q .SheetToUpdate {_bfef :=q .ColumnIdx ;_aceb ._bfgce =_aec (_dggga ._bfgce ,_bfef );_aceb ._ccecb =_aec (_dggga ._ccecb ,_bfef );};return _aceb ;};return _dggga ;};var _aadcg =[...]struct{_aaga int ;_aefc int ;_aegcg string ;}{};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_dacb :=_f .Split (v ,"\u003a");if len (_dacb )!=2{return nil ;};_fedb ,_ :=_e .Atoi (_dacb [0]);_eeefa ,_ :=_e .Atoi (_dacb [1]);if _fedb > _eeefa {_fedb ,_eeefa =_eeefa ,_fedb ;};return PrefixHorizontalRange {_ffbb :pfx ,_afced :_fedb ,_agae :_eeefa };};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_egec :=len (args );if _egec !=4&&_egec !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fdae ,_cafc ,_ccbb :=_fead (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _ccbb .Type ==ResultTypeError {return _ccbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eggd :=args [2].ValueNumber ;if _eggd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bbcfg :=args [3].ValueNumber ;if _bbcfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affg :=0;if _egec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affg =int (args [4].ValueNumber );if !_bdaa (_affg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_dffe ,_ccbb :=_bfaf (_fdae ,_cafc ,_affg );if _ccbb .Type ==ResultTypeError {return _ccbb ;};return MakeNumberResult (_eggd /(1-_bbcfg *_dffe ));};func (_bafga node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_bafga ._fagf ,_cfga (string (_bafga ._cbfc )));};

// String returns a string representation for Negate.
func (_eadca Negate )String ()string {return "\u002d"+_eadca ._gfgaa .String ()};const _aeaac int =30;

// Reference returns a string reference value to a vertical range with prefix.
func (_ebeab PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_eaacfb :=_ebeab ._dabf .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_ebeab .verticalRangeReference (_eaacfb .Value )};};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_eeag .Lock ();defer _eeag .Unlock ();if _ ,_dcbbe :=_gebge [name ];_dcbbe {_dd .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_gebge [name ]=fn ;};func _aec (_dcb string ,_aeg uint32 )string {_gdf :=_bd .ColumnToIndex (_dcb );if _gdf ==_aeg {return "\u0023\u0052\u0045F\u0021";}else if _gdf > _aeg {return _bd .IndexToColumn (_gdf -1);}else {return _dcb ;};};type yyLexer interface{Lex (_fgafb *yySymType )int ;Error (_aggdb string );};

// Update returns the same object as updating sheet references does not affect String.
func (_gbad String )Update (q *_bg .UpdateQuery )Expression {return _gbad };var _fafd =[]*_dg .Regexp {};func _febb (_gdece _dge .Time )bool {return _dge .Now ().Sub (_gdece )>=_bfde };

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_fffgf ,_dcgdb ,_aagd :=_dgcg (from ,to );if _aagd !=nil {_dd .Log (_aagd .Error ());return NewError (_aagd .Error ());};return PrefixRangeExpr {_fbegbb :pfx ,_cfgad :_fffgf ,_bdcac :_dcgdb };};const _acbf =57367;type ivr struct{};func _bdaa (_gcad int )bool {return _gcad >=0&&_gcad <=4};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_fbgcc ,_fgdbe string };

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fddd :=args [0];switch _fddd .Type {case ResultTypeError :return _fddd ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_fddd .ValueNumber !=0);};if _fddd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _afbc (args );case ResultTypeArray :return _cgea (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_aaecc :=args [0].AsString ();if _aaecc .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gffee :=args [1].AsNumber ();if _gffee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _gffee .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _gffee .ValueNumber ==0{return MakeStringResult ("");};_gdbg :=_b .Buffer {};for _gfdbf :=0;_gfdbf < int (_gffee .ValueNumber );_gfdbf ++{_gdbg .WriteString (_aaecc .ValueString );};return MakeStringResult (_gdbg .String ());};var _gdfeg =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abaa :=args [0].AsNumber ();if _abaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _abaa .ValueNumber < 0{return MakeNumberResult (-1);}else if _abaa .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// IsBool returns false for the invalid reference context.
func (_bcbgg *ivr )IsBool (cellRef string )bool {return false };

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_f .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_dcgg :v };};const _eccfd =57364;

// GetWidth returns 0 for the invalid reference context.
func (_dfef *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agge :=args [0].ValueNumber ;_ceg :=args [1].ValueNumber ;_cgf :=args [2].ValueNumber ;_abae :=_cbed (_agge ,_ceg ,_cgf );if _abae >=0{return MakeNumberResult (_abae );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Reference returns an invalid reference for String.
func (_gefgc String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _ecabg =[...]int {1};

// CellRef is a reference to a single cell
type CellRef struct{_cf string };func _eda (_cggf ,_fec ,_efa int )bool {if _fec < 1||_fec > 12{return false ;};if _efa < 1{return false ;};return _efa <=_fba (_cggf ,_fec );};

// Update updates references in the Range after removing a row/column.
func (_agaea Range )Update (q *_bg .UpdateQuery )Expression {_ddbff :=_agaea ;if q .UpdateCurrentSheet {_ddbff ._eccea =_agaea ._eccea .Update (q );_ddbff ._eggec =_agaea ._eggec .Update (q );};return _ddbff ;};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdbdgc :=args [0].AsNumber ();_egaec :=args [1].AsNumber ();_abgae :=args [2].AsNumber ();_edfe :=args [3].ListValues ();if _gdbdgc .Type !=ResultTypeNumber ||_egaec .Type !=ResultTypeNumber ||_abgae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_ggcgg :=float64 (0);for _ggeb ,_daecb :=range _edfe {_ggcgg +=_daecb .ValueNumber *_gc .Pow (_gdbdgc .ValueNumber ,_egaec .ValueNumber +float64 (_ggeb )*_abgae .ValueNumber );};return MakeNumberResult (_ggcgg );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_gba :=len (args );if _gba !=4&&_gba !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfbb :=args [0].ValueNumber ;if _gfbb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgca :=args [1].ValueNumber ;if _cgca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgdc :=args [2].ValueNumber ;if _dgdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcfbg :=args [3].ValueNumber ;if _bcfbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _bcfbg -_dgdc > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_ceadf :=12.0;if _gba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceadf =args [4].ValueNumber ;if _ceadf < 1||_ceadf > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _ceadf ==12&&_bcfbg > _dgdc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _cgca >=_gfbb {return MakeNumberResult (0);};_bdeb :=1-_gc .Pow (_cgca /_gfbb ,1/_dgdc );_bdeb =float64 (int (_bdeb *1000+0.5))/1000;_agcd :=_gfbb *_bdeb *_ceadf /12;if _bcfbg ==1{return MakeNumberResult (_agcd );};_gcgc :=_agcd ;_cefg :=0.0;_ecd :=_dgdc ;if _ecd > _bcfbg {_ecd =_bcfbg ;};for _dgbb :=2.0;_dgbb <=_ecd ;_dgbb ++{_cefg =(_gfbb -_gcgc )*_bdeb ;_gcgc +=_cefg ;};if _bcfbg > _dgdc {return MakeNumberResult ((_gfbb -_gcgc )*_bdeb *(12-_ceadf )/12);};return MakeNumberResult (_cefg );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_fbgg string };func _defae ()yyParser {return &yyParserImpl {}};

// SetLocked does nothing for the invalid reference context.
func (_dcca *ivr )SetLocked (cellRef string ,locked bool ){};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bcda :=args [0];if _bcda .Type !=ResultTypeArray &&_bcda .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fegc :=_bcda .ValueArray ;if len (_fegc )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_fegc )));};const _cec ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Eval evaluates a vertical range returning a list of results or an error.
func (_dccf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_caga :=_dccf .verticalRangeReference ();if _dfbc ,_gcbgb :=ev .GetFromCache (_caga );_gcbgb {return _dfbc ;};_ddcfa ,_egdd :=_cfafb (ctx ,_dccf ._fbgcc ,_dccf ._fgdbe );_adbb :=_geebg (ctx ,ev ,_ddcfa ,_egdd );ev .SetCache (_caga ,_adbb );return _adbb ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfbd :=args [0].AsNumber ();if _bfbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gaadc :=float64 (1);if _bfbd .ValueNumber < 0{_gaadc =-1;};if len (args )> 1{_ffdb :=args [1].AsNumber ();if _ffdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gaadc =_ffdb .ValueNumber ;};_cgfg :=float64 (1);if len (args )> 2{_bbfd :=args [2].AsNumber ();if _bbfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_cgfg =_bbfd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gc .Ceil (_bfbd .ValueNumber ));};_fffc :=_bfbd .ValueNumber ;_fffc ,_abbgc :=_gc .Modf (_fffc /_gaadc );if _abbgc !=0{if _bfbd .ValueNumber > 0{_fffc ++;}else if _cgfg < 0{_fffc --;};};return MakeNumberResult (_fffc *_gaadc );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Update updates references in the VerticalRange after removing a row/column.
func (_eddaa VerticalRange )Update (q *_bg .UpdateQuery )Expression {if q .UpdateType ==_bg .UpdateActionRemoveColumn {_befa :=_eddaa ;if q .UpdateCurrentSheet {_abca :=q .ColumnIdx ;_befa ._fbgcc =_aec (_eddaa ._fbgcc ,_abca );_befa ._fgdbe =_aec (_eddaa ._fgdbe ,_abca );};return _befa ;};return _eddaa ;};func (_gfdba VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_gfdba ._fbgcc ,_gfdba ._fgdbe );};

// Update updates references in the Negate after removing a row/column.
func (_eabe Negate )Update (q *_bg .UpdateQuery )Expression {return Negate {_gfgaa :_eabe ._gfgaa .Update (q )};};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fee :=_f .ToLower (args [0].ValueString );if !_ccf (_fee ){_ ,_ ,_ ,_ ,_bde ,_eced :=_feg (_fee );if _eced .Type ==ResultTypeError {_eced .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _eced ;};if _bde {return MakeNumberResult (0);};};_dda ,_gfg ,_bb ,_ ,_geg :=_dafb (_fee );if _geg .Type ==ResultTypeError {return _geg ;};return MakeNumberResult (_cde (_dda ,_gfg ,_bb ));};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gaae :=args [0];if _gaae .Type !=ResultTypeArray &&_gaae .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bcgc :=_gaae .ValueArray ;if len (_bcgc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_bcgc [0])));};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bace :=args [0].Ref ;for _bace .Type ==ReferenceTypeNamedRange {_bace =ctx .NamedRange (_bace .Value );};_ffab :="";switch _bace .Type {case ReferenceTypeCell :_ffab =_bace .Value ;case ReferenceTypeRange :_abcgb :=_f .Split (_bace .Value ,"\u003a");if len (_abcgb )==2{_ffab =_abcgb [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bace .Type ));};_cfce ,_gcgcg :=_bd .ParseCellReference (_ffab );if _gcgcg !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gcgcg .Error ()));};_bceb ,_egfg ,_cffe :=_cfce .Column ,_cfce .RowIdx ,_cfce .SheetName ;_cadb :=args [1].AsNumber ();if _cadb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_fggb :=args [2].AsNumber ();if _fggb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _egcg ,_gdca Result ;if len (args )==3{_egcg =MakeNumberResult (1);_gdca =MakeNumberResult (1);}else {_egcg =args [3].AsNumber ();if _egcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _egcg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gdca =args [4].AsNumber ();if _gdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gdca .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_bdbfe :=_bd .ColumnToIndex (_bceb );_ebba :=_egfg +uint32 (_cadb .ValueNumber );_cafa :=_bdbfe +uint32 (_fggb .ValueNumber );_efgc :=_ebba +uint32 (_egcg .ValueNumber );_bcgcf :=_cafa +uint32 (_gdca .ValueNumber );if _egcg .ValueNumber > 0{_efgc --;}else {_efgc ++;_ebba ,_efgc =_efgc ,_ebba ;};if _gdca .ValueNumber > 0{_bcgcf --;}else {_bcgcf ++;_cafa ,_bcgcf =_bcgcf ,_cafa ;};_fdeae :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_cafa ),_ebba );_eggf :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_bcgcf ),_efgc );if _cffe ==""{return _geebg (ctx ,ev ,_fdeae ,_eggf );}else {return _geebg (ctx .Sheet (_cffe ),ev ,_fdeae ,_eggf );};};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbea :=args [0].AsNumber ();if _bbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_gc .Pi *_bbea .ValueNumber );};func _agfe (_efafa ,_egaeg ,_cafba ,_cebg float64 ,_egdf int )float64 {var _eacf float64 ;if _efafa ==0{_eacf =_cebg +_cafba *_egaeg ;}else {_cbgd :=_gc .Pow (1+_efafa ,_egaeg );if _egdf ==1{_eacf =_cebg *_cbgd +_cafba *(1+_efafa )*(_cbgd -1)/_efafa ;}else {_eacf =_cebg *_cbgd +_cafba *(_cbgd -1)/_efafa ;};};return -_eacf ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fdfa ,_afdb :=_daac (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _afdb .Type ==ResultTypeError {return _afdb ;};_becb :=_fdfa ._dbed ;_efcb :=_fdfa ._agfg ;_ecae :=_fdfa ._edfc ;_cbcd :=_fdfa ._eabb ;_fdgb :=_fdfa ._bbeb ;_gbfb :=_fdfa ._debb ;_aadf :=_bca (_becb ,_efcb ,_ecae ,0,_gbfb );_ffda :=0.0;if _cbcd ==1{if _gbfb ==0{_ffda =-_ecae ;_cbcd ++;};};for _bbb :=_cbcd ;_bbb <=_fdgb ;_bbb ++{if _gbfb ==1{_ffda +=_agfe (_becb ,_bbb -2,_aadf ,_ecae ,1)-_aadf ;}else {_ffda +=_agfe (_becb ,_bbb -1,_aadf ,_ecae ,0);};};_ffda *=_becb ;return MakeNumberResult (_ffda );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ffdea :=args [0];if _ffdea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbbe :=int (_ffdea .ValueNumber );if _gbbe < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_gbbe {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gbbe ];};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbbe :=args [0];if _bbbe .Type ==ResultTypeList {_cbbbg :=[][]Result {};for _ ,_afca :=range _bbbe .ValueList {_cbbbg =append (_cbbbg ,[]Result {_afca });};return MakeArrayResult (_cbbbg );};_fbba :=make ([][]Result ,len (_bbbe .ValueArray [0]));for _ ,_ddcc :=range _bbbe .ValueArray {for _ffcab ,_afgef :=range _ddcc {_fbba [_ffcab ]=append (_fbba [_ffcab ],_afgef );};};return MakeArrayResult (_fbba );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _agea (args ,_ecaed )};const _gbbgc ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";const _bdcbc =57348;

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_fbegbb ,_cfgad ,_bdcac Expression };

// Update returns the same object as updating sheet references does not affect Number.
func (_fagg Number )Update (q *_bg .UpdateQuery )Expression {return _fagg };

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fffg ,_ggdd ,_efafe :=_fead (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _efafe .Type ==ResultTypeError {return _efafe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaea :=_ggdd -_fffg ;if _gaea > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_ccge :=args [2].ValueNumber ;if _ccge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feeed :=(100-_ccge )/_ccge ;_feaag :=360/_gaea ;return MakeNumberResult (_feeed *_feaag );};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_gc .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};func _geggd (_adfc ,_cded []float64 ,_cbda float64 )float64 {_gaad :=_cbda +1;_afadd :=_adfc [0];_abedd :=len (_adfc );_bebad :=_cded [0];for _gcaa :=1;_gcaa < _abedd ;_gcaa ++{_afadd +=_adfc [_gcaa ]/_gc .Pow (_gaad ,(_cded [_gcaa ]-_bebad )/365);};return _afadd ;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_dbaaf :=len (args );if _dbaaf !=4&&_dbaaf !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aebe ,_abaef ,_febg :=_fead (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _febg .Type ==ResultTypeError {return _febg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ceae :=args [2].ValueNumber ;if _ceae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fdga :=args [3].ValueNumber ;if _fdga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_cdcb :=0;if _dbaaf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdcb =int (args [4].ValueNumber );if !_bdaa (_cdcb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_gaaf ,_febg :=_bfaf (_aebe ,_abaef ,_cdcb );if _febg .Type ==ResultTypeError {return _febg ;};return MakeNumberResult (_fdga *(1-_ceae *_gaaf ));};var _bdgf =[...]uint8 {0,17,33,49,63,78,93,108};type plex struct{_fbdg chan *node ;_agbbe Expression ;_bdda string ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_baab Expression ;_ecagf Expression ;};var _fcec =[...]string {};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_bccgc :=len (args );if _bccgc < 4||_bccgc > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fceba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abdb :=args [1].ValueNumber ;if _abdb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcge :=args [2].ValueNumber ;if _fcge < _abdb {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fegb :=args [3].ValueNumber ;_fgafd :=0.0;if _bccgc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgafd =args [4].ValueNumber ;};_fdbf :=0;if _bccgc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdbf =int (args [5].ValueNumber );if _fdbf !=0{_fdbf =1;};};return MakeNumberResult (_bca (_fceba ,_fcge ,_fegb ,_fgafd ,_fdbf )-_fegd (_fceba ,_abdb ,_fcge ,_fegb ,_fgafd ,_fdbf ));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gcef :=_f .ToLower (args [0].ValueString );if !_gdad (_gcef ){_ ,_ ,_ ,_agdb ,_gced :=_dafb (_gcef );if _gced .Type ==ResultTypeError {_gced .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _gced ;};if _agdb {return MakeNumberResult (0);};};_ebdd ,_ccdd ,_efaa ,_fgaf ,_ ,_abbb :=_feg (_gcef );if _abbb .Type ==ResultTypeError {return _abbb ;};_agaf :=_cbed (float64 (_ebdd ),float64 (_ccdd ),_efaa );if _fgaf {_agaf +=0.5;}else if _agaf >=1{_agaf -=float64 (int (_agaf ));};return MakeNumberResult (_agaf );};func _cbac (_gdaba ,_fabf ,_dffg ,_ebee ,_fcfd ,_dgge float64 )float64 {var _eagc ,_fgfc float64 ;_gfaef :=0.0;_eebf :=_gc .Ceil (_fcfd );_fcbg :=_gdaba -_fabf ;_gffac :=false ;_bddb :=0.0;for _aacb :=1.0;_aacb <=_eebf ;_aacb ++{if !_gffac {_eagc =_fcagf (_gdaba ,_fabf ,_dffg ,_aacb ,_dgge );_bddb =_fcbg /(_dffg -_aacb +1);if _bddb > _eagc {_fgfc =_bddb ;_gffac =true ;}else {_fgfc =_eagc ;_fcbg -=_eagc ;};}else {_fgfc =_bddb ;};if _aacb ==_eebf {_fgfc *=_fcfd +1-_eebf ;};_gfaef +=_fgfc ;};return _gfaef ;};const _cbea =57366;func _cfbf (_eedd ,_ffe int64 )float64 {return float64 (int (0.5+float64 ((_ffe -_eedd )/86400)))};func _feef (_fedf [][]Result ,_bacg int )[][]Result {_bagba :=[][]Result {};for _ceaa :=range _fedf {if _ceaa ==0{continue ;};_abfa :=[]Result {};for _aaag :=range _fedf {if _aaag ==_bacg {continue ;};_abfa =append (_abfa ,_fedf [_ceaa ][_aaag ]);};_bagba =append (_bagba ,_abfa );};return _bagba ;};var InvalidReferenceContext =&ivr {};

// String returns a string representation of a range with prefix.
func (_agddc PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_agddc ._fbegbb .String (),_agddc ._cfgad .String (),_agddc ._bdcac .String ());};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbag :=args [0].AsString ();if _fbag .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_fbag .ValueString ,ev );};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bbed :=args [0];if _bbed .Type !=ResultTypeNumber &&_bbed .Type !=ResultTypeString &&_bbed .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_egadc :=args [1].ValueString ;switch _bbed .Type {case ResultTypeNumber :return MakeStringResult (_ef .Number (_bbed .ValueNumber ,_egadc ));case ResultTypeString :return MakeStringResult (_ef .String (_bbed .ValueString ,_egadc ));case ResultTypeEmpty :return MakeStringResult (_ef .Number (0,_egadc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _aca (_gdc ,_fafaa float64 ,_geeec ,_fcea int )(float64 ,Result ){_geca ,_bbcg :=_be (_gdc ),_be (_fafaa );if _bbcg .After (_geca ){_gad :=_aag (_geca ,_bbcg ,_geeec ,_fcea );_aedg :=(_bbcg .Year ()-_gad .Year ())*12+int (_bbcg .Month ())-int (_gad .Month ());return float64 (_aedg *_geeec )/12.0,_afc ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};type Expression interface{Eval (_dcf Context ,_gga Evaluator )Result ;Reference (_bge Context ,_fefb Evaluator )Reference ;String ()string ;Update (_fcd *_bg .UpdateQuery )Expression ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_fef BinaryExpr )Update (q *_bg .UpdateQuery )Expression {_ffd :=_fef ;_ffd ._ag =_fef ._ag .Update (q );_ffd ._af =_fef ._af .Update (q );return _ffd ;};func _dbfcg (_dgaf Result ,_ggefb *criteriaParsed )bool {if _dgaf .IsBoolean {return false ;};_bgfb :=_dgaf .Type ;if _ggefb ._agcea {return _bgfb ==ResultTypeNumber &&_dgaf .ValueNumber ==_ggefb ._gaed ;}else if _bgfb ==ResultTypeNumber {return _acaa (_dgaf .ValueNumber ,_ggefb ._gbdc );};return _geagc (_dgaf ,_ggefb );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_cbc Context ,formula string )Result ;SetCache (_gae string ,_afg Result );GetFromCache (_feaf string )(Result ,bool );LastEvalIsRef ()bool ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cbbb :=_dge .Now ();_ ,_geee :=_cbbb .Zone ();_eed :=_acf +float64 (_cbbb .Unix ()+int64 (_geee ))/86400;return MakeNumberResult (_eed );};

// LastColumn returns empty string for the invalid reference context.
func (_eefbf *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fgge :=ctx .GetEpoch ();_fgbf ,_fbfbg :=_faaf (args [0].Value (),_fgge );if _fbfbg !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_badc :=_fgbf .Year ();return MakeBoolResult (_aeb (_badc ));};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_deed *ivr )GetLabelPrefix (cellRef string )string {return ""};const _ebdeg =57356;func _agea (_afag []Result ,_defaa rmode )Result {if len (_afag )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcaaf :=_afag [0].AsNumber ();if _bcaaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdca :=_afag [1].AsNumber ();if _fdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_geef :=_fdca .ValueNumber ;_cdee :=_bcaaf .ValueNumber ;_egedg :=1.0;if _geef > 0{_egedg =_gc .Pow (1/10.0,_geef );}else {_egedg =_gc .Pow (10.0,-_geef );};_cdee ,_gcadc :=_gc .Modf (_cdee /_egedg );switch _defaa {case _ecaed :const _dafc =0.499999999;if _gcadc >=_dafc {_cdee ++;}else if _gcadc <=-_dafc {_cdee --;};case _aedbe :case _bgedd :if _gcadc > 0{_cdee ++;}else if _gcadc < 0{_cdee --;};};return MakeNumberResult (_cdee *_egedg );};func _bgaf (_gebg ,_aafd []string )[]string {for _ ,_fadf :=range _aafd {_gebg =append (_gebg ,_fadf );};return _gebg ;};func _ffc (_ec BinOpType ,_agb [][]Result ,_ece Result )Result {_fgf :=[][]Result {};for _ed :=range _agb {_bf :=_ee (_ec ,_agb [_ed ],_ece );if _bf .Type ==ResultTypeError {return _bf ;};_fgf =append (_fgf ,_bf .ValueList );};return MakeArrayResult (_fgf );};const _cbg ="\u005e\u0028\u0028"+_cgbg +"\u007c"+_febc +"\u007c"+_gec +"\u007c"+_ecb +"\u0029\u0020\u0029\u003f";

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_f .NewReader (s ));};type parsedSearchObject struct{_ecbgd string ;_ggce string ;_gceaa int ;};const _bfde =_dge .Millisecond *1000;

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_eeag .Lock ();defer _eeag .Unlock ();if _cgbe ,_cfcb :=_gebge [name ];_cfcb {return _cgbe ;};return nil ;};func _cdfe (_ddbfa Result )Result {if _ddbfa .Type ==ResultTypeEmpty {return _ddbfa ;};_adaa :=_ddbfa .AsString ();if _adaa .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _ddbfa .IsBoolean {if _adaa .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _adaa .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_f .ToLower (_adaa .ValueString ));};};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeeff :=int (args [0].ValueNumber );return MakeBoolResult (_aeeff !=_aeeff /2*2);};func (_fgfa Result )AsString ()Result {switch _fgfa .Type {case ResultTypeNumber :return MakeStringResult (_fgfa .Value ());default:return _fgfa ;};};const _gec ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aeff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdce :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aebb :=args [2].ValueNumber ;if _aebb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_aeff -_gdce )/_aebb );};func _ge (_bc BinOpType ,_ea ,_afd [][]Result )Result {_ceb :=[][]Result {};for _de :=range _ea {_dgeg :=_fbg (_bc ,_ea [_de ],_afd [_de ]);if _dgeg .Type ==ResultTypeError {return _dgeg ;};_ceb =append (_ceb ,_dgeg .ValueList );};return MakeArrayResult (_ceb );};

// String returns a string representation of Number.
func (_bbfe Number )String ()string {return _e .FormatFloat (_bbfe ._daaa ,'f',-1,64)};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Reference returns an invalid reference for EmptyExpr.
func (_cgad EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _dafb (_fdeb string )(int ,int ,int ,bool ,Result ){_cafb :="";_fbce :=[]string {};for _eaab ,_agbb :=range _gdd {_fbce =_agbb .FindStringSubmatch (_fdeb );if len (_fbce )> 1{_cafb =_eaab ;break ;};};if _cafb ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_ccg :=false ;var _bgba ,_ddaa ,_gce int ;var _eaac error ;switch _cafb {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_ddaa ,_eaac =_e .Atoi (_fbce [1]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_gce ,_eaac =_e .Atoi (_fbce [3]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_bgba ,_eaac =_e .Atoi (_fbce [5]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};if _bgba < 0||_bgba > 9999||(_bgba > 99&&_bgba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_bgba =_ddc (_bgba );_ccg =_fbce [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_ddaa =_dag [_fbce [1]];_gce ,_eaac =_e .Atoi (_fbce [14]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_bgba ,_eaac =_e .Atoi (_fbce [16]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};if _bgba < 0||_bgba > 9999||(_bgba > 99&&_bgba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_bgba =_ddc (_bgba );_ccg =_fbce [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_agfa ,_gff :=_e .Atoi (_fbce [1]);if _gff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_ebd ,_gff :=_e .Atoi (_fbce [3]);if _gff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_gaagf ,_gff :=_e .Atoi (_fbce [5]);if _gff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};if _agfa >=1900&&_agfa < 10000{_bgba =_agfa ;_ddaa =_ebd ;_gce =_gaagf ;}else if _agfa > 0&&_agfa < 13{_ddaa =_agfa ;_gce =_ebd ;_bgba =_gaagf ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_ccg =_fbce [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_bgba ,_eaac =_e .Atoi (_fbce [16]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_ddaa =_dag [_fbce [3]];_gce ,_eaac =_e .Atoi (_fbce [1]);if _eaac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};_ccg =_fbce [19]=="";};if !_eda (_bgba ,_ddaa ,_gce ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_afdg );};return _bgba ,_ddaa ,_gce ,_ccg ,_afc ;};func _geebg (_ffdebb Context ,_efafg Evaluator ,_cdeba ,_cbeda string )Result {_ccabe ,_cfec :=_bd .ParseCellReference (_cdeba );if _cfec !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cdeba ,_cfec .Error ()));};_aaac ,_ecdaa :=_ccabe .ColumnIdx ,_ccabe .RowIdx ;_feab ,_dcbac :=_bd .ParseCellReference (_cbeda );if _dcbac !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cbeda ,_dcbac .Error ()));};_geabb ,_eagad :=_feab .ColumnIdx ,_feab .RowIdx ;_dagd :=[][]Result {};for _dccc :=_ecdaa ;_dccc <=_eagad ;_dccc ++{_eafff :=[]Result {};for _acgfb :=_aaac ;_acgfb <=_geabb ;_acgfb ++{_cdcbb :=_ffdebb .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_acgfb ),_dccc ),_efafg );_eafff =append (_eafff ,_cdcbb );};_dagd =append (_dagd ,_eafff );};if len (_dagd )==1{if len (_dagd [0])==1{return _dagd [0][0];};return MakeListResult (_dagd [0]);};return MakeArrayResult (_dagd );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_edc ,_cedc :=_ecag (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cedc .Type ==ResultTypeError {return _cedc ;};return MakeNumberResult (_agfc (_edc ._eedda ,_edc ._daga ,_edc ._aegc ,_edc ._gbg ));};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gcba PrefixHorizontalRange )Update (q *_bg .UpdateQuery )Expression {return _gcba };

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gabf :=len (args );if _gabf < 5||_gabf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bage :=args [0].ValueNumber ;if _bage < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfac :=args [1].ValueNumber ;if _dfac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecec :=args [2].ValueNumber ;if _ecec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ecec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbd :=args [3].ValueNumber ;if _bcbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfecc :=args [4].ValueNumber ;if _bcbd > _gfecc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _gfecc > _ecec {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_bcgf :=2.0;if _gabf > 5{if args [5].Type ==ResultTypeEmpty {_bcgf =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcgf =args [5].ValueNumber ;if _bcgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_aecb :=false ;if _gabf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_aecb =args [6].ValueNumber !=0;};_bgae :=0.0;_dbdg :=_gc .Floor (_bcbd );_bcgab :=_gc .Ceil (_gfecc );if _aecb {for _gede :=_dbdg +1;_gede <=_bcgab ;_gede ++{_dee :=_fcagf (_bage ,_dfac ,_ecec ,_gede ,_bcgf );if _gede ==_dbdg +1{_dee *=_gc .Min (_gfecc ,_dbdg +1)-_bcbd ;}else if _gede ==_bcgab {_dee *=_gfecc +1-_bcgab ;};_bgae +=_dee ;};}else {_aafef :=_ecec ;var _ffec float64 ;if !_bagbe (_bcbd ,_gc .Floor (_bcbd )){if _bcgf ==1{_aefd :=_ecec /2;if _bcbd > _aefd ||_bagbe (_bcbd ,_aefd ){_ffec =_bcbd -_aefd ;_bcbd =_aefd ;_gfecc -=_ffec ;_aafef ++;};};};if _bcgf !=0{_bage -=_cbac (_bage ,_dfac ,_ecec ,_aafef ,_bcbd ,_bcgf );};_bgae =_cbac (_bage ,_dfac ,_ecec ,_ecec -_bcbd ,_gfecc -_bcbd ,_bcgf );};return MakeNumberResult (_bgae );};func _afbc (_afbe []Result )Result {_gadd :=_afbe [0].ValueList ;_fdgcf :=len (_gadd );switch len (_afbe ){case 1:_aabc :=[]Result {};for _ ,_faecc :=range _gadd {_aabc =append (_aabc ,MakeBoolResult (_faecc .ValueNumber !=0));};return MakeListResult (_aabc );case 2:_fdec :=_afbe [1];switch _fdec .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_gbba :=[]Result {};for _ ,_gbd :=range _gadd {var _cbde Result ;if _gbd .ValueNumber ==0{_cbde =MakeBoolResult (false );}else {_cbde =_fdec ;};_gbba =append (_gbba ,_cbde );};return MakeListResult (_gbba );case ResultTypeList :_dcbg :=_gedd (_fdec ,_fdgcf );_eaggg :=[]Result {};for _bbdg ,_fabd :=range _gadd {var _gbcgc Result ;if _fabd .ValueNumber ==0{_gbcgc =MakeBoolResult (false );}else {_gbcgc =_dcbg [_bbdg ];};_eaggg =append (_eaggg ,_gbcgc );};return MakeListResult (_eaggg );case ResultTypeArray :_dggcd :=_ggcc (_fdec ,len (_fdec .ValueArray ),_fdgcf );_age :=[][]Result {};for _ ,_bccgb :=range _dggcd {_gdced :=[]Result {};for _deae ,_bfgfa :=range _gadd {var _cfad Result ;if _bfgfa .ValueNumber ==0{_cfad =MakeBoolResult (false );}else {_cfad =_bccgb [_deae ];};_gdced =append (_gdced ,_cfad );};_age =append (_age ,_gdced );};return MakeArrayResult (_age );};case 3:_eecd :=_afbe [1];_cbgf :=_afbe [2];_gbga :=_ffcff (_eecd );_ddf :=_ffcff (_cbgf );if _gbga &&_ddf {_fdab :=[]Result {};for _ ,_dgcd :=range _gadd {var _aeac Result ;if _dgcd .ValueNumber ==0{_aeac =_cbgf ;}else {_aeac =_eecd ;};_fdab =append (_fdab ,_aeac );};return MakeListResult (_fdab );};if _eecd .Type !=ResultTypeArray &&_cbgf .Type !=ResultTypeArray {_abfee :=_gedd (_eecd ,_fdgcf );_bfffd :=_gedd (_cbgf ,_fdgcf );_gddc :=[]Result {};for _cffb ,_eece :=range _gadd {var _abbba Result ;if _eece .ValueNumber ==0{_abbba =_bfffd [_cffb ];}else {_abbba =_abfee [_cffb ];};_gddc =append (_gddc ,_abbba );};return MakeListResult (_gddc );};_bgbed ,_gcbg :=len (_eecd .ValueArray ),len (_cbgf .ValueArray );_aefb ,_bgdf :=_bgbed ,_gcbg ;if _gcbg > _aefb {_aefb ,_bgdf =_bgdf ,_aefb ;};_feege :=_ggcc (_eecd ,_aefb ,_fdgcf );_ebge :=_ggcc (_cbgf ,_aefb ,_fdgcf );_ccgd :=[][]Result {};for _acbcc :=0;_acbcc < _aefb ;_acbcc ++{_bddf :=[]Result {};for _dcgf ,_bfb :=range _gadd {var _gcdd Result ;if _bfb .ValueNumber ==0{if _acbcc < _gcbg {_gcdd =_ebge [_acbcc ][_dcgf ];}else {_gcdd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _acbcc < _bgbed {_gcdd =_feege [_acbcc ][_dcgf ];}else {_gcdd =MakeErrorResultType (ErrorTypeNA ,"");};};_bddf =append (_bddf ,_gcdd );};_ccgd =append (_ccgd ,_bddf );};return MakeArrayResult (_ccgd );};return MakeErrorResult ("");};var _gebge =map[string ]Function {};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Eval evaluates and returns the result of a constant array expression.
func (_deg ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_adf :=[][]Result {};for _ ,_cdf :=range _deg ._abb {_cae :=[]Result {};for _ ,_cef :=range _cdf {_cae =append (_cae ,_cef .Eval (ctx ,ev ));};_adf =append (_adf ,_cae );};return MakeArrayResult (_adf );};func _bbcaf (_geebd ,_geabd Result ,_fceff ,_fbgc bool )cmpResult {_geebd =_geebd .AsNumber ();_geabd =_geabd .AsNumber ();if _geebd .Type !=_geabd .Type {return _cgfa ;};if _geebd .Type ==ResultTypeNumber {if _geebd .ValueNumber ==_geabd .ValueNumber {return _dbdcd ;};if _geebd .ValueNumber < _geabd .ValueNumber {return _agab ;};return _dcba ;};if _geebd .Type ==ResultTypeString {_aeba :=_geebd .ValueString ;_fffbf :=_geabd .ValueString ;if !_fceff {_aeba =_f .ToLower (_aeba );_fffbf =_f .ToLower (_fffbf );};if _fbgc {_cgbgd :=_dc .Match (_fffbf ,_aeba );if _cgbgd {return _dbdcd ;}else {return _dcba ;};};return cmpResult (_f .Compare (_aeba ,_fffbf ));};if _geebd .Type ==ResultTypeEmpty {return _dbdcd ;};if _geebd .Type ==ResultTypeList {if len (_geebd .ValueList )< len (_geabd .ValueList ){return _agab ;};if len (_geebd .ValueList )> len (_geabd .ValueList ){return _dcba ;};for _egbda :=range _geebd .ValueList {_cdcd :=_bbcaf (_geebd .ValueList [_egbda ],_geabd .ValueList [_egbda ],_fceff ,_fbgc );if _cdcd !=_dbdcd {return _cdcd ;};};return _dbdcd ;};if _geebd .Type ==ResultTypeList {if len (_geebd .ValueArray )< len (_geabd .ValueArray ){return _agab ;};if len (_geebd .ValueArray )> len (_geabd .ValueArray ){return _dcba ;};for _gaeg :=range _geebd .ValueArray {_bgbg :=_geebd .ValueArray [_gaeg ];_cebad :=_geebd .ValueArray [_gaeg ];if len (_bgbg )< len (_cebad ){return _agab ;};if len (_bgbg )> len (_cebad ){return _dcba ;};for _dgece :=range _bgbg {_cfcea :=_bbcaf (_bgbg [_dgece ],_cebad [_dgece ],_fceff ,_fbgc );if _cfcea !=_dbdcd {return _cfcea ;};};};return _dbdcd ;};return _cgfa ;};

// String returns a string representation of String.
func (_cgcgc String )String ()string {return "\u0022"+_cgcgc ._dcgg +"\u0022"};func (_dfcb PrefixHorizontalRange )horizontalRangeReference (_ddec string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ddec ,_dfcb ._afced ,_dfcb ._agae );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_faa :=len (args );if _faa !=4&&_faa !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eddf ,_bacdf ,_ddd :=_fead (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ddd .Type ==ResultTypeError {return _ddd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_edbg :=args [2].ValueNumber ;if _edbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bagd :=args [3].ValueNumber ;if _bagd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_cag :=0;if _faa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cag =int (args [4].ValueNumber );if !_bdaa (_cag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_gcaf ,_ddd :=_bfaf (_eddf ,_bacdf ,_cag );if _ddd .Type ==ResultTypeError {return _ddd ;};return MakeNumberResult ((_bagd -_edbg )/_edbg /_gcaf );};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_eccea ,_eggec Expression };

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_egad :=args [0].AsNumber ();if _egad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcce :=_gc .Signbit (_egad .ValueNumber );_fbea ,_agcga :=_gc .Modf ((_egad .ValueNumber -1)/2);_cffbd :=_fbea *2+1;if _agcga !=0{if !_ggcce {_cffbd +=2;}else {_cffbd -=2;};};return MakeNumberResult (_cffbd );};const _bfaag =2;const _gefb =57354;

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};var _dab =[]*_dg .Regexp {};func _bede (_bcgd ,_cedcf []float64 ,_feee float64 )float64 {_ebgd :=_feee +1;_bae :=0.0;_dfafg :=len (_bcgd );_feed :=_cedcf [0];for _dede :=1;_dede < _dfafg ;_dede ++{_abbg :=(_cedcf [_dede ]-_feed )/365;_bae -=_abbg *_bcgd [_dede ]/_gc .Pow (_ebgd ,_abbg +1);};return _bae ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebde :=args [0].Ref ;if _ebde .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_bdea ,_dggcc :=_bd .ParseCellReference (_ebde .Value );if _dggcc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ebde .Value );};return MakeNumberResult (float64 (_bdea .RowIdx ));};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_aaee :=args [0].AsNumber ();_bfdf :=args [1].AsNumber ();if _aaee .Type ==ResultTypeNumber &&_bfdf .Type ==ResultTypeNumber {_afeec :=_gc .Atan2 (_bfdf .ValueNumber ,_aaee .ValueNumber );if _afeec !=_afeec {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_afeec );};for _ ,_fadge :=range []ResultType {_aaee .Type ,_bfdf .Type }{switch _fadge {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _aaee ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fadge ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ca ,_db :=_e .ParseBool (v );if _db !=nil {_dd .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_db );};return Bool {_efe :_ca };};func _bbbg (_edcd []Result )[]rangeIndex {_gbef :=[]rangeIndex {};_dfad :=len (_edcd );for _fbacc :=0;_fbacc < _dfad -1;_fbacc +=2{_bfbdb :=[]rangeIndex {};_dbcg :=_bdbg (_edcd [_fbacc ]);_gfdgd :=_cecbda (_edcd [_fbacc +1]);if _fbacc ==0{for _eedb ,_dbbcd :=range _dbcg {for _gebab ,_agfb :=range _dbbcd {if _dbfcg (_agfb ,_gfdgd ){_bfbdb =append (_bfbdb ,rangeIndex {_eedb ,_gebab });};};};}else {for _ ,_dbea :=range _gbef {_fada :=_dbcg [_dbea ._becd ][_dbea ._facb ];if _dbfcg (_fada ,_gfdgd ){_bfbdb =append (_bfbdb ,_dbea );};};};if len (_bfbdb )==0{return []rangeIndex {};};_gbef =_bfbdb [:];};return _gbef ;};func _dcgc (_gfdac Context ,_dgbf ,_badcd int )(string ,string ){_bfebf :="\u0041"+_e .Itoa (_dgbf );_feefge :=_gfdac .LastColumn (_dgbf ,_badcd );_cbcec :=_feefge +_e .Itoa (_badcd );return _bfebf ,_cbcec ;};

// String returns a string representation for Bool.
func (_add Bool )String ()string {if _add ._efe {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};func _cdge (_fgegac ,_gddfb Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_fgegac .Value ,_gddfb .Value );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _febc =_caef +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Eval evaluates a range returning a list of results or an error.
func (_fgeda Range )Eval (ctx Context ,ev Evaluator )Result {_cbdad :=_fgeda ._eccea .Reference (ctx ,ev );_ebgb :=_fgeda ._eggec .Reference (ctx ,ev );_fccd :=_cdge (_cbdad ,_ebgb );if _cbdad .Type ==ReferenceTypeCell &&_ebgb .Type ==ReferenceTypeCell {if _gefg ,_babfb :=ev .GetFromCache (_fccd );_babfb {return _gefg ;}else {_egdcf :=_geebg (ctx ,ev ,_cbdad .Value ,_ebgb .Value );ev .SetCache (_fccd ,_egdcf );return _egdcf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fccd );};type rmode byte ;

// GetFilename returns an empty string for the invalid reference context.
func (_cbge *ivr )GetFilename ()string {return ""};func _bagbe (_gfdg ,_ceba float64 )bool {return _gc .Abs (_gfdg -_ceba )< 1.0e-6};const _afbda =57346;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebcd :=args [0].ValueNumber ;_bcd :=args [1].ValueNumber ;if _bcd < _ebcd {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bcd ==_ebcd {return MakeNumberResult (0);};_efeb :=_f .ToLower (args [2].ValueString );if _efeb =="\u0064"{return MakeNumberResult (_bcd -_ebcd );};_cbd :=_be (_ebcd );_dbe :=_be (_bcd );_gf ,_gge ,_ebade :=_cbd .Date ();_eeg ,_abf ,_bfgd :=_dbe .Date ();_ggc :=int (_gge );_cad :=int (_abf );var _egf float64 ;switch _efeb {case "\u0079":_egf =float64 (_eeg -_gf );if _cad < _ggc ||(_cad ==_ggc &&_bfgd < _ebade ){_egf --;};case "\u006d":_cgg :=_eeg -_gf ;_fcb :=_cad -_ggc ;if _bfgd < _ebade {_fcb --;};if _fcb < 0{_cgg --;_fcb +=12;};_egf =float64 (_cgg *12+_fcb );case "\u006d\u0064":_ebe :=_cad ;if _bfgd < _ebade {_ebe --;};_egf =float64 (int (_bcd -_cde (_eeg ,_ebe ,_ebade )));case "\u0079\u006d":_egf =float64 (_cad -_ggc );if _bfgd < _ebade {_egf --;};if _egf < 0{_egf +=12;};case "\u0079\u0064":_acg :=_eeg ;if _cad < _ggc ||(_cad ==_ggc &&_bfgd < _ebade ){_acg --;};_egf =float64 (int (_bcd -_cde (_acg ,_ggc ,_ebade )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_egf );};func _ggff (_ggaedb string ,_bfgb func (_cfaa float64 )float64 )Function {return func (_gegd []Result )Result {if len (_gegd )!=1{return MakeErrorResult (_ggaedb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_faeb :=_gegd [0].AsNumber ();switch _faeb .Type {case ResultTypeNumber :_bcbc :=_bfgb (_faeb .ValueNumber );if _gc .IsNaN (_bcbc ){return MakeErrorResult (_ggaedb +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gc .IsInf (_bcbc ,0){return MakeErrorResult (_ggaedb +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_bcbc );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ggaedb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _faeb ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggaedb ,_faeb .Type ));};};};func (_bgagg HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_bgagg ._daag ,_bgagg ._gegc );};

// String returns a string representation of a named range.
func (_dfgcc NamedRangeRef )String ()string {return _dfgcc ._baba };func _cgbgdf (_gbcbd ,_cbega ,_fcecc Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gbcbd .Value ,_cbega .Value ,_fcecc .Value );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_ecda :=len (args );if _ecda < 3||_ecda > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abacb :=args [1].ValueNumber ;if _abacb ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cecf :=args [2].ValueNumber ;_bbcgc :=0.0;if _ecda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcgc =args [3].ValueNumber ;};_bgbe :=0.0;if _ecda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgbe =args [4].ValueNumber ;if _bgbe !=0{_bgbe =1;};};var _aaef float64 ;if _ebbc ==0{_aaef =(_cecf +_bbcgc )/_abacb ;}else {_cgcd :=_gc .Pow (1+_ebbc ,_abacb );if _bgbe ==1{_aaef =(_bbcgc *_ebbc /(_cgcd -1)+_cecf *_ebbc /(1-1/_cgcd ))/(1+_ebbc );}else {_aaef =_bbcgc *_ebbc /(_cgcd -1)+_cecf *_ebbc /(1-1/_cgcd );};};return MakeNumberResult (-_aaef );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_badd :=len (args );if _badd < 3||_badd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abed :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_febca :=args [1].ValueNumber ;if _febca !=float64 (int (_febca )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feeg :=args [2].ValueNumber ;_cccb :=0.0;if _badd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccb =args [3].ValueNumber ;};_gdbfb :=0;if _badd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdbfb =int (args [4].ValueNumber );if _gdbfb !=0{_gdbfb =1;};};return MakeNumberResult (_agfe (_abed ,_febca ,_feeg ,_cccb ,_gdbfb ));};var _fbbg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fffcg :=args [0].AsNumber ();if _fffcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeag :=float64 (1);if _fffcg .ValueNumber < 0{_aeag =-1;};if len (args )> 1{_agdcg :=args [1].AsNumber ();if _agdcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_aeag =_gc .Abs (_agdcg .ValueNumber );};if len (args )==1{return MakeNumberResult (_gc .Floor (_fffcg .ValueNumber ));};_daba :=_fffcg .ValueNumber ;_daba ,_dcfac :=_gc .Modf (_daba /_aeag );if _dcfac !=0{if _fffcg .ValueNumber < 0{_daba --;};};return MakeNumberResult (_daba *_aeag );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_agc ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _dgeeg (_fgaca Result ,_dadde ,_ggcge string )(string ,Result ){switch _fgaca .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _fgaca .Value (),_afc ;default:return "",MakeErrorResult (_dadde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ggcge +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _gcfg (_eabd _dge .Time )_dge .Time {_eabd =_eabd .UTC ();return _dge .Date (_eabd .Year (),_eabd .Month (),_eabd .Day (),_eabd .Hour (),_eabd .Minute (),_eabd .Second (),_eabd .Nanosecond (),_dge .Local );};

// GetLocked returns FALSE for the invalid reference context.
func (_edfa *ivr )GetLocked (cellRef string )bool {return false };type noCache struct{};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_daag ,_gegc int };

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_cddae :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddae =int (args [1].ValueNumber );if _cddae < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _cddae ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_efedg :=args [0].Value ();_adee :=len (_efedg );if _cddae > _adee {return MakeStringResult (_efedg );};return MakeStringResult (_efedg [_adee -_cddae :_adee ]);};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ccggf :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_ccggf *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gddg :=_bdbg (args [1]);for _ ,_dagg :=range _gddg {for _ ,_eggg :=range _dagg {if _eggg .Type !=ResultTypeNumber ||_eggg .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_ccggf *=1.0+_eggg .ValueNumber ;};};return MakeNumberResult (_ccggf );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_fffe :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_gcac :=args [1].ValueNumber !=0;_gfac :=_ccfa (args [2:],[]string {},_gcac );return MakeStringResult (_f .Join (_gfac ,_fffe ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_dbbfe ,_efcg :=_adaf ("\u0046\u0049\u004e\u0044",args );if _efcg .Type !=ResultTypeEmpty {return _efcg ;};_dafbg :=_f .ToLower (_dbbfe ._ecbgd );_gadf :=_f .ToLower (_dbbfe ._ggce );if _dafbg ==""{return MakeNumberResult (1.0);};_gbeef :=_dbbfe ._gceaa -1;_egge :=1;_dgegb :=0;for _abfgd :=range _gadf {if _abfgd !=0{_cdae :=1;if _abfgd -_dgegb > 1{_cdae =2;};_egge +=_cdae ;};if _egge > _gbeef {_ffgaa :=_dc .Index (_dafbg ,_gadf [_abfgd :]);if _ffgaa ==0{return MakeNumberResult (float64 (_egge ));};};_dgegb =_abfgd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fccbe []Result )Result ;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_caag ,_gaeb :=_adaf ("\u0046\u0049\u004e\u0044",args );if _gaeb .Type !=ResultTypeEmpty {return _gaeb ;};_egce :=_caag ._ecbgd ;if _egce ==""{return MakeNumberResult (1.0);};_ccae :=_caag ._ggce ;_fcaf :=_caag ._gceaa ;_ecagd :=1;for _aecc :=range _ccae {if _ecagd < _fcaf {_ecagd ++;continue ;};_acgg :=_f .Index (_ccae [_aecc :],_egce );if _acgg ==0{return MakeNumberResult (float64 (_ecagd ));};_ecagd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _bagdb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _efbb (_efca float64 )float64 {return float64 (int (_efca +0.5))};

// Update updates references in the PrefixExpr after removing a row/column.
func (_befd PrefixExpr )Update (q *_bg .UpdateQuery )Expression {_deeb :=_befd ;_cbcge :=_befd ._baab .String ();if _cbcge ==q .SheetToUpdate {_dfeb :=*q ;_dfeb .UpdateCurrentSheet =true ;_deeb ._ecagf =_befd ._ecagf .Update (&_dfeb );};return _deeb ;};func _cfd (_ebcda ,_aggd ,_gbbb ,_gdda int )int {if _aggd > _gbbb {return 0;};if _gcb (_gdda ){return (_gbbb -_aggd +1)*30;};_fdea :=0;for _dac :=_aggd ;_dac <=_gbbb ;_dac ++{_fdea +=_fba (_ebcda ,_dac );};return _fdea ;};const _afge ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _agfcdg (_fgfge ,_eedba int )string {const TOKSTART =4;if !_dcgd {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_gbab :=range _aadcg {if _gbab ._aaga ==_fgfge &&_gbab ._aefc ==_eedba {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_gbab ._aegcg ;};};_gbcaf :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_gfagd (_eedba );_agcc :=make ([]int ,0,4);_cfff :=_ffaa [_fgfge ];for _eccb :=TOKSTART ;_eccb -1< len (_cbcc );_eccb ++{if _abfca :=_cfff +_eccb ;_abfca >=0&&_abfca < _efcce &&_dcbe [_eefd [_abfca ]]==_eccb {if len (_agcc )==cap (_agcc ){return _gbcaf ;};_agcc =append (_agcc ,_eccb );};};if _bagdb [_fgfge ]==-2{_adbf :=0;for _ccbfc [_adbf ]!=-1||_ccbfc [_adbf +1]!=_fgfge {_adbf +=2;};for _adbf +=2;_ccbfc [_adbf ]>=0;_adbf +=2{_fabdf :=_ccbfc [_adbf ];if _fabdf < TOKSTART ||_ccbfc [_adbf +1]==0{continue ;};if len (_agcc )==cap (_agcc ){return _gbcaf ;};_agcc =append (_agcc ,_fabdf );};if _ccbfc [_adbf +1]!=0{return _gbcaf ;};};for _gaead ,_bggaa :=range _agcc {if _gaead ==0{_gbcaf +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_gbcaf +="\u0020\u006f\u0072\u0020";};_gbcaf +=_gfagd (_bggaa );};return _gbcaf ;};func _fcac (_aaae []Result ,_gdbf string )(*amorArgs ,Result ){_dce :=len (_aaae );if _dce !=6&&_dce !=7{return nil ,MakeErrorResult (_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _aaae [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caefg :=_aaae [0].ValueNumber ;if _caefg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bccg ,_cabd :=_daee (_aaae [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_gdbf );if _cabd .Type ==ResultTypeError {return nil ,_cabd ;};_fgffd ,_cabd :=_daee (_aaae [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_gdbf );if _cabd .Type ==ResultTypeError {return nil ,_cabd ;};if _fgffd < _bccg {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _aaae [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgda :=_aaae [3].ValueNumber ;if _fgda < 0||_fgda > _caefg {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _aaae [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebdc :=int (_aaae [4].ValueNumber );if _ebdc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _aaae [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aced :=_aaae [5].ValueNumber ;if _aced < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdbf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_bdgb :=0;if _dce ==7&&_aaae [6].Type !=ResultTypeEmpty {if _aaae [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdbf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgb =int (_aaae [6].ValueNumber );if !_bdaa (_bdgb )||_bdgb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gdbf );};};return &amorArgs {_caefg ,_bccg ,_fgffd ,_fgda ,_ebdc ,_aced ,_bdgb },_afc ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_bffe :name ,_cdeb :args };};const _caef ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;func _bdd (_ga Result )bool {if _ga .Type ==ResultTypeString {return _ga .ValueString =="";};return _ga .ValueNumber ==0;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ebacd :=1.0;for _ ,_dbfb :=range args {_dbfb =_dbfb .AsNumber ();switch _dbfb .Type {case ResultTypeNumber :_ebacd *=_dbfb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_afda :=Product (_dbfb .ListValues ());if _afda .Type !=ResultTypeNumber {return _afda ;};_ebacd *=_afda .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dbfb ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_dbfb .Type ));};};return MakeNumberResult (_ebacd );};const _cdad =57347;

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccaa :=args [0].AsString ();if _ccaa .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_f .ToUpper (_ccaa .ValueString ));};const _afdg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_cebf :=len (args );if _cebf < 2||_cebf > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eebb :=args [0];if _eebb .Type !=ResultTypeArray &&_eebb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aeef :=args [1].AsNumber ();if _aeef .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aedcf :=int (_aeef .ValueNumber )-1;_fffb :=-1;if _cebf ==3&&args [2].Type !=ResultTypeEmpty {_adbd :=args [2].AsNumber ();if _adbd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fffb =int (_adbd .ValueNumber )-1;};if _aedcf ==-1&&_fffb ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _ceea []Result ;if _eebb .Type ==ResultTypeArray {_daecf :=_eebb .ValueArray ;if _aedcf < -1||_aedcf >=len (_daecf ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _aedcf ==-1{if _fffb >=len (_daecf [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bcee :=[][]Result {};for _ ,_bdgd :=range _daecf {_ebgag :=_bdgd [_fffb ];if _ebgag .Type ==ResultTypeEmpty {_ebgag =MakeNumberResult (0);};_bcee =append (_bcee ,[]Result {_ebgag });};return MakeArrayResult (_bcee );};_ceea =_daecf [_aedcf ];}else {_ffbf :=_eebb .ValueList ;if _aedcf < -1||_aedcf >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _aedcf ==-1{if _fffb >=len (_ffbf ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_fgcff :=_ffbf [_fffb ];if _fgcff .Type ==ResultTypeEmpty {_fgcff =MakeNumberResult (0);};return _fgcff ;};_ceea =_ffbf ;};if _fffb < -1||_fffb > len (_ceea ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fffb ==-1{_efagb :=[]Result {};for _ ,_fcbag :=range _ceea {if _fcbag .Type ==ResultTypeEmpty {_efagb =append (_efagb ,MakeNumberResult (0));}else {_efagb =append (_efagb ,_fcbag );};};return MakeArrayResult ([][]Result {_efagb });};_eccfc :=_ceea [_fffb ];if _eccfc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _eccfc ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_eafc :=_bagfe (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _eafc .Type !=ResultTypeEmpty {return _eafc ;};_abef :=_bbbg (args [1:]);_dcge :=-_gc .MaxFloat64 ;_cdbe :=_bdbg (args [0]);for _ ,_gbee :=range _abef {_dbad :=_cdbe [_gbee ._becd ][_gbee ._facb ].ValueNumber ;if _dcge < _dbad {_dcge =_dbad ;};};if _dcge ==-_gc .MaxFloat64 {_dcge =0;};return MakeNumberResult (float64 (_dcge ));};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcgd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcga :=args [2].ValueNumber ;if _bcga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddce :=args [3].ValueNumber ;if _ddce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ddce > _bcga {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_cgcb :=(_gdef -_ggcgd )*(_bcga -_ddce +1)*2;_gfedb :=_bcga *(_bcga +1);return MakeNumberResult (_cgcb /_gfedb );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_faf :=&defEval {};_faf .evCache =_ffce ();return _faf };func (_faadf *Lexer )nextRaw ()*node {for len (_faadf ._bfdba )!=0{_fdecb :=<-_faadf ._bfdba [len (_faadf ._bfdba )-1];if _fdecb !=nil {return _fdecb ;};_faadf ._bfdba =_faadf ._bfdba [0:len (_faadf ._bfdba )-1];};return <-_faadf ._ebcgb ;};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _eeca :=0;_eeca < len (args )-1;_eeca +=2{if args [_eeca ].ValueNumber ==1{return args [_eeca +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};func _cfga (_bega string )string {_bega =_f .Replace (_bega ,"\u000a","\u005c\u006e",-1);_bega =_f .Replace (_bega ,"\u000d","\u005c\u0072",-1);_bega =_f .Replace (_bega ,"\u0009","\u005c\u0074",-1);return _bega ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_baffe :=_f .Split (v ,"\u003a");if len (_baffe )!=2{return nil ;};if _baffe [0]> _baffe [1]{_baffe [0],_baffe [1]=_baffe [1],_baffe [0];};return VerticalRange {_fbgcc :_baffe [0],_fgdbe :_baffe [1]};};func _daca (_efgb Result ,_eefbb ,_eacc string )(float64 ,Result ){switch _efgb .Type {case ResultTypeEmpty :return 0,_afc ;case ResultTypeNumber :return _efgb .ValueNumber ,_afc ;case ResultTypeString :_fbgb ,_deag :=_e .ParseFloat (_efgb .ValueString ,64);if _deag !=nil {return 0,MakeErrorResult (_eacc +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_eefbb );};return _fbgb ,_afc ;default:return 0,MakeErrorResult (_eefbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_eacc +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// IsDBCS returns false for the invalid reference context.
func (_dcfca *ivr )IsDBCS ()bool {return false };func _ebbd (_cbaaa []Result ,_dfca bool )Result {_dffgg :="\u004d\u0049\u004e";if _dfca {_dffgg ="\u004d\u0049\u004e\u0041";};if len (_cbaaa )==0{return MakeErrorResult (_dffgg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadd :=_gc .MaxFloat64 ;for _ ,_gedg :=range _cbaaa {switch _gedg .Type {case ResultTypeNumber :if (_dfca ||!_gedg .IsBoolean )&&_gedg .ValueNumber < _dadd {_dadd =_gedg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_gbbc :=_ebbd (_gedg .ListValues (),_dfca );if _gbbc .ValueNumber < _dadd {_dadd =_gbbc .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_decaf :=0.0;if _dfca {_decaf =_gedg .AsNumber ().ValueNumber ;};if _decaf < _dadd {_dadd =_decaf ;};default:_dd .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_dffgg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gedg .Type );};};if _dadd ==_gc .MaxFloat64 {_dadd =0;};return MakeNumberResult (_dadd );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _ab .Reader )Expression {_aadbg :=&plex {_fbdg :LexReader (r )};_edcdb (_aadbg );if _aadbg ._bdda !=""{return nil ;};return _aadbg ._agbbe ;};func (_cagd *Lexer )emit (_gadfc tokenType ,_ecbd []byte ){if _ddgd {_a .Println ("\u0065\u006d\u0069\u0074",_gadfc ,_cfga (string (_ecbd )));};_cagd ._ebcgb <-&node {_gadfc ,string (_ecbd )};};var _cdbgg ,_gfce ,_abfac ,_fadcf ,_beae ,_feec *_dg .Regexp ;

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcdf :=args [0].AsNumber ();if _gcdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _gbfg float64 ;_geag :=args [1].AsNumber ();if _geag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbfg =_geag .ValueNumber ;if _gbfg < 0&&_gcdf .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_dedc :=_gcdf .ValueNumber ;_dedc ,_cggb :=_gc .Modf (_dedc /_gbfg );if _cggb !=0{if _gcdf .ValueNumber < 0&&_cggb < 0{_dedc --;};};return MakeNumberResult (_dedc *_gbfg );};

// Reference returns a string reference value to a horizontal range.
func (_afbee HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_afbee .horizontalRangeReference ()};};var _eeag _fe .Mutex ;

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_efbfc :=MakeNumberResult (0);for _ ,_cdda :=range args {_cdda =_cdda .AsNumber ();switch _cdda .Type {case ResultTypeNumber :_efbfc .ValueNumber +=_cdda .ValueNumber ;case ResultTypeList ,ResultTypeArray :_eacg :=Sum (_cdda .ListValues ());if _eacg .Type !=ResultTypeNumber {return _eacg ;};_efbfc .ValueNumber +=_eacg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cdda ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdda .Type ));};};return _efbfc ;};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_dgfae :=len (args );if _dgfae !=4&&_dgfae !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efcf ,_dbbb ,_adgd :=_fead (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _adgd .Type ==ResultTypeError {return _adgd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caebf :=args [2].ValueNumber ;if _caebf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dcfbg :=args [3].ValueNumber ;if _dcfbg <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_edae :=0;if _dgfae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edae =int (args [4].ValueNumber );if !_bdaa (_edae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_fbdfg ,_adgd :=_bfaf (_efcf ,_dbbb ,_edae );if _adgd .Type ==ResultTypeError {return _adgd ;};return MakeNumberResult ((_dcfbg /_caebf -1)/_fbdfg );};

// GetFormat returns an empty string for the invalid reference context.
func (_dcdd *ivr )GetFormat (cellRef string )string {return ""};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_cdbb ,_fbgd ,_ceab :=_adgg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _ceab .Type ==ResultTypeError {return _ceab ;};if _fbgd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cdbb ==0{return MakeNumberResult (0);};_edb :=_cdbb < 0;if _edb {_cdbb =-_cdbb ;};_dbdb :=float64 (int (_cdbb ));_edba :=args [0].Value ();_eeee :=_f .Split (_edba ,"\u002e");_agfef :=0.0;if len (_eeee )> 1{var _egab error ;_ggcg :=_eeee [1];_agfef ,_egab =_e .ParseFloat (_ggcg ,64);if _egab !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_dcae :=float64 (len (_ggcg ));_agfef /=_gc .Pow (10,_dcae );};_cccc :=_agfef *_fbgd /_gc .Pow (10,float64 (int (_gc .Log10 (_fbgd )))+1)+_dbdb ;if _edb {_cccc =-_cccc ;};return MakeNumberResult (_cccc );};const _ebfa =57344;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_dfd EmptyExpr )Update (q *_bg .UpdateQuery )Expression {return _dfd };

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gca :=args [1].ValueNumber ;_dcdf :=args [0];var _abfe float64 ;switch _dcdf .Type {case ResultTypeEmpty :_abfe =0;case ResultTypeNumber :_abfe =_dcdf .ValueNumber ;case ResultTypeString :_bfac :=DateValue ([]Result {args [0]});if _bfac .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_abfe =_bfac .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ead :=_be (_abfe );_dgd :=_ead .AddDate (0,int (_gca +1),0);_fgac ,_egeg ,_ :=_dgd .Date ();_gfe :=_cde (_fgac ,int (_egeg ),0);if _gfe < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _fgac ==1900&&_egeg ==3{_gfe --;};return MakeNumberResult (_gfe );};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_dabe :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dabe =int (args [1].ValueNumber );if _dabe < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _dabe ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_fged :=args [0].Value ();if _dabe > len (_fged ){return MakeStringResult (_fged );};return MakeStringResult (_fged [0:_dabe ]);};

// Reference returns an invalid reference for FunctionCall.
func (_gbfec FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fcag :=len (args );if _fcag !=6&&_fcag !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abab ,_dggc ,_dafd :=_fead (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _dafd .Type ==ResultTypeError {return _dafd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccddc :=args [2].ValueNumber ;if _ccddc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fcfg :=args [3].ValueNumber ;if _fcfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fagc :=args [4].ValueNumber ;if _fagc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdaac :=args [5];if _cdaac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gagac :=_cdaac .ValueNumber ;if !_afgd (_gagac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbba :=0;if _fcag ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbba =int (args [6].ValueNumber );if !_bdaa (_bbba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_dcdg ,_dafd :=_cdgd (_abab ,_dggc ,_ccddc ,_fcfg ,_fagc ,_gagac ,_bbba );if _dafd .Type ==ResultTypeError {return _dafd ;};return MakeNumberResult (_dcdg );};var _eefd =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ccd :=args [1].ValueNumber ;_fab :=args [0];var _egb float64 ;switch _fab .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_egb =_fab .ValueNumber ;case ResultTypeString :_gfb :=DateValue ([]Result {args [0]});if _gfb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_egb =_gfb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_aed :=_be (_egb );_gfgf :=_aed .AddDate (0,int (_ccd ),0);_fbaf ,_gda ,_ded :=_gfgf .Date ();_aba :=_cde (_fbaf ,int (_gda ),_ded );if _aba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_aba );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_cfb :=len (args );if (_cfb !=2&&_cfb !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdg :=0;if _cfb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdg =int (args [2].ValueNumber );if !_bdaa (_bdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_efb :=args [1].ValueNumber ;_beb ,_cdg :=_bfaf (_eae ,_efb ,_bdg );if _cdg .Type ==ResultTypeError {return _cdg ;};return MakeNumberResult (_beb );};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_cbb string ,_daf Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_edd string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_dge .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_cbf int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_ecc string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_eba string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ffcg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dbc string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_bfg string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_eceb ,_gbb int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_cga string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_fde string ,_feaa bool );

// NamedRange returns a named range.
NamedRange (_fcc string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_ada ,_agdc uint32 );};

// Update returns the same object as updating sheet references does not affect Error.
func (_baf Error )Update (q *_bg .UpdateQuery )Expression {return _baf };const _bgb ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaagf :=args [0].AsString ();if _aaagf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_aaagf .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_aaagf .ValueString [0]));};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_abga ,_cce :=_fcac (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cce .Type ==ResultTypeError {return _cce ;};_ccfeg :=_abga ._ffea ;_fbgab :=_abga ._dgeb ;_fbeg :=_abga ._dbff ;_ddcg :=_abga ._abbce ;_aadc :=_abga ._eebd ;_ggcb :=_abga ._ffca ;if _ggcb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fdcb :=_abga ._ffde ;_bfff :=1.0/_ggcb ;_efede :=2.5;if _bfff < 3{_efede =1;}else if _bfff < 5{_efede =1.5;}else if _bfff <=6{_efede =2;};_ggcb *=_efede ;_fdad ,_bdf :=_bfaf (_fbgab ,_fbeg ,_fdcb );if _bdf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_fced :=_efbb (_fdad *_ggcb *_ccfeg );_ccfeg -=_fced ;_eaed :=_ccfeg -_ddcg ;for _acega :=0;_acega < _aadc ;_acega ++{_fced =_efbb (_ggcb *_ccfeg );_eaed -=_fced ;if _eaed < 0{switch _aadc -_acega {case 0:case 1:return MakeNumberResult (_efbb (_ccfeg *0.5));default:return MakeNumberResult (0);};};_ccfeg -=_fced ;};return MakeNumberResult (_fced );};