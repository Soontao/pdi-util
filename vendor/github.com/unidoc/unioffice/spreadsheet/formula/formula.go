//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fc "bytes";_d "errors";_g "fmt";_ed "github.com/unidoc/unioffice";_fcg "github.com/unidoc/unioffice/internal/mergesort";_ba "github.com/unidoc/unioffice/internal/wildcard";_fg "github.com/unidoc/unioffice/spreadsheet/format";_bfd "github.com/unidoc/unioffice/spreadsheet/reference";_da "github.com/unidoc/unioffice/spreadsheet/update";_f "io";_gfd "math";_gf "math/big";_a "math/rand";_db "regexp";_e "sort";_ab "strconv";_dcf "strings";_b "sync";_bf "time";_dc "unicode";);func _cdgc (_bd string ,_ceg uint32 )string {_cbd :=_bfd .ColumnToIndex (_bd );if _cbd ==_ceg {return "\u0023\u0052\u0045F\u0021";}else if _cbd > _ceg {return _bfd .IndexToColumn (_cbd -1);}else {return _bd ;};};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ddf :=len (args );if _ddf !=4&&_ddf !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afe ,_fbfad ,_effd :=_gage (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _effd .Type ==ResultTypeError {return _effd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcge :=args [2].ValueNumber ;if _bcge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_babe :=args [3].ValueNumber ;if _babe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_gbfb :=0;if _ddf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gbfb =int (args [4].ValueNumber );if !_eeaa (_gbfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_cacfd ,_effd :=_debf (_afe ,_fbfad ,_gbfb );if _effd .Type ==ResultTypeError {return _effd ;};return MakeNumberResult ((_babe -_bcge )/_bcge /_cacfd );};var _gg =map[string ]*_db .Regexp {};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_geef :=len (args );if _geef < 3||_geef > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faffc :=args [1].ValueNumber ;if _faffc ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_caac :=args [2].ValueNumber ;_cgbac :=0.0;if _geef >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbac =args [3].ValueNumber ;};_bebe :=0.0;if _geef ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bebe =args [4].ValueNumber ;if _bebe !=0{_bebe =1;};};var _baec float64 ;if _fdbc ==0{_baec =(_caac +_cgbac )/_faffc ;}else {_affe :=_gfd .Pow (1+_fdbc ,_faffc );if _bebe ==1{_baec =(_cgbac *_fdbc /(_affe -1)+_caac *_fdbc /(1-1/_affe ))/(1+_fdbc );}else {_baec =_cgbac *_fdbc /(_affe -1)+_caac *_fdbc /(1-1/_affe );};};return MakeNumberResult (-_baec );};func _egbf (_afaa Result ,_gbb ,_adce string )(float64 ,Result ){var _gded float64 ;switch _afaa .Type {case ResultTypeNumber :_gded =float64 (int (_afaa .ValueNumber ));case ResultTypeString :_dafd :=DateValue ([]Result {_afaa });if _dafd .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gbb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_adce );};_gded =_dafd .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_adce );};if _gded < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gbb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _gded ,_gea ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beaa :=args [0].AsNumber ();if _beaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _beaa .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ffdb :=float64 (1);_fade :=_gfd .Trunc (_beaa .ValueNumber );for _gagf :=_fade ;_gagf > 1;_gagf -=2{_ffdb *=_gagf ;};return MakeNumberResult (_ffdb );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_ffeb Context ,formula string )Result ;SetCache (_gec string ,_eba Result );GetFromCache (_cgd string )(Result ,bool );LastEvalIsRef ()bool ;};func (_bcaa ResultType )String ()string {if _bcaa >=ResultType (len (_fecbd )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bcaa );};return _ccfdg [_fecbd [_bcaa ]:_fecbd [_bcaa +1]];};func (_bagc *yyParserImpl )Parse (yylex yyLexer )int {_ggaf :=_bf .Now ();var _adgdc int ;var _bffdf yySymType ;var _bafgf []yySymType ;_ =_bafgf ;_ebec :=_bagc ._bgfgb [:];Nerrs :=0;Errflag :=0;_fbgdc :=0;_bagc ._adeeb =-1;_ecdag :=-1;defer func (){_fbgdc =-1;_bagc ._adeeb =-1;_ecdag =-1}();_cdfc :=-1;goto _ggec ;_adgea :return 0;_feeb :return 1;_ggec :if _cccb (_ggaf ){_ed .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _feeb ;};if _fffeb >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bagfd (_ecdag ),_baecc (_fbgdc ));};_cdfc ++;if _cdfc >=len (_ebec ){_afacg :=make ([]yySymType ,len (_ebec )*2);copy (_afacg ,_ebec );_ebec =_afacg ;};_ebec [_cdfc ]=_bffdf ;_ebec [_cdfc ]._bgef =_fbgdc ;_ffacf :if _cccb (_ggaf ){_ed .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _feeb ;};_adgdc =_acbbd [_fbgdc ];if _adgdc <=_eebge {goto _bdcbf ;};if _bagc ._adeeb < 0{_bagc ._adeeb ,_ecdag =_gaef (yylex ,&_bagc ._gdeea );};_adgdc +=_ecdag ;if _adgdc < 0||_adgdc >=_bcce {goto _bdcbf ;};_adgdc =_geaf [_adgdc ];if _dffgf [_adgdc ]==_ecdag {_bagc ._adeeb =-1;_ecdag =-1;_bffdf =_bagc ._gdeea ;_fbgdc =_adgdc ;if Errflag > 0{Errflag --;};goto _ggec ;};_bdcbf :if _cccb (_ggaf ){_ed .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _feeb ;};_adgdc =_facbc [_fbgdc ];if _adgdc ==-2{if _bagc ._adeeb < 0{_bagc ._adeeb ,_ecdag =_gaef (yylex ,&_bagc ._gdeea );};_bcegb :=0;for {if _bbde [_bcegb +0]==-1&&_bbde [_bcegb +1]==_fbgdc {break ;};_bcegb +=2;};for _bcegb +=2;;_bcegb +=2{_adgdc =_bbde [_bcegb +0];if _adgdc < 0||_adgdc ==_ecdag {break ;};};_adgdc =_bbde [_bcegb +1];if _adgdc < 0{goto _adgea ;};};if _adgdc ==0{switch Errflag {case 0:yylex .Error (_fgefa (_fbgdc ,_ecdag ));Nerrs ++;if _fffeb >=1{_g .Printf ("\u0025\u0073",_baecc (_fbgdc ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bagfd (_ecdag ));};fallthrough;case 1,2:Errflag =3;for _cdfc >=0{_adgdc =_acbbd [_ebec [_cdfc ]._bgef ]+_ebbc ;if _adgdc >=0&&_adgdc < _bcce {_fbgdc =_geaf [_adgdc ];if _dffgf [_fbgdc ]==_ebbc {goto _ggec ;};};if _fffeb >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ebec [_cdfc ]._bgef );};_cdfc --;};goto _feeb ;case 3:if _fffeb >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bagfd (_ecdag ));};if _ecdag ==_edfac {goto _feeb ;};_bagc ._adeeb =-1;_ecdag =-1;goto _ffacf ;};};if _fffeb >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_adgdc ,_baecc (_fbgdc ));};_eebf :=_adgdc ;_gdbfe :=_cdfc ;_ =_gdbfe ;_cdfc -=_dgabb [_adgdc ];if _cdfc +1>=len (_ebec ){_cccgc :=make ([]yySymType ,len (_ebec )*2);copy (_cccgc ,_ebec );_ebec =_cccgc ;};_bffdf =_ebec [_cdfc +1];_adgdc =_cdeeb [_adgdc ];_aafdc :=_fdbcc [_adgdc ];_fffc :=_aafdc +_ebec [_cdfc ]._bgef +1;if _fffc >=_bcce {_fbgdc =_geaf [_aafdc ];}else {_fbgdc =_geaf [_fffc ];if _dffgf [_fbgdc ]!=-_adgdc {_fbgdc =_geaf [_aafdc ];};};switch _eebf {case 1:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{yylex .(*plex )._bcgb =_bffdf ._dfge ;};case 3:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =_bafgf [2]._dfge ;};case 4:_bafgf =_ebec [_gdbfe -4:_gdbfe +1];{};case 5:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewBool (_bafgf [1]._agde ._ecfg );};case 6:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewNumber (_bafgf [1]._agde ._ecfg );};case 7:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewString (_bafgf [1]._agde ._ecfg );};case 8:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewError (_bafgf [1]._agde ._ecfg );};case 9:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =_bafgf [2]._dfge ;};case 10:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =NewNegate (_bafgf [2]._dfge );};case 15:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =_bafgf [2]._dfge ;};case 17:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewConstArrayExpr (_bafgf [2]._agbae );};case 18:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._agbae =append (_bffdf ._agbae ,_bafgf [1]._cgeab );};case 19:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._agbae =append (_bafgf [1]._agbae ,_bafgf [3]._cgeab );};case 20:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._cgeab =append (_bffdf ._cgeab ,_bafgf [1]._dfge );};case 21:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._cgeab =append (_bafgf [1]._cgeab ,_bafgf [3]._dfge );};case 23:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =NewPrefixExpr (_bafgf [1]._dfge ,_bafgf [2]._dfge );};case 25:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewSheetPrefixExpr (_bafgf [1]._agde ._ecfg );};case 26:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewCellRef (_bafgf [1]._agde ._ecfg );};case 27:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewRange (_bafgf [1]._dfge ,_bafgf [3]._dfge );};case 28:_bafgf =_ebec [_gdbfe -4:_gdbfe +1];{_bffdf ._dfge =NewPrefixRangeExpr (_bafgf [1]._dfge ,_bafgf [2]._dfge ,_bafgf [4]._dfge );};case 29:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewNamedRangeRef (_bafgf [1]._agde ._ecfg );};case 30:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewHorizontalRange (_bafgf [1]._agde ._ecfg );};case 31:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._dfge =NewVerticalRange (_bafgf [1]._agde ._ecfg );};case 32:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =NewPrefixHorizontalRange (_bafgf [1]._dfge ,_bafgf [2]._agde ._ecfg );};case 33:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =NewPrefixVerticalRange (_bafgf [1]._dfge ,_bafgf [2]._agde ._ecfg );};case 34:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypePlus ,_bafgf [3]._dfge );};case 35:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeMinus ,_bafgf [3]._dfge );};case 36:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeMult ,_bafgf [3]._dfge );};case 37:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeDiv ,_bafgf [3]._dfge );};case 38:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeExp ,_bafgf [3]._dfge );};case 39:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeLT ,_bafgf [3]._dfge );};case 40:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeGT ,_bafgf [3]._dfge );};case 41:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeLEQ ,_bafgf [3]._dfge );};case 42:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeGEQ ,_bafgf [3]._dfge );};case 43:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeEQ ,_bafgf [3]._dfge );};case 44:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeNE ,_bafgf [3]._dfge );};case 45:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewBinaryExpr (_bafgf [1]._dfge ,BinOpTypeConcat ,_bafgf [3]._dfge );};case 47:_bafgf =_ebec [_gdbfe -2:_gdbfe +1];{_bffdf ._dfge =NewFunction (_bafgf [1]._agde ._ecfg ,nil );};case 48:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._dfge =NewFunction (_bafgf [1]._agde ._ecfg ,_bafgf [2]._cgeab );};case 49:_bafgf =_ebec [_gdbfe -1:_gdbfe +1];{_bffdf ._cgeab =append (_bffdf ._cgeab ,_bafgf [1]._dfge );};case 50:_bafgf =_ebec [_gdbfe -3:_gdbfe +1];{_bffdf ._cgeab =append (_bafgf [1]._cgeab ,_bafgf [3]._dfge );};case 53:_bafgf =_ebec [_gdbfe -0:_gdbfe +1];{_bffdf ._dfge =NewEmptyExpr ();};};goto _ggec ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ebeg :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_efee :=args [1].ValueNumber !=0;_efcae :=_fccc (args [2:],[]string {},_efee );return MakeStringResult (_dcf .Join (_efcae ,_ebeg ));};

// String returns a string representation of FunctionCall expression.
func (_dfgdc FunctionCall )String ()string {_ffbb :=_fc .Buffer {};_ffbb .WriteString (_dfgdc ._gaec );_ffbb .WriteString ("\u0028");_bbgbbc :=len (_dfgdc ._edafd )-1;for _eefg ,_cegcc :=range _dfgdc ._edafd {_ffbb .WriteString (_cegcc .String ());if _eefg !=_bbgbbc {_ffbb .WriteString ("\u002c");};};_ffbb .WriteString ("\u0029");return _ffbb .String ();};func _ddgca (_dfae int )bool {return _dfae ==0||_dfae ==4};type xargs struct{_adeg []float64 ;_bdcd []float64 ;};func _ecae (_gffa ,_fgbb float64 ,_fbaf ,_eagbf int )float64 {_gcba :=_aee (_gffa );_cabb :=_aee (_fgbb );if _eagbf ==1{_bffd :=_dbbg (_gcba ,_cabb ,_fbaf ,1);_eeef :=_bffd .AddDate (0,12/_fbaf ,0);return _edfg (_bffd ,_eeef ,_eagbf );};return float64 (_ega (0,_eagbf ))/float64 (_fbaf );};func _fgefa (_aggf ,_addeb int )string {const TOKSTART =4;if !_ebfec {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_dfdbe :=range _ccfa {if _dfdbe ._afcda ==_aggf &&_dfdbe ._befc ==_addeb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_dfdbe ._ceff ;};};_dedd :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bagfd (_addeb );_fcecb :=make ([]int ,0,4);_fffb :=_acbbd [_aggf ];for _fffa :=TOKSTART ;_fffa -1< len (_adgag );_fffa ++{if _fbead :=_fffb +_fffa ;_fbead >=0&&_fbead < _bcce &&_dffgf [_geaf [_fbead ]]==_fffa {if len (_fcecb )==cap (_fcecb ){return _dedd ;};_fcecb =append (_fcecb ,_fffa );};};if _facbc [_aggf ]==-2{_efab :=0;for _bbde [_efab ]!=-1||_bbde [_efab +1]!=_aggf {_efab +=2;};for _efab +=2;_bbde [_efab ]>=0;_efab +=2{_fceb :=_bbde [_efab ];if _fceb < TOKSTART ||_bbde [_efab +1]==0{continue ;};if len (_fcecb )==cap (_fcecb ){return _dedd ;};_fcecb =append (_fcecb ,_fceb );};if _bbde [_efab +1]!=0{return _dedd ;};};for _gfcgd ,_edabg :=range _fcecb {if _gfcgd ==0{_dedd +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_dedd +="\u0020\u006f\u0072\u0020";};_dedd +=_bagfd (_edabg );};return _dedd ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdga :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adec :=args [2].ValueNumber ;if _adec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbeg :=args [3].ValueNumber ;return MakeNumberResult (_gbeg *_bca *(_bdga /_adec -1));};var _geff =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_adgd :=args [0].AsNumber ();_acca :=args [1].AsNumber ();if _adgd .Type !=ResultTypeNumber ||_acca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _acca .ValueNumber < _adgd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_cgca :=int64 (_adgd .ValueNumber );_daadb :=int64 (_acca .ValueNumber );return MakeNumberResult (float64 (_ccbgg .Int63n (_daadb -_cgca +1)+_cgca ));};

// Update updates references in the Negate after removing a row/column.
func (_bedbc Negate )Update (q *_da .UpdateQuery )Expression {return Negate {_fbbb :_bedbc ._fbbb .Update (q )};};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};type yyParserImpl struct{_gdeea yySymType ;_bgfgb [_gacae ]yySymType ;_adeeb int ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfbg :=args [0].AsNumber ();if _cfbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdegd :=float64 (1);if _cfbg .ValueNumber < 0{_gdegd =-1;};if len (args )> 1{_eacdg :=args [1].AsNumber ();if _eacdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdegd =_gfd .Abs (_eacdg .ValueNumber );};if len (args )==1{return MakeNumberResult (_gfd .Ceil (_cfbg .ValueNumber ));};_cgcd :=_cfbg .ValueNumber ;_cgcd ,_bgec :=_gfd .Modf (_cgcd /_gdegd );if _bgec !=0{if _cfbg .ValueNumber > 0{_cgcd ++;};};return MakeNumberResult (_cgcd *_gdegd );};

// Eval evaluates and returns a boolean.
func (_cd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_cd ._ebc )};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfceb :=args [0].AsString ();if _cfceb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_cfceb .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_cfceb .ValueString [0]));};const _gaeb =57378;func _geb (_adga int )bool {if _adga ==_adga /400*400{return true ;};if _adga ==_adga /100*100{return false ;};return _adga ==_adga /4*4;};

// Reference returns an invalid reference for FunctionCall.
func (_ggceg FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_cccc :=len (args );if _cccc < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acgaf :=args [0].ValueNumber ;if _acgaf ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gaag :=[]float64 {};for _ ,_fgfa :=range args [1:]{switch _fgfa .Type {case ResultTypeNumber :_gaag =append (_gaag ,_fgfa .ValueNumber );case ResultTypeArray ,ResultTypeList :_cbbc :=_fcef (_fgfa );for _ ,_ddee :=range _cbbc {for _ ,_dded :=range _ddee {if _dded .Type ==ResultTypeNumber &&!_dded .IsBoolean {_gaag =append (_gaag ,_dded .ValueNumber );};};};};};_bdcc :=0.0;for _eafcf ,_fdecc :=range _gaag {_bdcc +=_fdecc /_gfd .Pow (1+_acgaf ,float64 (_eafcf )+1);};return MakeNumberResult (_bdcc );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_faeec :=_bf .Now ();_ ,_eec :=_faeec .Zone ();_gcbd :=_aegc +float64 (_faeec .Unix ()+int64 (_eec ))/86400;return MakeNumberResult (_gcbd );};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aeeag :=args [0];if _aeeag .Type !=ResultTypeArray &&_aeeag .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfdb :=_aeeag .ValueArray ;if len (_bfdb )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_bfdb [0])));};const _gfbg =_dga +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _gage (_bfc ,_dcfb Result ,_cefe string )(float64 ,float64 ,Result ){_ffc ,_decd :=_egbf (_bfc ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cefe );if _decd .Type ==ResultTypeError {return 0,0,_decd ;};_gbe ,_decd :=_egbf (_dcfb ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cefe );if _decd .Type ==ResultTypeError {return 0,0,_decd ;};if _ffc >=_gbe {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cefe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _ffc ,_gbe ,_gea ;};const _dfc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gaf :=_bf .Now ();_ ,_gbfe :=_gaf .Zone ();_cde :=_cabga (_fd ,_gaf .Unix ()+int64 (_gbfe ))+1;return MakeNumberResult (_cde );};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gcbe ,_ebcd :=_eade (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _ebcd .Type ==ResultTypeError {return _ebcd ;};_ddga :=_gcbe ._cfc ;_bffe :=_gcbe ._bacb ;_dfbb :=_gcbe ._dee ;_cdfa :=_gcbe ._eeebe ;_adcf :=_gcbe ._faea ;_bafa :=_gcbe ._gade ;_bdf :=_cgaa (_ddga ,_bffe ,_dfbb ,_cdfa ,_adcf ,_bafa );if _bdf .Type ==ResultTypeError {return _bdf ;};_eeab :=_bdf .ValueNumber /(1.0+_cdfa /_adcf );return MakeNumberResult (_eeab );};

// GetLocked returns FALSE for the invalid reference context.
func (_ddcgf *ivr )GetLocked (cellRef string )bool {return false };

// Update updates references in the BinaryExpr after removing a row/column.
func (_df BinaryExpr )Update (q *_da .UpdateQuery )Expression {_fag :=_df ;_fag ._ec =_df ._ec .Update (q );_fag ._ce =_df ._ce .Update (q );return _fag ;};const (_ byte =iota ;_dcccf ;_ccfe ;_aagfe ;_fedcb ;_bffg ;);type durationArgs struct{_cfc float64 ;_bacb float64 ;_dee float64 ;_eeebe float64 ;_faea float64 ;_gade int ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_cgeeb :=_dcf .Split (v ,"\u003a");if len (_cgeeb )!=2{return nil ;};if _cgeeb [0]> _cgeeb [1]{_cgeeb [0],_cgeeb [1]=_cgeeb [1],_cgeeb [0];};return VerticalRange {_bbadb :_cgeeb [0],_fdaegd :_cgeeb [1]};};var _abdec =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faecb :=args [0].AsString ();if _faecb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_faecb .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_faecb .ValueString [0]));};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_eaga Result )AsNumber ()Result {if _eaga .Type ==ResultTypeString {_dbebf ,_cefad :=_ab .ParseFloat (_eaga .ValueString ,64);if _cefad ==nil {return MakeNumberResult (_dbebf );};};if _eaga .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _eaga ;};

// Reference returns an invalid reference for EmptyExpr.
func (_aeg EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns an invalid reference for Error.
func (_cda Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ebgc :=[]string {};for _cceabd :=range _cccfb {_ebgc =append (_ebgc ,_cceabd );};for _efacc :=range _geddf {_ebgc =append (_ebgc ,_efacc );};_e .Strings (_ebgc );return _ebgc ;};var _babda =false ;var _cccfb =map[string ]Function {};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_cgg string ,_cfb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ffe string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_bf .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_fbd int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cce string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_ddcg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_gaa string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ddd string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gcg string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_eae ,_dbe int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_gab string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_bgf string ,_dbg bool );

// NamedRange returns a named range.
NamedRange (_fe string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_cdd ,_fgd uint32 );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_bdaee ,_ccbb :=_gcddc ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _ccbb .Type !=ResultTypeEmpty {return _ccbb ;};_fdbfb :=_bdaee ._abdef ;_fceae :=_bdaee ._fgdc ;_cegdf :=_bdaee ._afca ;_fdfga :=_bdaee ._bfagb ;_gcfc :=len (_fdbfb );if _fceae > _gcfc {_fceae =_gcfc ;};_gadb :=_fceae +_cegdf ;if _gadb > _gcfc {_gadb =_gcfc ;};_fbaa :=_fdbfb [0:_fceae ]+_fdfga +_fdbfb [_gadb :];return MakeStringResult (_fbaa );};

// Match implements the MATCH function.
func Match (args []Result )Result {_bfef :=len (args );if _bfef !=2&&_bfef !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeeef :=1;if _bfef ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gadd :=args [2].ValueNumber ;if _gadd ==-1||_gadd ==0{_eeeef =int (_gadd );};};_debc :=args [1];var _ccga []Result ;switch _debc .Type {case ResultTypeList :_ccga =_debc .ValueList ;case ResultTypeArray :_dbebb :=_debc .ValueArray ;for _ ,_eecd :=range _dbebb {if len (_eecd )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_ccga =append (_ccga ,_eecd [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_eaaf :=_egec (args [0]);switch _eeeef {case 0:for _cbag ,_ecegg :=range _ccga {if _eabg (_ecegg ,_eaaf ){return MakeNumberResult (float64 (_cbag +1));};};case -1:for _daagg :=0;_daagg < len (_ccga );_daagg ++{if _eabg (_ccga [_daagg ],_eaaf ){return MakeNumberResult (float64 (_daagg +1));};if _eaaf ._bffc &&(_ccga [_daagg ].ValueNumber < _eaaf ._cdfbg ){if _daagg ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_daagg ));};};case 1:for _adbdc :=0;_adbdc < len (_ccga );_adbdc ++{if _eabg (_ccga [_adbdc ],_eaaf ){return MakeNumberResult (float64 (_adbdc +1));};if _eaaf ._bffc &&(_ccga [_adbdc ].ValueNumber > _eaaf ._cdfbg ){if _adbdc ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_adbdc ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_efac :=len (args );if _efac !=4&&_efac !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcgb ,_bcdc ,_cbad :=_gage (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _cbad .Type ==ResultTypeError {return _cbad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bcag :=args [2].ValueNumber ;if _bcag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bea :=args [3].ValueNumber ;if _bea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fageg :=0;if _efac ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fageg =int (args [4].ValueNumber );if !_eeaa (_fageg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_dbeb ,_cbad :=_debf (_gcgb ,_bcdc ,_fageg );if _cbad .Type ==ResultTypeError {return _cbad ;};return MakeNumberResult (_bea *(1-_bcag *_dbeb ));};type tokenType int ;

// Update returns the same object as updating sheet references does not affect Error.
func (_abea Error )Update (q *_da .UpdateQuery )Expression {return _abea };var _geaf =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};func _ebdb (_eafda string ,_fddfd func (_fgfd float64 )float64 )Function {return func (_cceb []Result )Result {if len (_cceb )!=1{return MakeErrorResult (_eafda +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bafc :=_cceb [0].AsNumber ();switch _bafc .Type {case ResultTypeNumber :_fagag :=_fddfd (_bafc .ValueNumber );if _gfd .IsNaN (_fagag ){return MakeErrorResult (_eafda +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gfd .IsInf (_fagag ,0){return MakeErrorResult (_eafda +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_fagag );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_eafda +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _bafc ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eafda ,_bafc .Type ));};};};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbee :=args [0].AsNumber ();if _bbee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gefg :=0;if len (args )> 1{_efcb :=args [1];if _efcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_gefg =int (_efcb .ValueNumber );if _gefg < 0{_gefg =0;}else if _gefg > 4{_gefg =4;};};_efcd :=_geff ;switch _gefg {case 1:_efcd =_aadc ;case 2:_efcd =_efgdf ;case 3:_efcd =_abdec ;case 4:_efcd =_bafca ;};_dgd :=_gfd .Trunc (_bbee .ValueNumber );_aaab :=_fc .Buffer {};for _ ,_aegae :=range _efcd {for _dgd >=_aegae ._dgac {_aaab .WriteString (_aegae ._gced );_dgd -=_aegae ._dgac ;};};return MakeStringResult (_aaab .String ());};func _ggbb (_accf ,_aed ,_fefg ,_aabe int )int {if _aed > _fefg {return 0;};if _ddgca (_aabe ){return (_fefg -_aed +1)*30;};_bge :=0;for _bfe :=_aed ;_bfe <=_fefg ;_bfe ++{_bge +=_cceg (_accf ,_bfe );};return _bge ;};const _bcce =187;const _eea ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func LexReader (r _f .Reader )chan *node {_fffcb :=NewLexer ();go _fffcb .lex (r );return _fffcb ._abcd };const _bbfa =57354;func init (){_bfa ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};func _baecc (_cbefb int )string {if _cbefb >=0&&_cbefb < len (_gcffc ){if _gcffc [_cbefb ]!=""{return _gcffc [_cbefb ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_cbefb );};func _dcgc (_gcbgc Reference ,_bccb Context )bool {return _bccb .Sheet (_gcbgc .Value )==InvalidReferenceContext ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dgbf :=1.0;for _ ,_addbe :=range args {_addbe =_addbe .AsNumber ();switch _addbe .Type {case ResultTypeNumber :_dgbf *=_addbe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_aeaa :=Product (_addbe .ListValues ());if _aeaa .Type !=ResultTypeNumber {return _aeaa ;};_dgbf *=_aeaa .ValueNumber ;case ResultTypeString :case ResultTypeError :return _addbe ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_addbe .Type ));};};return MakeNumberResult (_dgbf );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbed :=args [0].AsString ();if _cbed .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggbee :=_fc .Buffer {};_beee :=false ;for _ ,_gdfgf :=range _cbed .ValueString {if !_beee &&_dc .IsLetter (_gdfgf ){_ggbee .WriteRune (_dc .ToUpper (_gdfgf ));}else {_ggbee .WriteRune (_dc .ToLower (_gdfgf ));};_beee =_dc .IsLetter (_gdfgf );};return MakeStringResult (_ggbee .String ());};var _bafca =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _dcfe (_agb BinOpType ,_fae []Result ,_eegd Result )Result {_af :=[]Result {};switch _eegd .Type {case ResultTypeNumber :_eee :=_eegd .ValueNumber ;for _bg :=range _fae {_baa :=_fae [_bg ].AsNumber ();if _baa .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _agb {case BinOpTypePlus :_af =append (_af ,MakeNumberResult (_baa .ValueNumber +_eee ));case BinOpTypeMinus :_af =append (_af ,MakeNumberResult (_baa .ValueNumber -_eee ));case BinOpTypeMult :_af =append (_af ,MakeNumberResult (_baa .ValueNumber *_eee ));case BinOpTypeDiv :if _eee ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_af =append (_af ,MakeNumberResult (_baa .ValueNumber /_eee ));case BinOpTypeExp :_af =append (_af ,MakeNumberResult (_gfd .Pow (_baa .ValueNumber ,_eee )));case BinOpTypeLT :_af =append (_af ,MakeBoolResult (_baa .ValueNumber < _eee ));case BinOpTypeGT :_af =append (_af ,MakeBoolResult (_baa .ValueNumber > _eee ));case BinOpTypeEQ :_af =append (_af ,MakeBoolResult (_baa .ValueNumber ==_eee ));case BinOpTypeLEQ :_af =append (_af ,MakeBoolResult (_baa .ValueNumber <=_eee ));case BinOpTypeGEQ :_af =append (_af ,MakeBoolResult (_baa .ValueNumber >=_eee ));case BinOpTypeNE :_af =append (_af ,MakeBoolResult (_baa .ValueNumber !=_eee ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_agb ));};};case ResultTypeString :_cf :=_eegd .ValueString ;for _bag :=range _fae {_dba :=_fae [_bag ].AsString ();if _dba .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _agb {case BinOpTypeLT :_af =append (_af ,MakeBoolResult (_dba .ValueString < _cf ));case BinOpTypeGT :_af =append (_af ,MakeBoolResult (_dba .ValueString > _cf ));case BinOpTypeEQ :_af =append (_af ,MakeBoolResult (_dba .ValueString ==_cf ));case BinOpTypeLEQ :_af =append (_af ,MakeBoolResult (_dba .ValueString <=_cf ));case BinOpTypeGEQ :_af =append (_af ,MakeBoolResult (_dba .ValueString >=_cf ));case BinOpTypeNE :_af =append (_af ,MakeBoolResult (_dba .ValueString !=_cf ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_agb ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_af );};func _eegab (_ddba string ,_edgbf func (_bbbba float64 )float64 )Function {return func (_efaf []Result )Result {if len (_efaf )!=1{return MakeErrorResult (_ddba +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffbca :=_efaf [0].AsNumber ();switch _ffbca .Type {case ResultTypeNumber :_fdba :=_edgbf (_ffbca .ValueNumber );if _gfd .IsNaN (_fdba ){return MakeErrorResult (_ddba +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gfd .IsInf (_fdba ,0){return MakeErrorResult (_ddba +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fdba ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_ddba +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fdba );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ddba +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _ffbca ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddba ,_ffbca .Type ));};};};

// Eval evaluates and returns an expression with prefix.
func (_egaag PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dggfa :=_egaag ._dgfe .Reference (ctx ,ev );switch _dggfa .Type {case ReferenceTypeSheet :if _dcgc (_dggfa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dggfa .Value ));};_fcdf :=ctx .Sheet (_dggfa .Value );return _egaag ._cdadd .Eval (_fcdf ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dggfa .Type ));};};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bffb :=args [0].ValueNumber ;_cfd :=args [1].ValueNumber ;_aeb :=args [2].ValueNumber ;_cged :=_bcf (_bffb ,_cfd ,_aeb );if _cged >=0{return MakeNumberResult (_cged );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func _egdgc (_cgc ,_cdaf []float64 ,_ebeeg float64 )Result {_dbgd :=false ;_faed :=false ;for _eebg :=0;_eebg < len (_cgc );_eebg ++{if _cgc [_eebg ]> 0{_dbgd =true ;};if _cgc [_eebg ]< 0{_faed =true ;};};if !_dbgd ||!_faed {return MakeErrorResultType (ErrorTypeNum ,"");};_aecc :=_ebeeg ;_bdecd :=1e-10;_degg :=0;_eagg :=50;_cfbba :=false ;for {_dcdb :=_cdad (_cgc ,_cdaf ,_aecc );_bded :=_aecc -_dcdb /_gcgg (_cgc ,_cdaf ,_aecc );_bdee :=_gfd .Abs (_bded -_aecc );_aecc =_bded ;_degg ++;if _bdee <=_bdecd ||_gfd .Abs (_dcdb )<=_bdecd {break ;};if _degg > _eagg {_cfbba =true ;break ;};};if _cfbba ||_gfd .IsNaN (_aecc )||_gfd .IsInf (_aecc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_aecc );};func _gfbe (_egfb ,_agd float64 ,_gcab ,_cbef int )(float64 ,Result ){_ede ,_gdg :=_aee (_egfb ),_aee (_agd );if _gdg .After (_ede ){_gede :=_dbbg (_ede ,_gdg ,_gcab ,_cbef );_aad :=(_gdg .Year ()-_gede .Year ())*12+int (_gdg .Month ())-int (_gede .Month ());return float64 (_aad *_gcab )/12.0,_gea ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cecc :=false ;for _ ,_ffcb :=range args {switch _ffcb .Type {case ResultTypeList ,ResultTypeArray :_dacf :=Or (_ffcb .ListValues ());if _dacf .Type ==ResultTypeError {return _dacf ;};if _dacf .ValueNumber !=0{_cecc =true ;};case ResultTypeNumber :if _ffcb .ValueNumber !=0{_cecc =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _ffcb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_cecc );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func _aegcd (_efe []Result ,_gfe string )(float64 ,float64 ,Result ){if len (_efe )!=2{return 0,0,MakeErrorResult (_gfe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _efe [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eeaag :=_efe [0].ValueNumber ;if _efe [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aaeef :=float64 (int (_efe [1].ValueNumber ));if _aaeef < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _eeaag ,_aaeef ,_gea ;};func _gcdd (_bcgd ,_cfeg ,_bebdf ,_cfcb float64 ,_fcaf int )float64 {var _fgde float64 ;if _bcgd ==0{_fgde =_cfcb +_bebdf *_cfeg ;}else {_aaaa :=_gfd .Pow (1+_bcgd ,_cfeg );if _fcaf ==1{_fgde =_cfcb *_aaaa +_bebdf *(1+_bcgd )*(_aaaa -1)/_bcgd ;}else {_fgde =_cfcb *_aaaa +_bebdf *(_aaaa -1)/_bcgd ;};};return -_fgde ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fecgf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aadga :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggab :=args [2].ValueNumber ;if _ggab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcggb :=args [3].ValueNumber ;if _gcggb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gcggb > _ggab {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_baad :=(_fecgf -_aadga )*(_ggab -_gcggb +1)*2;_bfff :=_ggab *(_ggab +1);return MakeNumberResult (_baad /_bfff );};

// String returns a string representation for Negate.
func (_bdccd Negate )String ()string {return "\u002d"+_bdccd ._fbbb .String ()};func (_gaccd *noCache )SetCache (key string ,value Result ){};func _afcb (_afb []Result ,_gdgd string )(*amorArgs ,Result ){_adff :=len (_afb );if _adff !=6&&_adff !=7{return nil ,MakeErrorResult (_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _afb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdgd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccd :=_afb [0].ValueNumber ;if _ccd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bcff ,_gfg :=_egbf (_afb [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_gdgd );if _gfg .Type ==ResultTypeError {return nil ,_gfg ;};_dedc ,_gfg :=_egbf (_afb [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_gdgd );if _gfg .Type ==ResultTypeError {return nil ,_gfg ;};if _dedc < _bcff {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _afb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbdb :=_afb [3].ValueNumber ;if _bbdb < 0||_bbdb > _ccd {return nil ,MakeErrorResultType (ErrorTypeNum ,_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _afb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdbf :=int (_afb [4].ValueNumber );if _gdbf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdgd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _afb [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_edd :=_afb [5].ValueNumber ;if _edd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gdgd +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_edgf :=0;if _adff ==7&&_afb [6].Type !=ResultTypeEmpty {if _afb [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gdgd +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edgf =int (_afb [6].ValueNumber );if !_eeaa (_edgf )||_edgf ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gdgd );};};return &amorArgs {_ccd ,_bcff ,_dedc ,_bbdb ,_gdbf ,_edd ,_edgf },_gea ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_babef :=0;_cdgf :=false ;for _ ,_dabdb :=range args {switch _dabdb .Type {case ResultTypeList ,ResultTypeArray :_bcda :=Xor (_dabdb .ListValues ());if _bcda .Type ==ResultTypeError {return _bcda ;};if _bcda .ValueNumber !=0{_babef ++;};_cdgf =true ;case ResultTypeNumber :if _dabdb .ValueNumber !=0{_babef ++;};_cdgf =true ;case ResultTypeString :case ResultTypeError :return _dabdb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_cdgf {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_babef %2!=0);};var _dfab ,_cdeaa ,_gfea ,_aefef ,_degc ,_facce ,_cacga ,_bdca ,_fbee ,_dcge ,_cebg ,_acfd ,_adefc ,_daddb ,_fcfe *_db .Regexp ;

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfda :=ctx .GetEpoch ();_fagb ,_dbae :=_dbag (args [0].Value (),_bfda );if _dbae !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_fagb .Year ()));};

// Update updates references in the Range after removing a row/column.
func (_dgba Range )Update (q *_da .UpdateQuery )Expression {_bbabg :=_dgba ;if q .UpdateCurrentSheet {_bbabg ._gbgbe =_dgba ._gbgbe .Update (q );_bbabg ._faccc =_dgba ._faccc .Update (q );};return _bbabg ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caff :=args [0];if _caff .Type ==ResultTypeList {_aeeg :=[][]Result {};for _ ,_fdaeb :=range _caff .ValueList {_aeeg =append (_aeeg ,[]Result {_fdaeb });};return MakeArrayResult (_aeeg );};_ecffe :=make ([][]Result ,len (_caff .ValueArray [0]));for _ ,_cffad :=range _caff .ValueArray {for _ebg ,_addd :=range _cffad {_ecffe [_ebg ]=append (_ecffe [_ebg ],_addd );};};return MakeArrayResult (_ecffe );};var _cdbfdc _b .Mutex ;

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_addb :=len (args );if _addb !=5&&_addb !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgab ,_cdea ,_egfa :=_gage (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _egfa .Type ==ResultTypeError {return _egfa ;};_deab ,_egfa :=_egbf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _egfa .Type ==ResultTypeError {return _egfa ;};if _deab >=_cgab {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ecdbd :=args [3].ValueNumber ;if _ecdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbf :=args [4].ValueNumber ;if _bbf <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_addf :=0;if _addb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_addf =int (args [5].ValueNumber );if !_eeaa (_addf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_faccg ,_egfa :=_debf (_deab ,_cdea ,_addf );if _egfa .Type ==ResultTypeError {return _egfa ;};_gaaf ,_egfa :=_debf (_deab ,_cgab ,_addf );if _egfa .Type ==ResultTypeError {return _egfa ;};_aagde ,_egfa :=_debf (_cgab ,_cdea ,_addf );if _egfa .Type ==ResultTypeError {return _egfa ;};_ccef :=1+_faccg *_ecdbd ;_ccef /=_bbf /100+_gaaf *_ecdbd ;_ccef --;_ccef /=_aagde ;return MakeNumberResult (_ccef );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_eeb ConstArrayExpr )Update (q *_da .UpdateQuery )Expression {return _eeb };func (_gc BinOpType )String ()string {if _gc >=BinOpType (len (_ccc )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_gc );};return _bac [_ccc [_gc ]:_ccc [_gc +1]];};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_accg :=args [0].AsNumber ();if _accg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfddd :=float64 (1);_fbeac :=args [1].AsNumber ();if _fbeac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cfddd =_fbeac .ValueNumber ;if _cfddd < 0&&_accg .ValueNumber > 0||_cfddd > 0&&_accg .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_eadcg :=_accg .ValueNumber ;_eadcg ,_gdffe :=_gfd .Modf (_eadcg /_cfddd );if _gfd .Trunc (_gdffe +0.5)> 0{_eadcg ++;};return MakeNumberResult (_eadcg *_cfddd );};func _cgaa (_bbe ,_bgbg ,_gedf ,_bege ,_bfcg float64 ,_cdf int )Result {_add ,_edb :=_debf (_bbe ,_bgbg ,_cdf );if _edb .Type ==ResultTypeError {return _edb ;};_cefd ,_bgad :=_gfbe (_bbe ,_bgbg ,int (_bfcg ),_cdf );if _bgad .Type ==ResultTypeError {return _bgad ;};_aea :=0.0;_cdce :=0.0;_gedf *=100/_bfcg ;_bege /=_bfcg ;_bege ++;_acdb :=_add *_bfcg -_cefd ;for _dffg :=1.0;_dffg < _cefd ;_dffg ++{_gacc :=_dffg +_acdb ;_cac :=_gedf /_gfd .Pow (_bege ,_gacc );_cdce +=_cac ;_aea +=_gacc *_cac ;};_gfaa :=(_gedf +100)/_gfd .Pow (_bege ,_cefd +_acdb );_cdce +=_gfaa ;_aea +=(_cefd +_acdb )*_gfaa ;_aea /=_cdce ;_aea /=_bfcg ;return MakeNumberResult (_aea );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cacb :=args [0].Ref ;for _cacb .Type ==ReferenceTypeNamedRange {_cacb =ctx .NamedRange (_cacb .Value );};_cgbd :="";switch _cacb .Type {case ReferenceTypeCell :_cgbd =_cacb .Value ;case ReferenceTypeRange :_ggbg :=_dcf .Split (_cacb .Value ,"\u003a");if len (_ggbg )==2{_cgbd =_ggbg [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_cacb .Type ));};_acab ,_dfgd :=_bfd .ParseCellReference (_cgbd );if _dfgd !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_dfgd .Error ()));};_efcfa ,_ddec ,_gdgf :=_acab .Column ,_acab .RowIdx ,_acab .SheetName ;_cdfg :=args [1].AsNumber ();if _cdfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_cfff :=args [2].AsNumber ();if _cfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _degee ,_gefc Result ;if len (args )==3{_degee =MakeNumberResult (1);_gefc =MakeNumberResult (1);}else {_degee =args [3].AsNumber ();if _degee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _degee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gefc =args [4].AsNumber ();if _gefc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gefc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_bbbbe :=_bfd .ColumnToIndex (_efcfa );_gfgeb :=_ddec +uint32 (_cdfg .ValueNumber );_fcag :=_bbbbe +uint32 (_cfff .ValueNumber );_ecfa :=_gfgeb +uint32 (_degee .ValueNumber );_bcfa :=_fcag +uint32 (_gefc .ValueNumber );if _degee .ValueNumber > 0{_ecfa --;}else {_ecfa ++;_gfgeb ,_ecfa =_ecfa ,_gfgeb ;};if _gefc .ValueNumber > 0{_bcfa --;}else {_bcfa ++;_fcag ,_bcfa =_bcfa ,_fcag ;};_dbfe :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_bfd .IndexToColumn (_fcag ),_gfgeb );_fdgb :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_bfd .IndexToColumn (_bcfa ),_ecfa );if _gdgf ==""{return _badgc (ctx ,ev ,_dbfe ,_fdgb );}else {return _badgc (ctx .Sheet (_gdgf ),ev ,_dbfe ,_fdgb );};};func _egec (_bcfaa Result )*criteriaParsed {_aebad :=_bcfaa .Type ==ResultTypeNumber ;_ffda :=_bcfaa .ValueNumber ;_dgef :=_dcf .ToLower (_bcfaa .ValueString );_aefg :=_bgee (_dgef );return &criteriaParsed {_aebad ,_ffda ,_dgef ,_aefg };};func _ee (_eeg BinOpType ,_fafc [][]Result ,_eda Result )Result {_egb :=[][]Result {};for _fb :=range _fafc {_cedf :=_dcfe (_eeg ,_fafc [_fb ],_eda );if _cedf .Type ==ResultTypeError {return _cedf ;};_egb =append (_egb ,_cedf .ValueList );};return MakeArrayResult (_egb );};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_aefa :=len (args );if _aefa !=4&&_aefa !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbad ,_ceeb ,_ffa :=_gage (args [0],args [1],"\u0044\u0049\u0053\u0043");if _ffa .Type ==ResultTypeError {return _ffa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggcb :=args [2].ValueNumber ;if _ggcb <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbece :=args [3].ValueNumber ;if _cbece <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eecc :=0;if _aefa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eecc =int (args [4].ValueNumber );if !_eeaa (_eecc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_bgggd ,_ffa :=_debf (_bbad ,_ceeb ,_eecc );if _ffa .Type ==ResultTypeError {return _ffa ;};return MakeNumberResult ((_cbece -_ggcb )/_cbece /_bgggd );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gebd :=args [0].AsNumber ();if _gebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gebd .ValueNumber < 0{return MakeNumberResult (-1);}else if _gebd .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dggc :=args [0].AsNumber ();if _dggc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfba :=_gfd .Signbit (_dggc .ValueNumber );_ffce ,_gaded :=_gfd .Modf (_dggc .ValueNumber /2);_eafa :=_ffce *2;if _gaded !=0{if !_bfba {_eafa +=2;}else {_eafa -=2;};};return MakeNumberResult (_eafa );};func _aee (_dce float64 )_bf .Time {_fbc :=int64 ((_dce -_aegc )*_bga );return _bf .Unix (0,_fbc ).UTC ();};

// Reference returns a string reference value to a named range.
func (_agda NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_agda ._bdfb };};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_cbfa ,_cdgb :=_eade (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _cdgb .Type ==ResultTypeError {return _cdgb ;};_bcd :=_cbfa ._cfc ;_cbb :=_cbfa ._bacb ;_dgcg :=_cbfa ._dee ;_egaa :=_cbfa ._eeebe ;_dbd :=_cbfa ._faea ;_bgged :=_cbfa ._gade ;return _cgaa (_bcd ,_cbb ,_dgcg ,_egaa ,_dbd ,_bgged );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_ecegb NamedRangeRef )Update (q *_da .UpdateQuery )Expression {return _ecegb };

// Eval evaluates and returns the result of a formula.
func (_bggg *defEval )Eval (ctx Context ,formula string )Result {_deb :=ParseString (formula );_bgd :=make (chan Result );go func (){if _deb ==nil {_bgd <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_bggg .checkLastEvalIsRef (ctx ,_deb );_bgd <-_deb .Eval (ctx ,_bggg );};}();select{case _dfd :=<-_bgd :return _dfd ;case <-_bf .After (_cad ):_ed .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgcc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfgf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdb :=args [2].ValueNumber ;if _bdb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dgcc -_dfgf )/_bdb );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_cdbfdc .Lock ();defer _cdbfdc .Unlock ();if _fecgd ,_dfeab :=_geddf [name ];_dfeab {return _fecgd ;};return nil ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddbf :=args [0].AsNumber ();_accbg :=args [1].AsNumber ();if _ddbf .Type !=ResultTypeNumber ||_accbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _accbg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_gfd .Trunc (_ddbf .ValueNumber /_accbg .ValueNumber ));};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_fdgf PrefixRangeExpr )Update (q *_da .UpdateQuery )Expression {_ggbab :=_fdgf ;_gbgba :=_fdgf ._cegg .String ();if _gbgba ==q .SheetToUpdate {_baffc :=*q ;_baffc .UpdateCurrentSheet =true ;_ggbab ._ggae =_fdgf ._ggae .Update (&_baffc );_ggbab ._bbafd =_fdgf ._bbafd .Update (&_baffc );};return _ggbab ;};const _eefd =57348;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fafg :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gdffd :=args [2].ValueNumber +1;if _gdffd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_aagc :=_fcef (args [0]);_bfdaf :=float64 (len (_aagc ));_cgfdb ,_agegb :=0.0,0.0;_eecb ,_gcdb :=1.0,1.0;_cfge ,_gfdg :=false ,false ;for _ ,_added :=range _aagc {for _ ,_eeabg :=range _added {if _eeabg .Type ==ResultTypeNumber &&!_eeabg .IsBoolean {_bffef :=_eeabg .ValueNumber ;if _bffef ==0{continue ;}else {if _bffef > 0{_cfge =true ;_agegb +=_eeabg .ValueNumber *_gcdb ;}else {_gfdg =true ;_cgfdb +=_eeabg .ValueNumber *_eecb ;};_eecb /=_fafg ;_gcdb /=_gdffd ;};};};};if !_cfge ||!_gfdg {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eabf :=-_agegb /_cgfdb ;_eabf *=_gfd .Pow (_gdffd ,_bfdaf -1);_eabf =_gfd .Pow (_eabf ,1/(_bfdaf -1));return MakeNumberResult (_eabf -1);};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_cage :=len (args );if _cage !=4&&_cage !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdb :=args [0].ValueNumber ;if _fdb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcfg :=args [1].ValueNumber ;if _gcfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebf :=args [2].ValueNumber ;if _ebf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbgc :=args [3].ValueNumber ;if _dbgc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _dbgc > _ebf {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_cbac :=2.0;if _cage ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbac =args [4].ValueNumber ;if _cbac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_ebaa (_fdb ,_gcfg ,_ebf ,_dbgc ,_cbac ));};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fgaa :=MakeNumberResult (0);for _ ,_egdag :=range args {_egdag =_egdag .AsNumber ();switch _egdag .Type {case ResultTypeNumber :_fgaa .ValueNumber +=_egdag .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dgbfe :=Sum (_egdag .ListValues ());if _dgbfe .Type !=ResultTypeNumber {return _dgbfe ;};_fgaa .ValueNumber +=_dgbfe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _egdag ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egdag .Type ));};};return _fgaa ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdafb :=args [0].AsNumber ();_bbdc :=args [1].AsNumber ();if _cdafb .Type !=ResultTypeNumber ||_bbdc .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fbad :=_gfd .Trunc (_cdafb .ValueNumber );_afbd :=_gfd .Trunc (_bbdc .ValueNumber );if _afbd > _fbad {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _afbd ==_fbad ||_afbd ==0{return MakeNumberResult (1);};_cegef :=float64 (1);for _fccb :=float64 (1);_fccb <=_afbd ;_fccb ++{_cegef *=(_fbad +1-_fccb )/_fccb ;};return MakeNumberResult (_cegef );};func _gbcf (_fecb ,_aaf float64 ,_ffea ,_bgdc int )float64 {_gabe :=_aee (_fecb );_fbfg :=_aee (_aaf );_gbaf :=_fbb (_gabe ,_fbfg ,_ffea );return _edfg (_gabe ,_gbaf ,_bgdc );};const _bbdgc int =30;var _adgag =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbccb :=args [0].AsString ();if _gbccb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_dcf .ToUpper (_gbccb .ValueString ));};const _cegcb =57362;func (_dgbba PrefixVerticalRange )verticalRangeReference (_abag string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_abag ,_dgbba ._abdc ,_dgbba ._bfbbe );};var _beef ,_cbaa ,_eeaff ,_fgdeg ,_eggg ,_efegf *_db .Regexp ;func _dadb (_gggd []Result ,_gcbef countMode )float64 {_acgc :=0.0;for _ ,_bcfad :=range _gggd {switch _bcfad .Type {case ResultTypeNumber :if _gcbef ==_dbfd ||(_gcbef ==_fdeb &&!_bcfad .IsBoolean ){_acgc ++;};case ResultTypeList ,ResultTypeArray :_acgc +=_dadb (_bcfad .ListValues (),_gcbef );case ResultTypeString :if _gcbef ==_dbfd {_acgc ++;};case ResultTypeEmpty :if _gcbef ==_aagfd {_acgc ++;};};};return _acgc ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_afdf :=args [0].AsNumber ();if _afdf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfde ,_cdbfd :=_gfd .Modf (_afdf .ValueNumber );if _cdbfd < 0{_dfde --;};return MakeNumberResult (_dfde );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_cabab ,_fdegf ,_gagb :=_fgefg (from ,to );if _gagb !=nil {_ed .Log (_gagb .Error ());return NewError (_gagb .Error ());};return Range {_gbgbe :_cabab ,_faccc :_fdegf };};var _faa =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_cadgd :=_fc .Buffer {};for _ ,_feff :=range args {switch _feff .Type {case ResultTypeString :_cadgd .WriteString (_feff .ValueString );case ResultTypeNumber :var _cbdef string ;if _feff .IsBoolean {if _feff .ValueNumber ==0{_cbdef ="\u0046\u0041\u004cS\u0045";}else {_cbdef ="\u0054\u0052\u0055\u0045";};}else {_cbdef =_feff .AsString ().ValueString ;};_cadgd .WriteString (_cbdef );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_cadgd .String ());};const _bac ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func (_abfc *noCache )GetFromCache (key string )(Result ,bool ){return _gea ,false };

// String returns a string representation of SheetPrefixExpr.
func (_bcegbc SheetPrefixExpr )String ()string {return _bcegbc ._bace };func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Reference returns an invalid reference for BinaryExpr.
func (_eaf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// IsDBCS returns false for the invalid reference context.
func (_ccdce *ivr )IsDBCS ()bool {return false };

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebfe :=args [0].AsString ();if _ebfe .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_aaag :="\u0041\u0031";if len (args )==2{_dcfa :=args [1].Ref ;if _dcfa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_aaag =_dcfa .Value ;};switch _ebfe .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_afbfe ,_baaed :=_bfd .ParseCellReference (_aaag );if _baaed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aaag );};_daae :="\u0024"+_afbfe .Column +"\u0024"+_ab .Itoa (int (_afbfe .RowIdx ));if _afbfe .SheetName !=""{_daae =_afbfe .SheetName +"\u0021"+_daae ;};return MakeStringResult (_daae );case "\u0063\u006f\u006c":_fbfadg ,_bbbf :=_bfd .ParseCellReference (_aaag );if _bbbf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aaag );};return MakeNumberResult (float64 (_fbfadg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_dgca :=_dcf .Contains (ctx .GetFormat (_aaag ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_dgca );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dfcg :="\u0047";_bgcb :=ctx .GetFormat (_aaag );if _bgcb =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_dfab .MatchString (_bgcb ){_dfcg ="\u0046\u0030";}else if _bgcb =="\u0030\u0025"{_dfcg ="\u0050\u0030";}else if _bgcb =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dfcg ="\u0044\u0032";}else if _bgcb =="\u004d\u004d\u002fY\u0059"{_dfcg ="\u0044\u0033";}else if _bgcb =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_bgcb =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dfcg ="\u0044\u0034";}else if _bgcb =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dfcg ="\u0044\u0035";}else if _bgcb =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfcg ="\u0044\u0036";}else if _bgcb =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfcg ="\u0044\u0037";}else if _bgcb =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dfcg ="\u0044\u0038";}else if _bgcb =="\u0048\u0048\u003aM\u004d"{_dfcg ="\u0044\u0039";}else if _gfea .MatchString (_bgcb ){_dfcg ="\u002e\u0030";}else if _aefef .MatchString (_bgcb ){_dfcg ="\u002e\u0030\u0028\u0029";}else if _dcge .MatchString (_bgcb ){_dfcg ="\u0043\u0030";}else if _adefc .MatchString (_bgcb )||_daddb .MatchString (_bgcb ){_dfcg ="\u0044\u0031";}else if _cgfe :=_cdeaa .FindStringSubmatch (_bgcb );len (_cgfe )> 1{_dfcg ="\u0046"+_ab .Itoa (len (_cgfe [1]));}else if _gfdb :=_facce .FindStringSubmatch (_bgcb );len (_gfdb )> 1{_dfcg ="\u002e"+_ab .Itoa (len (_gfdb [2]));}else if _gebf :=_fbee .FindStringSubmatch (_bgcb );len (_gebf )> 1{_dfcg ="\u0050"+_ab .Itoa (len (_gebf [2]));}else if _bbae :=_cebg .FindStringSubmatch (_bgcb );len (_bbae )> 1{_dfcg ="\u0043"+_ggdcb (_bbae ,1);}else if _gfefc :=_acfd .FindStringSubmatch (_bgcb );len (_gfefc )> 1{_dfcg ="\u0043"+_ggdcb (_gfefc ,1);}else if _dfgff :=_cacga .FindStringSubmatch (_bgcb );len (_dfgff )> 1{_dfcg ="\u002e"+_ggdcb (_dfgff ,1)+"\u0028\u0029";}else if _cgga :=_degc .FindStringSubmatch (_bgcb );len (_cgga )> 1{_dfcg ="\u002e"+_ggdcb (_cgga ,1);}else if _eggc :=_fcfe .FindStringSubmatch (_bgcb );len (_eggc )> 1{_dfcg ="\u0053"+_ggdcb (_eggc ,3);};if _dfcg !="\u0047"&&_dcf .Contains (_bgcb ,"\u005b\u0052\u0045D\u005d"){_dfcg +="\u002d";};return MakeStringResult (_dfcg );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_bdfg :=ctx .GetFormat (_aaag );if _bdca .MatchString (_bdfg ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_aaag ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_efgdd :=0.0;if ctx .GetLocked (_aaag ){_efgdd =1.0;};return MakeNumberResult (_efgdd );case "\u0072\u006f\u0077":_caffd ,_ecacg :=_bfd .ParseCellReference (_aaag );if _ecacg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aaag );};return MakeNumberResult (float64 (_caffd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_bada ,_ggfa :=_bfd .ParseCellReference (_aaag );if _ggfa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aaag );};if _bada .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_bada .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_bada .SheetName ).GetWidth (int (_bada .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_ebfe .ValueString );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eadg :=args [0].AsNumber ();_bfbgg :=args [1].AsNumber ();if _eadg .Type !=ResultTypeNumber ||_bfbgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbgd :=_gfd .Trunc (_eadg .ValueNumber );_bfad :=_gfd .Trunc (_bfbgg .ValueNumber );if _gbgd < _bfad {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _gbgd ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_gbgd +_bfad -1);args [1]=MakeNumberResult (_gbgd -1);return Combin (args );};

// String returns a string representation of ConstArrayExpr.
func (_de ConstArrayExpr )String ()string {return ""};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfgd :=args [0].ValueNumber ;if _gfgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_dbgdf ,_cdag :=_adfb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _cdag .Type ==ResultTypeError {return _cdag ;};_cagg :=_dbgdf ._adeg ;_cbfd :=_dbgdf ._bdcd ;_dadg :=0.0;_cgcc :=_cbfd [0];for _fcbd ,_cdgd :=range _cagg {_dadg +=_cdgd /_gfd .Pow (1+_gfgd ,(_cbfd [_fcbd ]-_cgcc )/365);};return MakeNumberResult (_dadg );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ec ,_ce Expression ;_ac BinOpType ;};func _cccb (_ccba _bf .Time )bool {return _bf .Now ().Sub (_ccba )>=_gccc };

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_ecda :=len (args );if _ecda !=6&&_ecda !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbcb ,_dcac ,_ccda :=_gage (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _ccda .Type ==ResultTypeError {return _ccda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbfcf :=args [2].ValueNumber ;if _gbfcf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bfbb :=args [3].ValueNumber ;if _bfbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daba :=args [4].ValueNumber ;if _daba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecacf :=args [5];if _ecacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bddf :=_ecacf .ValueNumber ;if !_dcd (_bddf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fbea :=0;if _ecda ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbea =int (args [6].ValueNumber );if !_eeaa (_fbea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_dgbc ,_ccda :=_bgfe (_dbcb ,_dcac ,_gbfcf ,_bfbb ,_daba ,_bddf ,_fbea );if _ccda .Type ==ResultTypeError {return _ccda ;};return MakeNumberResult (_dgbc );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cebdd (args ,false )};var (_fffeb =0;_ebfec =false ;);

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcf :=true ;for _ ,_dabb :=range args {_dabb =_dabb .AsNumber ();switch _dabb .Type {case ResultTypeList ,ResultTypeArray :_dggb :=And (_dabb .ListValues ());if _dggb .Type ==ResultTypeError {return _dggb ;};if _dggb .ValueNumber ==0{_egcf =false ;};case ResultTypeNumber :if _dabb .ValueNumber ==0{_egcf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _dabb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_egcf );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cbab (args ,_acdbd )};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aagf :=int (args [0].ValueNumber );if _aagf < 0||_aagf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _aagf <=1899{_aagf +=1900;};_adbd :=_bf .Month (args [1].ValueNumber );_cadb :=int (args [2].ValueNumber );_cabg :=_dfeb (_aagf ,_adbd ,_cadb );_gda :=_cabga (_fd ,_cabg )+1;if _gda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_gda );};

// GetWidth returns 0 for the invalid reference context.
func (_fcaeb *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcadf :=args [0];switch _fcadf .Type {case ResultTypeError :return _fcadf ;case ResultTypeNumber ,ResultTypeString :return _ggad (args [0]);case ResultTypeList :_bcef :=_fcadf .ValueList ;_efgbb :=[]Result {};for _ ,_fgegd :=range _bcef {_dbec :=_ggad (_fgegd );if _dbec .Type ==ResultTypeError {return _dbec ;};_efgbb =append (_efgbb ,_dbec );};return MakeListResult (_efgbb );case ResultTypeArray :_eefcf :=_fcadf .ValueArray ;_gcaba :=[][]Result {};for _ ,_edbgb :=range _eefcf {_daaf :=[]Result {};for _ ,_fbfe :=range _edbgb {_ffagd :=_ggad (_fbfe );if _ffagd .Type ==ResultTypeError {return _ffagd ;};_daaf =append (_daaf ,_ffagd );};_gcaba =append (_gcaba ,_daaf );};return MakeArrayResult (_gcaba );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func (_feda *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_gdcbe :=_dadc (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _gdcbe .Type !=ResultTypeEmpty {return _gdcbe ;};_bafad :=_ddad (args [1:]);_eaee :=0.0;_gedd :=_fcef (args [0]);for _ ,_fbeed :=range _bafad {_eaee +=_gedd [_fbeed ._caca ][_fbeed ._eaeed ].ValueNumber ;};return MakeNumberResult (float64 (_eaee ));};const (_fdeb countMode =iota ;_dbfd ;_aagfd ;);

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ec :lhs ,_ce :rhs ,_ac :op };};func _gfdd (_cgac ,_fgcf []string )[]string {for _ ,_aeef :=range _fgcf {_cgac =append (_cgac ,_aeef );};return _cgac ;};func _badgc (_gbbb Context ,_beaab Evaluator ,_gdde ,_agcga string )Result {_cddd ,_ebaba :=_bfd .ParseCellReference (_gdde );if _ebaba !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gdde ,_ebaba .Error ()));};_fedb ,_fcgaa :=_cddd .ColumnIdx ,_cddd .RowIdx ;_fggca ,_fbgca :=_bfd .ParseCellReference (_agcga );if _fbgca !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_agcga ,_fbgca .Error ()));};_abgf ,_gdfce :=_fggca .ColumnIdx ,_fggca .RowIdx ;_gcca :=[][]Result {};for _egbfa :=_fcgaa ;_egbfa <=_gdfce ;_egbfa ++{_accfc :=[]Result {};for _adfdb :=_fedb ;_adfdb <=_abgf ;_adfdb ++{_cdddb :=_gbbb .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_bfd .IndexToColumn (_adfdb ),_egbfa ),_beaab );_accfc =append (_accfc ,_cdddb );};_gcca =append (_gcca ,_accfc );};if len (_gcca )==1{if len (_gcca [0])==1{return _gcca [0][0];};return MakeListResult (_gcca [0]);};return MakeArrayResult (_gcca );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gbgeaf ,_fddb :=_afcb (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _fddb .Type ==ResultTypeError {return _fddb ;};_bbab :=_gbgeaf ._eega ;_fecg :=_gbgeaf ._gdfd ;_acff :=_gbgeaf ._ffeaa ;_dadd :=_gbgeaf ._agef ;_gegg :=_gbgeaf ._edfgc ;_dcba :=_gbgeaf ._bbg ;_gge :=_gbgeaf ._ffb ;_dged ,_afgg :=_debf (_fecg ,_acff ,_gge );if _afgg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_defd :=_dged *_dcba *_bbab ;if _gegg ==0{return MakeNumberResult (_defd );};_ecdb :=_bbab *_dcba ;_acgf :=_bbab -_dadd ;_eaa :=int ((_acgf -_defd )/_ecdb );if _gegg <=_eaa {return MakeNumberResult (_ecdb );}else if _gegg ==_eaa +1{return MakeNumberResult (_acgf -_ecdb *float64 (_eaa )-_defd );}else {return MakeNumberResult (0);};};func _dabg (_afac string )bool {for _ ,_deae :=range _ddg {_aec :=_deae .FindStringSubmatch (_afac );if len (_aec )> 1{return true ;};};return false ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func _ggdcb (_ecce []string ,_gead int )string {return _ab .Itoa (len (_ecce [len (_ecce )-1-_gead ]))};const _fgbgg =57346;const _bbac =57365;func _ecbb (_egfg Result ,_eggce ,_ecbdd string )(float64 ,Result ){switch _egfg .Type {case ResultTypeEmpty :return 0,_gea ;case ResultTypeNumber :return _egfg .ValueNumber ,_gea ;case ResultTypeString :_bfcd ,_adcd :=_ab .ParseFloat (_egfg .ValueString ,64);if _adcd !=nil {return 0,MakeErrorResult (_ecbdd +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_eggce );};return _bfcd ,_gea ;default:return 0,MakeErrorResult (_eggce +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ecbdd +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_gfcb ,_cbgd ,_fbac :=_abec (args );if _fbac .Type ==ResultTypeError {return _fbac ;};return MakeNumberResult (_feae (_gfcb )/_cbgd );};func (_dgegb *plex )Lex (lval *yySymType )int {_ebfec =true ;_ccceg :=<-_dgegb ._dfdfg ;if _ccceg !=nil {lval ._agde =_ccceg ;return int (lval ._agde ._cdga );};return 0;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fedg :=[]float64 {};for _ ,_afdcb :=range args {switch _afdcb .Type {case ResultTypeString :_cgfgf :=_afdcb .AsNumber ();if _cgfgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fedg =append (_fedg ,_cgfgf .ValueNumber );case ResultTypeList :_gdbe :=LCM (_afdcb .ValueList );if _gdbe .Type !=ResultTypeNumber {return _gdbe ;};_fedg =append (_fedg ,_gdbe .ValueNumber );case ResultTypeNumber :_fedg =append (_fedg ,_afdcb .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _afdcb ;};};if len (_fedg )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _fedg [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_fedg )==1{return MakeNumberResult (_fedg [0]);};_caadb :=_fedg [0];for _adgge :=1;_adgge < len (_fedg );_adgge ++{if _fedg [_adgge ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_caadb =_ggdeg (_caadb ,_fedg [_adgge ]);};return MakeNumberResult (_caadb );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bdfb string };func _bgfe (_fcgf ,_faac ,_baage ,_cbea ,_gegd ,_feb float64 ,_fceg int )(float64 ,Result ){_cddc :=int (_feb );_acae :=_ecae (_fcgf ,_faac ,_cddc ,_fceg );_gegge :=_gbcf (_fcgf ,_faac ,_cddc ,_fceg )/_acae ;_gaagd ,_bfbg :=_gfbe (_fcgf ,_faac ,_cddc ,_fceg );if _bfbg .Type ==ResultTypeError {return 0,_bfbg ;};_aede :=_gdff (_fcgf ,_faac ,_cddc ,_fceg );_bdgf :=_gegd /_gfd .Pow (1+_cbea /_feb ,_gaagd -1+_gegge );_bdgf -=100*_baage /_feb *_aede /_acae ;_gegc :=100*_baage /_feb ;_gfef :=1+_cbea /_feb ;for _facc :=0.0;_facc < _gaagd ;_facc ++{_bdgf +=_gegc /_gfd .Pow (_gfef ,_facc +_gegge );};return _bdgf ,MakeEmptyResult ();};var _dcfd =map[string ]*_db .Regexp {};var _efgdf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _debf (_gde ,_fabb float64 ,_cgdb int )(float64 ,Result ){_gddc ,_abc :=_aee (_gde ),_aee (_fabb );_adfa :=_gddc .Unix ();_dac :=_abc .Unix ();if _adfa ==_dac {return 0,_gea ;};_aca ,_bcb ,_abfa :=_gddc .Date ();_dbff ,_ebee ,_fde :=_abc .Date ();_dbbe ,_dfb :=int (_bcb ),int (_ebee );var _dgf ,_aaee float64 ;switch _cgdb {case 0:if _abfa ==31{_abfa --;};if _abfa ==30&&_fde ==31{_fde --;}else if _geee :=_geb (_aca );_dbbe ==2&&((_geee &&_abfa ==29)||(!_geee &&_abfa ==28)){_abfa =30;if _bfag :=_geb (_dbff );_dfb ==2&&((_bfag &&_fde ==29)||(!_bfag &&_fde ==28)){_fde =30;};};_dgf =float64 ((_dbff -_aca )*360+(_dfb -_dbbe )*30+(_fde -_abfa ));_aaee =360;case 1:_dgf =_fabb -_gde ;_gff :=_aca !=_dbff ;if _gff &&(_dbff !=_aca +1||_dbbe < _dfb ||(_dbbe ==_dfb &&_abfa < _fde )){_gacd :=0;for _cfg :=_aca ;_cfg <=_dbff ;_cfg ++{_gacd +=_ega (_cfg ,1);};_aaee =float64 (_gacd )/float64 (_dbff -_aca +1);}else {if !_gff &&_geb (_aca ){_aaee =366;}else {if _gff &&((_geb (_aca )&&(_dbbe < 2||(_dbbe ==2&&_abfa <=29)))||(_geb (_dbff )&&(_dfb > 2||(_dfb ==2&&_fde ==29)))){_aaee =366;}else {_aaee =365;};};};case 2:_dgf =_fabb -_gde ;_aaee =360;case 3:_dgf =_fabb -_gde ;_aaee =365;case 4:if _abfa ==31{_abfa --;};if _fde ==31{_fde --;};_dgf =float64 ((_dbff -_aca )*360+(_dfb -_dbbe )*30+(_fde -_abfa ));_aaee =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _dgf /_aaee ,_gea ;};

// LastRow returns 0 for the invalid reference context.
func (_cbdgeg *ivr )LastRow (colFrom string )int {return 0};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_cdba :=len (args );if _cdba < 3||_cdba > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_eaeg :=args [1].ValueNumber ;if _eaeg !=float64 (int (_eaeg )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgef :=args [2].ValueNumber ;_bdge :=0.0;if _cdba >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdge =args [3].ValueNumber ;};_bdfe :=0.0;if _cdba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdfe =args [4].ValueNumber ;if _bdfe !=0{_bdfe =1;};};if _bbeb ==0{return MakeNumberResult (-_fgef *_eaeg -_bdge );}else {return MakeNumberResult ((((1-_gfd .Pow (1+_bbeb ,_eaeg ))/_bbeb )*_fgef *(1+_bbeb *_bdfe )-_bdge )/_gfd .Pow (1+_bbeb ,_eaeg ));};};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};type criteriaParsed struct{_bffc bool ;_cdfbg float64 ;_addc string ;_bdae *criteriaRegex ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccfdc :=args [0].AsNumber ();if _ccfdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdddg :=int (_ccfdc .ValueNumber );if _gdddg < 0||_gdddg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_gdddg ));};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_afgf :=len (args );if _afgf !=3&&_afgf !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cacgc ,_bagaa :=_baece (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _bagaa .Type ==ResultTypeError {return _bagaa ;};_ggeg ,_bagaa :=_baece (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _bagaa .Type ==ResultTypeError {return _bagaa ;};_gdag ,_bagaa :=_baece (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _bagaa .Type ==ResultTypeError {return _bagaa ;};_cgefe :=0;if _afgf ==3{return MakeStringResult (_dcf .Replace (_cacgc ,_ggeg ,_gdag ,-1));}else {_gfbfe ,_ffgc :=_ecbb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _ffgc .Type ==ResultTypeError {return _ffgc ;};_cgefe =int (_gfbfe );if _cgefe < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_bbba :=_cacgc ;_degd :=_cgefe ;_cefbe :=-1;_fgad :=len (_ggeg );_gcbg :=0;for {_degd --;_bcged :=_dcf .Index (_bbba ,_ggeg );if _bcged ==-1{_cefbe =-1;break ;}else {_cefbe =_bcged +_gcbg ;if _degd ==0{break ;};_bfgfb :=_fgad +_bcged ;_gcbg +=_bfgfb ;_bbba =_bbba [_bfgfb :];};};if _cefbe ==-1{return MakeStringResult (_cacgc );}else {_cegdc :=_cacgc [:_cefbe ];_egcac :=_cacgc [_cefbe +_fgad :];return MakeStringResult (_cegdc +_gdag +_egcac );};};};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_accb :=int (args [0].ValueNumber );return MakeBoolResult (_accb !=_accb /2*2);};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_cdbfdc .Lock ();defer _cdbfdc .Unlock ();if _gbga ,_cecfa :=_cccfb [name ];_cecfa {return _gbga ;};return nil ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_dceda Expression ;_fdgba ,_dgefc int ;};func _ebfed (_fgab Context ,_fefaf ,_bedba int )(string ,string ){_deafd :="\u0041"+_ab .Itoa (_fefaf );_bgfeg :=_fgab .LastColumn (_fefaf ,_bedba );_aead :=_bgfeg +_ab .Itoa (_bedba );return _deafd ,_aead ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcedd :=args [0].Ref ;if _bcedd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_dfccc ,_facbe :=_bfd .ParseCellReference (_bcedd .Value );if _facbe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcedd .Value );};return MakeNumberResult (float64 (_dfccc .RowIdx ));};func _dbag (_dgcf string ,_acfdf _bf .Time )(_bf .Time ,error ){_edbg ,_ ,_cgda :=_gf .ParseFloat (_dgcf ,10,128,_gf .ToNearestEven );if _cgda !=nil {return _bf .Time {},_cgda ;};_dega :=new (_gf .Float );_dega .SetUint64 (uint64 (24*_bf .Hour ));_edbg .Mul (_edbg ,_dega );_bfeg ,_ :=_edbg .Uint64 ();_ccbg :=_acfdf .Add (_bf .Duration (_bfeg ));return _cfef (_ccbg ),nil ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbc :=args [0];switch _gbc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_afc :=_aee (_gbc .ValueNumber );return MakeNumberResult (float64 (_afc .Minute ()));case ResultTypeString :_dbf :=_dcf .ToLower (_gbc .ValueString );if !_dabg (_dbf ){_ ,_ ,_ ,_ded ,_dbed :=_gfbf (_dbf );if _dbed .Type ==ResultTypeError {_dbed .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _dbed ;};if _ded {return MakeNumberResult (0);};};_ ,_cae ,_ ,_ ,_ ,_fefe :=_dbb (_dbf );if _fefe .Type ==ResultTypeError {return _fefe ;};return MakeNumberResult (float64 (_cae ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _dfeb (_gfae int ,_cccf _bf .Month ,_bgfd int )int64 {if _gfae ==1900&&int (_cccf )<=2{_bgfd --;};_gfc :=_bf .Date (_gfae ,_cccf ,_bgfd ,0,0,0,0,_bf .UTC );return _gfc .Unix ();};

// String returns a string representation of PrefixExpr.
func (_aegfc PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_aegfc ._dgfe .String (),_aegfc ._cdadd .String ());};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gfee PrefixHorizontalRange )Update (q *_da .UpdateQuery )Expression {return _gfee };

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _cfef (_cadg _bf .Time )_bf .Time {_cadg =_cadg .UTC ();return _bf .Date (_cadg .Year (),_cadg .Month (),_cadg .Day (),_cadg .Hour (),_cadg .Minute (),_cadg .Second (),_cadg .Nanosecond (),_bf .Local );};

// String returns a string representation of a named range.
func (_fffbg NamedRangeRef )String ()string {return _fffbg ._bdfb };

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_eabc :=_dcf .ToLower (args [0].ValueString );if !_dabg (_eabc ){_ ,_ ,_ ,_cba ,_fec :=_gfbf (_eabc );if _fec .Type ==ResultTypeError {_fec .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fec ;};if _cba {return MakeNumberResult (0);};};_caf ,_fgbg ,_ggc ,_eff ,_ ,_cbc :=_dbb (_eabc );if _cbc .Type ==ResultTypeError {return _cbc ;};_dag :=_bcf (float64 (_caf ),float64 (_fgbg ),_ggc );if _eff {_dag +=0.5;}else if _dag >=1{_dag -=float64 (int (_dag ));};return MakeNumberResult (_dag );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_deaf :=len (args );if _deaf !=2&&_deaf !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_geea ,_cbbf :=_adfb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _cbbf .Type ==ResultTypeError {return _cbbf ;};_aabfc :=_geea ._adeg ;_cdeg :=_geea ._bdcd ;_aac :=0.1;if _deaf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aac =args [2].ValueNumber ;if _aac <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _egdgc (_aabfc ,_cdeg ,_aac );};

// Eval evaluates the binary expression using the context given.
func (_ef BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_edf :=_ef ._ec .Eval (ctx ,ev );if _edf .Type ==ResultTypeError {return _edf ;};_eb :=_ef ._ce .Eval (ctx ,ev );if _eb .Type ==ResultTypeError {return _eb ;};if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeArray {if !_fa (_edf .ValueArray ,_eb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _eg (_ef ._ac ,_edf .ValueArray ,_eb .ValueArray );}else if _edf .Type ==ResultTypeList {if len (_edf .ValueList )!=len (_eb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ad (_ef ._ac ,_edf .ValueList ,_eb .ValueList );};}else if _edf .Type ==ResultTypeArray &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return _ee (_ef ._ac ,_edf .ValueArray ,_eb );}else if _edf .Type ==ResultTypeList &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return _dcfe (_ef ._ac ,_edf .ValueList ,_eb );};switch _ef ._ac {case BinOpTypePlus :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeNumberResult (_edf .ValueNumber +_eb .ValueNumber );};};case BinOpTypeMinus :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeNumberResult (_edf .ValueNumber -_eb .ValueNumber );};};case BinOpTypeMult :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeNumberResult (_edf .ValueNumber *_eb .ValueNumber );};};case BinOpTypeDiv :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {if _eb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_edf .ValueNumber /_eb .ValueNumber );};};case BinOpTypeExp :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeNumberResult (_gfd .Pow (_edf .ValueNumber ,_eb .ValueNumber ));};};case BinOpTypeLT :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber < _eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString < _eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber > _eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString > _eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber ==_eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString ==_eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber )||(_edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ag (_eb ));}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_edf ));};case BinOpTypeNE :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber !=_eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString !=_eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber )||(_edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (!_ag (_eb ));}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (!_ag (_edf ));};case BinOpTypeLEQ :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber <=_eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString <=_eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ag (_eb ));}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_edf ));};case BinOpTypeGEQ :if _edf .Type ==_eb .Type {if _edf .Type ==ResultTypeNumber {return MakeBoolResult (_edf .ValueNumber >=_eb .ValueNumber );};if _edf .Type ==ResultTypeString {return MakeBoolResult (_edf .ValueString >=_eb .ValueString );};if _edf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _edf .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _edf .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _edf .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ag (_eb ));}else if (_edf .Type ==ResultTypeNumber ||_edf .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ag (_edf ));};case BinOpTypeConcat :return MakeStringResult (_edf .Value ()+_eb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_bebb :=len (args );if _bebb < 5||_bebb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbf :=args [0].ValueNumber ;if _cgbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgd :=args [1].ValueNumber ;if _cfgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfgf :=args [2].ValueNumber ;if _bfgf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bfgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfaf :=args [3].ValueNumber ;if _gfaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efdc :=args [4].ValueNumber ;if _gfaf > _efdc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _efdc > _bfgf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_cafd :=2.0;if _bebb > 5{if args [5].Type ==ResultTypeEmpty {_cafd =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cafd =args [5].ValueNumber ;if _cafd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_acdf :=false ;if _bebb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_acdf =args [6].ValueNumber !=0;};_cgeb :=0.0;_efbd :=_gfd .Floor (_gfaf );_cffe :=_gfd .Ceil (_efdc );if _acdf {for _fdge :=_efbd +1;_fdge <=_cffe ;_fdge ++{_aeaca :=_ebaa (_cgbf ,_cfgd ,_bfgf ,_fdge ,_cafd );if _fdge ==_efbd +1{_aeaca *=_gfd .Min (_efdc ,_efbd +1)-_gfaf ;}else if _fdge ==_cffe {_aeaca *=_efdc +1-_cffe ;};_cgeb +=_aeaca ;};}else {_dfbbf :=_bfgf ;var _bgga float64 ;if !_ddca (_gfaf ,_gfd .Floor (_gfaf )){if _cafd ==1{_bddde :=_bfgf /2;if _gfaf > _bddde ||_ddca (_gfaf ,_bddde ){_bgga =_gfaf -_bddde ;_gfaf =_bddde ;_efdc -=_bgga ;_dfbbf ++;};};};if _cafd !=0{_cgbf -=_egba (_cgbf ,_cfgd ,_bfgf ,_dfbbf ,_gfaf ,_cafd );};_cgeb =_egba (_cgbf ,_cfgd ,_bfgf ,_bfgf -_gfaf ,_efdc -_gfaf ,_cafd );};return MakeNumberResult (_cgeb );};var _acbbd =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Value returns a string version of the result.
func (_dfbgg Result )Value ()string {switch _dfbgg .Type {case ResultTypeNumber :_degb :=_ab .FormatFloat (_dfbgg .ValueNumber ,'f',-1,64);if len (_degb )> 12{_cdcf :=12;for _becb :=_cdcf ;_becb > 0&&_degb [_becb ]=='0';_becb --{_cdcf --;};_degb =_degb [0:_cdcf +1];};return _degb ;case ResultTypeError :return _dfbgg .ValueString ;case ResultTypeString :return _dfbgg .ValueString ;case ResultTypeList :if len (_dfbgg .ValueList )==0{return "";};return _dfbgg .ValueList [0].Value ();case ResultTypeArray :if len (_dfbgg .ValueArray )==0||len (_dfbgg .ValueArray [0])==0{return "";};return _dfbgg .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// FunctionCall is a function call expression.
type FunctionCall struct{_gaec string ;_edafd []Expression ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dcef ,_bfgd :=_aeea (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _bfgd .Type ==ResultTypeError {return _bfgd ;};_acgb :=_dcef ._bbbdb ;_cacg :=_dcef ._fecf ;_agcda :=_dcef ._agf ;_dbc :=_dcef ._agad ;_cgea :=_dcef ._ggf ;_adfaa :=_dcef ._eabd ;_begb :=_fdfgf (_acgb ,_cacg ,_agcda ,0,_adfaa );_bbce :=0.0;if _dbc ==1{if _adfaa ==0{_bbce =_begb +_agcda *_acgb ;}else {_bbce =_begb ;};_dbc ++;};for _gdca :=_dbc ;_gdca <=_cgea ;_gdca ++{if _adfaa ==1{_bbce +=_begb -(_gcdd (_acgb ,_gdca -2,_begb ,_agcda ,1)-_begb )*_acgb ;}else {_bbce +=_begb -_gcdd (_acgb ,_gdca -1,_begb ,_agcda ,0)*_acgb ;};};return MakeNumberResult (_bbce );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_cegg ,_ggae ,_bbafd Expression };

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fede :=args [0];if _fede .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgbb :=len (_fede .ValueArray );for _ ,_eagc :=range _fede .ValueArray {if len (_eagc )!=_dgbb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_fbceg (_fede .ValueArray ));};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgccb :=args [0].AsNumber ();if _dgccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcgdc :=float64 (0);if len (args )> 1{_adcab :=args [1].AsNumber ();if _adcab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcgdc =_adcab .ValueNumber ;};_dddg :=_dgccb .ValueNumber ;_ffee :=1.0;if _dcgdc >=0{_ffee =_gfd .Pow (1/10.0,_dcgdc );}else {return MakeNumberResult (0);};_dddg ,_aabc :=_gfd .Modf (_dddg /_ffee );_gdce :=0.99999;if _aabc > _gdce {_dddg ++;}else if _aabc < -_gdce {_dddg --;};_ =_aabc ;return MakeNumberResult (_dddg *_ffee );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_aegd ,_fcb :=_aeea (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _fcb .Type ==ResultTypeError {return _fcb ;};_adde :=_aegd ._bbbdb ;_abcc :=_aegd ._fecf ;_affd :=_aegd ._agf ;_aece :=_aegd ._agad ;_gcc :=_aegd ._ggf ;_cgba :=_aegd ._eabd ;_fbeg :=_fdfgf (_adde ,_abcc ,_affd ,0,_cgba );_dgc :=0.0;if _aece ==1{if _cgba ==0{_dgc =-_affd ;_aece ++;};};for _fbcf :=_aece ;_fbcf <=_gcc ;_fbcf ++{if _cgba ==1{_dgc +=_gcdd (_adde ,_fbcf -2,_fbeg ,_affd ,1)-_fbeg ;}else {_dgc +=_gcdd (_adde ,_fbcf -1,_fbeg ,_affd ,0);};};_dgc *=_adde ;return MakeNumberResult (_dgc );};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eecgd :=_gfdc (args );_e .Float64s (_eecgd );var _bfffcb float64 ;if len (_eecgd )%2==0{_bfffcb =(_eecgd [len (_eecgd )/2-1]+_eecgd [len (_eecgd )/2])/2;}else {_bfffcb =_eecgd [len (_eecgd )/2];};return MakeNumberResult (_bfffcb );};func _eeaa (_aefe int )bool {return _aefe >=0&&_aefe <=4};var _bbde =[...]int {-1,1,1,-1,-2,0};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_eaca ,_gagg ,_eadcb :=_aegcd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _eadcb .Type ==ResultTypeError {return _eadcb ;};if _gagg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _eaca ==0{return MakeNumberResult (0);};_cegb :=_eaca < 0;if _cegb {_eaca =-_eaca ;};_gdgb :=float64 (int (_eaca ));_gaca :=args [0].Value ();_fga :=_dcf .Split (_gaca ,"\u002e");_fbef :=0.0;if len (_fga )> 1{var _abb error ;_cacf :=_fga [1];_fbef ,_abb =_ab .ParseFloat (_cacf ,64);if _abb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_gcfeg :=float64 (len (_cacf ));_fbef /=_gfd .Pow (10,_gcfeg );};_gdee :=_fbef *_gagg /_gfd .Pow (10,float64 (int (_gfd .Log10 (_gagg )))+1)+_gdgb ;if _cegb {_gdee =-_gdee ;};return MakeNumberResult (_gdee );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_fbbe :=len (args );if _fbbe < 4||_fbbe > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acga :=args [1].ValueNumber ;if _acga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbacg :=args [2].ValueNumber ;if _cbacg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cabgb :=args [3].ValueNumber ;_cbde :=0.0;if _fbbe > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbde =args [4].ValueNumber ;};_dabd :=0;if _fbbe ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dabd =int (args [5].ValueNumber );if _dabd !=0{_dabd =1;};};return MakeNumberResult (_bced (_gcdc ,_acga ,_cbacg ,_cabgb ,_cbde ,_dabd ));};

// Eval evaluates a range returning a list of results or an error.
func (_ebdge Range )Eval (ctx Context ,ev Evaluator )Result {_fgaae :=_ebdge ._gbgbe .Reference (ctx ,ev );_cebbf :=_ebdge ._faccc .Reference (ctx ,ev );_fcdd :=_egae (_fgaae ,_cebbf );if _fgaae .Type ==ReferenceTypeCell &&_cebbf .Type ==ReferenceTypeCell {if _dedff ,_ceec :=ev .GetFromCache (_fcdd );_ceec {return _dedff ;}else {_gdbga :=_badgc (ctx ,ev ,_fgaae .Value ,_cebbf .Value );ev .SetCache (_fcdd ,_gdbga );return _gdbga ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fcdd );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fbfae :=args [0].AsNumber ();if _fbfae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cgbad :=10.0;if len (args )> 1{_aedb :=args [1].AsNumber ();if _aedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_cgbad =args [1].ValueNumber ;};if _fbfae .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _cgbad ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_gfd .Log (_fbfae .ValueNumber )/_gfd .Log (_cgbad ));};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdddd :=args [0].AsNumber ();if _bdddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdfd :=args [1].AsNumber ();if _fdfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_gfd .Pow (_bdddd .ValueNumber ,_fdfd .ValueNumber ));};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgdb :=args [0];switch _fgdb .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_gefe :=0.0;_ddbb :=0.0;for _ ,_eada :=range _fgdb .ValueString {_cbdd :=0.0;switch _eada {case 'I':_cbdd =1;case 'V':_cbdd =5;case 'X':_cbdd =10;case 'L':_cbdd =50;case 'C':_cbdd =100;case 'D':_cbdd =500;case 'M':_cbdd =1000;};_gefe +=_cbdd ;switch {case _ddbb ==_cbdd &&(_ddbb ==5||_ddbb ==50||_ddbb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_ddbb ==_cbdd :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _ddbb < _cbdd {_gefe -=2*_ddbb ;};_ddbb =_cbdd ;};return MakeNumberResult (_gefe );case ResultTypeError :return _fgdb ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgdb .Type ));};};func _ega (_gdef ,_gdb int )int {switch _gdb {case 1:if _geb (_gdef ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};var _cdegg []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};const _fdaeg =57372;func _abec (_ggag []Result )(float64 ,float64 ,Result ){_bcfba :=0.0;_bbaf :=1.0;for _ ,_eccef :=range _ggag {switch _eccef .Type {case ResultTypeNumber :_bcfba +=_eccef .ValueNumber ;_bbaf *=_feae (_eccef .ValueNumber );case ResultTypeList ,ResultTypeArray :_dcabd ,_eedb ,_fddgd :=_abec (_eccef .ListValues ());_bcfba +=_dcabd ;_bbaf *=_feae (_eedb );if _fddgd .Type ==ResultTypeError {return 0,0,_fddgd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_eccef ;};};return _bcfba ,_bbaf ,_gea ;};const _egbd ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_bdfb :v }};

// GetFormat returns an empty string for the invalid reference context.
func (_gffd *ivr )GetFormat (cellRef string )string {return ""};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_faff ,_bgfg :=_afcb (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _bgfg .Type ==ResultTypeError {return _bgfg ;};_ecgb :=_faff ._eega ;_adfe :=_faff ._gdfd ;_eacc :=_faff ._ffeaa ;_gcef :=_faff ._agef ;_gae :=_faff ._edfgc ;_geda :=_faff ._bbg ;if _geda >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_dfba :=_faff ._ffb ;_gefb :=1.0/_geda ;_ebac :=2.5;if _gefb < 3{_ebac =1;}else if _gefb < 5{_ebac =1.5;}else if _gefb <=6{_ebac =2;};_geda *=_ebac ;_cdgg ,_efcef :=_debf (_adfe ,_eacc ,_dfba );if _efcef .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_bebd :=_eeca (_cdgg *_geda *_ecgb );_ecgb -=_bebd ;_fca :=_ecgb -_gcef ;for _ddbg :=0;_ddbg < _gae ;_ddbg ++{_bebd =_eeca (_geda *_ecgb );_fca -=_bebd ;if _fca < 0{switch _gae -_ddbg {case 0:case 1:return MakeNumberResult (_eeca (_ecgb *0.5));default:return MakeNumberResult (0);};};_ecgb -=_bebd ;};return MakeNumberResult (_bebd );};type defEval struct{evCache ;_abf bool ;};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Update returns the same object as updating sheet references does not affect Bool.
func (_cg Bool )Update (q *_da .UpdateQuery )Expression {return _cg };

// CellRef is a reference to a single cell
type CellRef struct{_dd string };const _fgb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";const _degca =57369;func _fgefg (_abeb ,_fbda Expression )(Expression ,Expression ,error ){_ccbc ,_dbdeg :=_abeb .(CellRef );if !_dbdeg {return nil ,nil ,_d .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_abeb .String ()));};_gdae ,_dbdeg :=_fbda .(CellRef );if !_dbdeg {return nil ,nil ,_d .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fbda .String ()));};_gaff ,_dgefb :=_bfd .ParseCellReference (_ccbc ._dd );if _dgefb !=nil {return nil ,nil ,_dgefb ;};_acdc ,_cadfb :=_bfd .ParseCellReference (_gdae ._dd );if _cadfb !=nil {return nil ,nil ,_cadfb ;};_acffg :=false ;if _gaff .RowIdx > _acdc .RowIdx {_acffg =true ;_gaff .RowIdx ,_acdc .RowIdx =_acdc .RowIdx ,_gaff .RowIdx ;};if _gaff .ColumnIdx > _acdc .ColumnIdx {_acffg =true ;_gaff .ColumnIdx ,_acdc .ColumnIdx =_acdc .ColumnIdx ,_gaff .ColumnIdx ;_gaff .Column ,_acdc .Column =_acdc .Column ,_gaff .Column ;};if _acffg {return NewCellRef (_gaff .String ()),NewCellRef (_acdc .String ()),nil ;};return _abeb ,_fbda ,nil ;};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func _bdef (){_dfab =_db .MustCompile ("\u005e\u0030\u002b\u0024");_gfea =_db .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_aefef =_db .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_cdeaa =_db .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_degc =_db .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_facce =_db .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cacga =_db .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_fbee =_db .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_dcge =_db .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_cebg =_db .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_acfd =_db .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_adefc =_db .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dedf +_dedf +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dedf +_dedf +"\u0029\u002b\u0059+\u0024");_daddb =_db .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_dedf +_dedf +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_dedf +_dedf +"\u0029\u002b\u0059+\u0024");_fcfe =_db .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_bdca =_db .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cbab (args ,_bdgfg )};const _abad =57375;func init (){_bdef ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _bdcb =57350;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_ca :data }};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_ccdc ,_bedee :=_debd (args ,true );if _bedee ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_ccdc /_bedee );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ecaee :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_ecaee *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gbff :=_fcef (args [1]);for _ ,_eaaa :=range _gbff {for _ ,_acee :=range _eaaa {if _acee .Type !=ResultTypeNumber ||_acee .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_ecaee *=1.0+_acee .ValueNumber ;};};return MakeNumberResult (_ecaee );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _fafb (_adab []Result )Result {_eeae :=_adab [0].ValueList ;_agcgc :=len (_eeae );switch len (_adab ){case 1:_gaed :=[]Result {};for _ ,_edfgf :=range _eeae {_gaed =append (_gaed ,MakeBoolResult (_edfgf .ValueNumber !=0));};return MakeListResult (_gaed );case 2:_bfga :=_adab [1];switch _bfga .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_bafab :=[]Result {};for _ ,_fcac :=range _eeae {var _acdgd Result ;if _fcac .ValueNumber ==0{_acdgd =MakeBoolResult (false );}else {_acdgd =_bfga ;};_bafab =append (_bafab ,_acdgd );};return MakeListResult (_bafab );case ResultTypeList :_fdce :=_fcff (_bfga ,_agcgc );_dfce :=[]Result {};for _dcfeb ,_fcga :=range _eeae {var _acfbc Result ;if _fcga .ValueNumber ==0{_acfbc =MakeBoolResult (false );}else {_acfbc =_fdce [_dcfeb ];};_dfce =append (_dfce ,_acfbc );};return MakeListResult (_dfce );case ResultTypeArray :_ccbe :=_afag (_bfga ,len (_bfga .ValueArray ),_agcgc );_ffae :=[][]Result {};for _ ,_fbff :=range _ccbe {_dcaf :=[]Result {};for _deaef ,_gaga :=range _eeae {var _bbea Result ;if _gaga .ValueNumber ==0{_bbea =MakeBoolResult (false );}else {_bbea =_fbff [_deaef ];};_dcaf =append (_dcaf ,_bbea );};_ffae =append (_ffae ,_dcaf );};return MakeArrayResult (_ffae );};case 3:_cbca :=_adab [1];_beae :=_adab [2];_cceab :=_cdfb (_cbca );_egea :=_cdfb (_beae );if _cceab &&_egea {_edde :=[]Result {};for _ ,_dgedd :=range _eeae {var _acbda Result ;if _dgedd .ValueNumber ==0{_acbda =_beae ;}else {_acbda =_cbca ;};_edde =append (_edde ,_acbda );};return MakeListResult (_edde );};if _cbca .Type !=ResultTypeArray &&_beae .Type !=ResultTypeArray {_bfefg :=_fcff (_cbca ,_agcgc );_aafd :=_fcff (_beae ,_agcgc );_bgbbf :=[]Result {};for _gcdga ,_egeb :=range _eeae {var _baca Result ;if _egeb .ValueNumber ==0{_baca =_aafd [_gcdga ];}else {_baca =_bfefg [_gcdga ];};_bgbbf =append (_bgbbf ,_baca );};return MakeListResult (_bgbbf );};_ffbc ,_gdeg :=len (_cbca .ValueArray ),len (_beae .ValueArray );_ffgag ,_debb :=_ffbc ,_gdeg ;if _gdeg > _ffgag {_ffgag ,_debb =_debb ,_ffgag ;};_gcae :=_afag (_cbca ,_ffgag ,_agcgc );_cdbae :=_afag (_beae ,_ffgag ,_agcgc );_beea :=[][]Result {};for _adbg :=0;_adbg < _ffgag ;_adbg ++{_agag :=[]Result {};for _bbbbeg ,_bfffc :=range _eeae {var _acffd Result ;if _bfffc .ValueNumber ==0{if _adbg < _gdeg {_acffd =_cdbae [_adbg ][_bbbbeg ];}else {_acffd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _adbg < _ffbc {_acffd =_gcae [_adbg ][_bbbbeg ];}else {_acffd =MakeErrorResultType (ErrorTypeNA ,"");};};_agag =append (_agag ,_acffd );};_beea =append (_beea ,_agag );};return MakeArrayResult (_beea );};return MakeErrorResult ("");};func _dbb (_gefa string )(int ,int ,float64 ,bool ,bool ,Result ){_cgb :="";_ecd :=[]string {};for _gcde ,_gbge :=range _dcfd {_ecd =_gbge .FindStringSubmatch (_gefa );if len (_ecd )> 1{_cgb =_gcde ;break ;};};if _cgb ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_fgeg :=_ecd [1]=="";_ecd =_ecd [49:];_fddf :=len (_ecd );_beg :=_ecd [_fddf -1];_agcd :=_beg =="\u0061\u006d";_facb :=_beg =="\u0070\u006d";var _cfe ,_afce int ;var _edfd float64 ;var _fab error ;switch _cgb {case "\u0068\u0068":_cfe ,_fab =_ab .Atoi (_ecd [0]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_afce =0;_edfd =0;case "\u0068\u0068\u003am\u006d":_cfe ,_fab =_ab .Atoi (_ecd [0]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_afce ,_fab =_ab .Atoi (_ecd [2]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_edfd =0;case "\u006d\u006d\u003as\u0073":_cfe =0;_afce ,_fab =_ab .Atoi (_ecd [0]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_edfd ,_fab =_ab .ParseFloat (_ecd [2],64);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cfe ,_fab =_ab .Atoi (_ecd [0]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_afce ,_fab =_ab .Atoi (_ecd [2]);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};_edfd ,_fab =_ab .ParseFloat (_ecd [4],64);if _fab !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};};if _afce >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};if _agcd ||_facb {if _cfe > 12||_edfd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );}else if _cfe ==12{_cfe =0;};}else if _cfe >=24||_edfd >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbfa );};return _cfe ,_afce ,_edfd ,_facb ,_fgeg ,_gea ;};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_abg :=_dcf .ToLower (args [0].ValueString );if !_cga (_abg ){_ ,_ ,_ ,_ ,_cgge ,_gfa :=_dbb (_abg );if _gfa .Type ==ResultTypeError {_gfa .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _gfa ;};if _cgge {return MakeNumberResult (0);};};_edfe ,_efbb ,_eadb ,_ ,_dgea :=_gfbf (_abg );if _dgea .Type ==ResultTypeError {return _dgea ;};return MakeNumberResult (_adfc (_edfe ,_efbb ,_eadb ));};const _fbfa ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";func _gaef (_babc yyLexer ,_gdeab *yySymType )(_gbba ,_aaabf int ){_aaabf =0;_gbba =_babc .Lex (_gdeab );if _gbba <=0{_aaabf =_ddffe [0];goto _egfe ;};if _gbba < len (_ddffe ){_aaabf =_ddffe [_gbba ];goto _egfe ;};if _gbba >=_dbgec {if _gbba < _dbgec +len (_ggga ){_aaabf =_ggga [_gbba -_dbgec ];goto _egfe ;};};for _geacb :=0;_geacb < len (_dbcd );_geacb +=2{_aaabf =_dbcd [_geacb +0];if _aaabf ==_gbba {_aaabf =_dbcd [_geacb +1];goto _egfe ;};};_egfe :if _aaabf ==0{_aaabf =_ggga [1];};if _fffeb >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bagfd (_aaabf ),uint (_gbba ));};return _gbba ,_aaabf ;};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_bbada :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bbada =int (args [1].ValueNumber );if _bbada < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _bbada ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ageb :=args [0].Value ();if _bbada > len (_ageb ){return MakeStringResult (_ageb );};return MakeStringResult (_ageb [0:_bbada ]);};type criteriaRegex struct{_gfde byte ;_dagdg string ;};const _caecdf int =0;

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fgdf :=&defEval {};_fgdf .evCache =_gce ();return _fgdf };func _edad (){_beef =_db .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_cbaa =_db .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_fgdeg =_db .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_eeaff =_db .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_efegf =_db .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_eggg =_db .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdeg :=args [0];_facf :=args [1];if _facf .Type !=ResultTypeArray &&_facf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdadcg :=_eccc (_facf );_ddfb :=-1;for _fedc ,_cfdc :=range _cdadcg {if _caba (_bdeg ,_cfdc ,false ,false )==_agdb {_ddfb =_fedc ;};};if _ddfb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cfbd :=_cdadcg ;if len (args )==3{_cfbd =_eccc (args [2]);};if _ddfb < 0||_ddfb >=len (_cfbd ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cfbd [_ddfb ];};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_ffef :v }};var _cdeeb =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _bcf (_caad ,_fffe ,_aae float64 )float64 {return (_caad *3600+_fffe *60+_aae )/86400};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cggg :=args [0].AsString ();if _cggg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_accff :=args [1].AsNumber ();if _accff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfbbg :=_cggg .ValueString ;if len (_bfbbg )> 2&&(_dcf .HasPrefix (_bfbbg ,"\u0030\u0078")||_dcf .HasPrefix (_bfbbg ,"\u0030\u0058")){_bfbbg =_bfbbg [2:];};_adgg ,_gedg :=_ab .ParseInt (_bfbbg ,int (_accff .ValueNumber ),64);if _gedg !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_adgg ));};

// String returns a string representation of CellRef.
func (_cb CellRef )String ()string {return _cb ._dd };func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Reference returns a string reference value to a cell.
func (_dad CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_dad ._dd };};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cef :=args [0];switch _cef .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_bbc :=_aee (_cef .ValueNumber );return MakeNumberResult (float64 (_bbc .Day ()));case ResultTypeString :_dafa :=_dcf .ToLower (_cef .ValueString );if !_cga (_dafa ){_ ,_ ,_ ,_ ,_eebe ,_cbe :=_dbb (_dafa );if _cbe .Type ==ResultTypeError {_cbe .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _cbe ;};if _eebe {return MakeNumberResult (0);};};_ ,_ ,_fggg ,_ ,_cab :=_gfbf (_dafa );if _cab .Type ==ResultTypeError {return _cab ;};return MakeNumberResult (float64 (_fggg ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};const _acbdd =57358;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_ccbgg .Float64 ());};type rangeIndex struct{_caca int ;_eaeed int ;};const _gccc =_bf .Millisecond *1000;func (_cgfb PrefixHorizontalRange )horizontalRangeReference (_aeed string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_aeed ,_cgfb ._fdgba ,_cgfb ._dgefc );};

// Eval evaluates and returns a number.
func (_bfed Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_bfed ._fcca )};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgee :=args [0].AsNumber ();_ccegd :=args [1].AsNumber ();_cffc :=args [2].AsNumber ();_ecad :=args [3].ListValues ();if _dgee .Type !=ResultTypeNumber ||_ccegd .Type !=ResultTypeNumber ||_cffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_bbaa :=float64 (0);for _dcdg ,_cdac :=range _ecad {_bbaa +=_cdac .ValueNumber *_gfd .Pow (_dgee .ValueNumber ,_ccegd .ValueNumber +float64 (_dcdg )*_cffc .ValueNumber );};return MakeNumberResult (_bbaa );};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_edga :=args [0].AsNumber ();if _edga .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _edga .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_feae (_edga .ValueNumber ));};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ggbe :=args [0];if _ggbe .Type !=ResultTypeArray &&_ggbe .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dbbcc :=_egec (args [1]);_fdefe :=0;for _ ,_cdbaf :=range _fcef (_ggbe ){for _ ,_efafa :=range _cdbaf {if _gccf (_efafa ,_dbbcc ){_fdefe ++;};};};return MakeNumberResult (float64 (_fdefe ));};

// Eval evaluates and returns a string.
func (_feage String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_feage ._cfgdg )};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbca :=args [0].AsNumber ();_addg :=args [1].AsNumber ();if _bbca .Type !=ResultTypeNumber ||_addg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _addg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fcad ,_dbba :=_gfd .Modf (_bbca .ValueNumber /_addg .ValueNumber );if _dbba < 0{_fcad --;};return MakeNumberResult (_bbca .ValueNumber -_addg .ValueNumber *_fcad );};func _eade (_edaf []Result ,_gafe string )(*durationArgs ,Result ){_ade :=len (_edaf );if _ade !=5&&_ade !=6{return nil ,MakeErrorResult (_gafe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bage ,_ccf ,_gbgea :=_gage (_edaf [0],_edaf [1],_gafe );if _gbgea .Type ==ResultTypeError {return nil ,_gbgea ;};_bdg :=_edaf [2];if _bdg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gafe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_efce :=_bdg .ValueNumber ;if _efce < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cdceg :=_edaf [3];if _cdceg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gafe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_eced :=_cdceg .ValueNumber ;if _eced < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gdbg :=_edaf [4];if _gdbg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gafe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ecc :=float64 (int (_gdbg .ValueNumber ));if !_dcd (_ecc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eagfc :=0;if _ade ==6&&_edaf [5].Type !=ResultTypeEmpty {_fbe :=_edaf [5];if _fbe .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gafe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eagfc =int (_fbe .ValueNumber );if !_eeaa (_eagfc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_gafe );};};return &durationArgs {_bage ,_ccf ,_efce ,_eced ,_ecc ,_eagfc },_gea ;};const (_acdbd rmode =iota ;_ffag ;_bdgfg ;);

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func init (){_ccbgg =_a .New (_a .NewSource (_bf .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_ebdb ("\u0041\u0053\u0049\u004e",_gfd .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ebdb ("\u0041\u0053\u0049\u004e",_gfd .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ebdb ("\u0041\u0053\u0049\u004e",_gfd .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ebdb ("\u0041\u0043\u004f\u0054",func (_aadd float64 )float64 {return _gfd .Pi /2-_gfd .Atan (_aadd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ebdb ("\u0041\u0043\u004fT\u0048",func (_aagda float64 )float64 {return _gfd .Atanh (1/_aagda )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ebdb ("\u0041\u0053\u0049\u004e",_gfd .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ebdb ("\u0041\u0053\u0049N\u0048",_gfd .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_ebdb ("\u0041\u0054\u0041\u004e",_gfd .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ebdb ("\u0041\u0054\u0041N\u0048",_gfd .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ebdb ("\u0043\u004f\u0053",_gfd .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_ebdb ("\u0043\u004f\u0053\u0048",_gfd .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_eegab ("\u0043\u004f\u0054",_gfd .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_eegab ("\u0043\u004f\u0054\u0048",_gfd .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_eegab ("\u0043\u0053\u0043",_gfd .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_eegab ("\u0043\u0053\u0043",_gfd .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ebdb ("\u0045\u0058\u0050",_gfd .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ebdb ("\u004c\u004e",_gfd .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ebdb ("\u004c\u004f\u00471\u0030",_gfd .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_eegab ("\u0053\u0045\u0043",_gfd .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_eegab ("\u0053\u0045\u0043\u0048",_gfd .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_ebdb ("\u0053\u0049\u004e",_gfd .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ebdb ("\u0053\u0049\u004e\u0048",_gfd .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ebdb ("\u0053\u0051\u0052\u0054",_gfd .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ebdb ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_dagbc float64 )float64 {return _gfd .Sqrt (_dagbc *_gfd .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ebdb ("\u0054\u0041\u004e",_gfd .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_ebdb ("\u0054\u0041\u004e\u0048",_gfd .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _f .Reader )Expression {_gbfff :=&plex {_dfdfg :LexReader (r )};_dbgfg (_gbfff );if _gbfff ._beeg !=""{return nil ;};return _gbfff ._bcgb ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abae :=args [0].Type ;for _ ,_eeeg :=range args {if _eeeg .Type !=_abae {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _abae {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_ggba :=len (args [0].ListValues ());_ccgf :=make ([]float64 ,_ggba );for _egaaa :=range _ccgf {_ccgf [_egaaa ]=1.0;};for _ ,_afded :=range args {if len (_afded .ListValues ())!=_ggba {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _acdeb ,_effe :=range _afded .ListValues (){_effe =_effe .AsNumber ();if _effe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ccgf [_acdeb ]=_ccgf [_acdeb ]*_effe .ValueNumber ;};};_fgfb :=0.0;for _ ,_dabe :=range _ccgf {_fgfb +=_dabe ;};return MakeNumberResult (_fgfb );};return MakeNumberResult (1.0);};func (_abfbd *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };const _ecef =57357;func _cabga (_gffg ,_fbge int64 )float64 {return float64 (int (0.5+float64 ((_fbge -_gffg )/86400)))};const _edgd =57366;var _ggga =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Reference returns an invalid reference for Negate.
func (_aggdc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_fbbb :e }};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfca :=args [0].Ref ;if _dfca .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_dfca .Value ));};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_ffafe ,_deed :=_cfaf ("\u0046\u0049\u004e\u0044",args );if _deed .Type !=ResultTypeEmpty {return _deed ;};_edbc :=_ffafe ._cfeee ;if _edbc ==""{return MakeNumberResult (1.0);};_fbeab :=_ffafe ._gbbf ;_dbgf :=_ffafe ._ggcg ;_gcdde :=1;for _cbbdf :=range _fbeab {if _gcdde < _dbgf {_gcdde ++;continue ;};_daadf :=_dcf .Index (_fbeab [_cbbdf :],_edbc );if _daadf ==0{return MakeNumberResult (float64 (_gcdde ));};_gcdde ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ceaf :=args [0].AsNumber ();if _ceaf .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eedf :=float64 (1);if _ceaf .ValueNumber < 0{_eedf =-1;};if len (args )> 1{_afde :=args [1].AsNumber ();if _afde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eedf =_afde .ValueNumber ;};_edddc :=float64 (1);if len (args )> 2{_eadaa :=args [2].AsNumber ();if _eadaa .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edddc =_eadaa .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gfd .Floor (_ceaf .ValueNumber ));};_deeb :=_ceaf .ValueNumber ;_deeb ,_adfgg :=_gfd .Modf (_deeb /_eedf );if _adfgg !=0&&_ceaf .ValueNumber < 0&&_edddc > 0{_deeb ++;};return MakeNumberResult (_deeb *_eedf );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_efd EmptyExpr )Update (q *_da .UpdateQuery )Expression {return _efd };

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_edfa :=len (args );if _edfa !=6&&_edfa !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ddff ,_ebcc ,_cege :=_gage (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _cege .Type ==ResultTypeError {return _cege ;};_abeaf :=args [2];if _abeaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dggf :=_abeaf .ValueNumber ;if _dggf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_caabd :=args [3];if _caabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_deee :=_caabd .ValueNumber ;if _deee <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cgce :=args [4];if _cgce .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_cbbe :=_cgce .ValueNumber ;if _cbbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dadgg :=args [5];if _dadgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fbgd :=float64 (int (_dadgg .ValueNumber ));if !_dcd (_fbgd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gddaf :=0;if _edfa ==7&&args [6].Type !=ResultTypeEmpty {_eddg :=args [6];if _eddg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gddaf =int (_eddg .ValueNumber );if !_eeaa (_gddaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_fcdg :=0.0;_cegd :=0.0;_abbb :=1.0;_aaae ,_cege :=_bgfe (_ddff ,_ebcc ,_dggf ,_cegd ,_cbbe ,_fbgd ,_gddaf );if _cege .Type ==ResultTypeError {return _cege ;};_bfac ,_cege :=_bgfe (_ddff ,_ebcc ,_dggf ,_abbb ,_cbbe ,_fbgd ,_gddaf );if _cege .Type ==ResultTypeError {return _cege ;};_ggda :=(_abbb -_cegd )*0.5;for _dgeaa :=0;_dgeaa < 100&&_fcdg !=_deee ;_dgeaa ++{_fcdg ,_cege =_bgfe (_ddff ,_ebcc ,_dggf ,_ggda ,_cbbe ,_fbgd ,_gddaf );if _cege .Type ==ResultTypeError {return _cege ;};if _deee ==_aaae {return MakeNumberResult (_cegd );}else if _deee ==_bfac {return MakeNumberResult (_abbb );}else if _deee ==_fcdg {return MakeNumberResult (_ggda );}else if _deee < _bfac {_abbb *=2.0;_bfac ,_cege =_bgfe (_ddff ,_ebcc ,_dggf ,_abbb ,_cbbe ,_fbgd ,_gddaf );if _cege .Type ==ResultTypeError {return _cege ;};_ggda =(_abbb -_cegd )*0.5;}else {if _deee < _fcdg {_cegd =_ggda ;_aaae =_fcdg ;}else {_abbb =_ggda ;_bfac =_fcdg ;};_ggda =_abbb -(_abbb -_cegd )*((_deee -_bfac )/(_aaae -_bfac ));};};return MakeNumberResult (_ggda );};const _deedd =57377;func _cdad (_acfb ,_ffab []float64 ,_aeac float64 )float64 {_dfdbb :=_aeac +1;_fefc :=_acfb [0];_bbed :=len (_acfb );_bagd :=_ffab [0];for _fcfb :=1;_fcfb < _bbed ;_fcfb ++{_fefc +=_acfb [_fcfb ]/_gfd .Pow (_dfdbb ,(_ffab [_fcfb ]-_bagd )/365);};return _fefc ;};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cebdd (args ,true )};const _bdcf =57359;type cmpResult int8 ;

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eddc ,_baga ,_baeg :=_gage (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _baeg .Type ==ResultTypeError {return _baeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcg :=_baga -_eddc ;if _dcg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dfea :=args [2].ValueNumber ;if _dfea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beag :=(100-_dfea )/_dfea ;_fbgg :=360/_dcg ;return MakeNumberResult (_beag *_fbgg );};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfcc :=args [0];_caee :=args [1];if _caee .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bdcdb :=args [2].AsNumber ();if _bdcdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfff :=false ;if len (args )==4{_afggb :=args [3].AsNumber ();if _afggb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _afggb .ValueNumber ==0{_dfff =true ;};};_dgab :=-1;_aadf :=false ;if len (_caee .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_cbgf :=_caee .ValueArray [0];_ffaf :for _ffga ,_cggb :=range _cbgf {switch _caba (_cggb ,_bfcc ,false ,_dfff ){case _fceee :_dgab =_ffga ;case _agdb :_dgab =_ffga ;_aadf =true ;break _ffaf ;};};if _dgab ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fagfe :=int (_bdcdb .ValueNumber )-1;if _fagfe < 0||_fagfe > len (_caee .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_cbgf =_caee .ValueArray [_fagfe ];if _dgab < 0||_dgab >=len (_cbgf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _aadf ||!_dfff {return _cbgf [_dgab ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _ccfa =[...]struct{_afcda int ;_befc int ;_ceff string ;}{};

// Reference returns a string reference value to a vertical range with prefix.
func (_fggb PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_afdd :=_fggb ._cdcc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fggb .verticalRangeReference (_afdd .Value )};};const _aaeb =57349;func _gdfa (_efa ,_fggde ,_gbgb int )int {if _efa > _fggde {return 0;};if _ddgca (_gbgb ){return (_fggde -_efa +1)*360;};_adc :=0;for _bad :=_efa ;_bad <=_fggde ;_bad ++{_eeee :=365;if _geb (_bad ){_eeee =366;};_adc +=_eeee ;};return _adc ;};func (_dfabd *Lexer )Next ()*node {_dfabd ._dfafd .Lock ();defer _dfabd ._dfafd .Unlock ();if len (_dfabd ._bdaa )> 0{_gbab :=_dfabd ._bdaa [0];_dfabd ._bdaa =_dfabd ._bdaa [1:];return _gbab ;};return _dfabd .nextRaw ();};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_ceee ,_fabf :=_gdfc (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _fabf .Type ==ResultTypeError {return _fabf ;};_cgfd :=_ceee ._cfgb ;_ecdd :=_ceee ._fdec ;_eac ,_fabf :=_gfbe (_ceee ._def ,_ceee ._ecacc ,_cgfd ,_ecdd );if _fabf .Type ==ResultTypeError {return _fabf ;};return MakeNumberResult (_eac );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbdg :=args [0].AsString ();if _cgbdg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_cgbdg .ValueString )));};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_gdaa :=len (args );if (_gdaa !=2&&_gdaa !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfe :=0;if _gdaa ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfe =int (args [2].ValueNumber );if !_eeaa (_dfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccg :=args [1].ValueNumber ;_bfg ,_eaeb :=_debf (_ddda ,_ccg ,_dfe );if _eaeb .Type ==ResultTypeError {return _eaeb ;};return MakeNumberResult (_bfg );};const _fdcf =57356;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_gdc ,_agcc :=_gdfc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _agcc .Type ==ResultTypeError {return _agcc ;};return MakeNumberResult (_gbcf (_gdc ._def ,_gdc ._ecacc ,_gdc ._cfgb ,_gdc ._fdec ));};const _dbdd =57363;func _eebb (_dcbge []Result )Result {_aagcd :=_dcbge [0].ValueArray ;if len (_dcbge )==1{_cefga :=[][]Result {};for _ ,_edfc :=range _aagcd {_cefga =append (_cefga ,_fafb ([]Result {MakeListResult (_edfc )}).ValueList );};return MakeArrayResult (_cefga );}else if len (_dcbge )==2{_bcfeb :=len (_aagcd );_cbgb :=len (_aagcd [0]);_acba :=_afag (_dcbge [1],_bcfeb ,_cbgb );_dbaeb :=len (_acba );_eegc :=[][]Result {};var _ggde []Result ;for _gceg ,_aeeaa :=range _aagcd {if _gceg < _dbaeb {_ggde =_acba [_gceg ];}else {_ggde =_fcff (MakeErrorResultType (ErrorTypeNA ,""),_cbgb );};_eegc =append (_eegc ,_fafb ([]Result {MakeListResult (_aeeaa ),MakeListResult (_ggde )}).ValueList );};return MakeArrayResult (_eegc );}else if len (_dcbge )==3{_aefb :=len (_aagcd );_bdcde :=len (_aagcd [0]);_cfae :=_afag (_dcbge [1],_aefb ,_bdcde );_cdbge :=_afag (_dcbge [2],_aefb ,_bdcde );_edddb :=len (_cfae );_dced :=len (_cdbge );_bbcb :=[][]Result {};var _eabb ,_edbb []Result ;for _egdb ,_fbcfc :=range _aagcd {if _egdb < _edddb {_eabb =_cfae [_egdb ];}else {_eabb =_fcff (MakeErrorResultType (ErrorTypeNA ,""),_bdcde );};if _egdb < _dced {_edbb =_cdbge [_egdb ];}else {_edbb =_fcff (MakeErrorResultType (ErrorTypeNA ,""),_bdcde );};_bbcb =append (_bbcb ,_fafb ([]Result {MakeListResult (_fbcfc ),MakeListResult (_eabb ),MakeListResult (_edbb )}).ValueList );};return MakeArrayResult (_bbcb );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_egbg :=args [0].AsString ();if _egbg .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ebbg :=args [1].AsNumber ();if _ebbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _ebbg .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _ebbg .ValueNumber ==0{return MakeStringResult ("");};_gdeag :=_fc .Buffer {};for _badg :=0;_badg < int (_ebbg .ValueNumber );_badg ++{_gdeag .WriteString (_egbg .ValueString );};return MakeStringResult (_gdeag .String ());};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dcece ,_aagfb :=_cfaf ("\u0046\u0049\u004e\u0044",args );if _aagfb .Type !=ResultTypeEmpty {return _aagfb ;};_cgebc :=_dcece ._cfeee ;if _cgebc ==""{return MakeNumberResult (1.0);};_bbdgf :=_dcece ._gbbf ;_fefd :=_dcece ._ggcg -1;_cdegc :=1;_fbgf :=0;for _dbaaed :=range _bbdgf {if _dbaaed !=0{_agdc :=1;if _dbaaed -_fbgf > 1{_agdc =2;};_cdegc +=_agdc ;};if _cdegc > _fefd {_eafe :=_dcf .Index (_bbdgf [_dbaaed :],_cgebc );if _eafe ==0{return MakeNumberResult (float64 (_cdegc ));};};_fbgf =_dbaaed ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};type parsedReplaceObject struct{_abdef string ;_fgdc int ;_afca int ;_bfagb string ;};func _eabg (_cfee Result ,_afgge *criteriaParsed )bool {if _cfee .Type ==ResultTypeEmpty {return false ;};if _afgge ._bffc {return _cfee .ValueNumber ==_afgge ._cdfbg ;}else {_dfcbf :=_dcf .ToLower (_cfee .ValueString );return _afgge ._addc ==_dfcbf ||_ba .Match (_afgge ._addc ,_dfcbf );};};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdg :=args [0].ValueNumber ;if _ecdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdfg :=args [1].ValueNumber ;if _gdfg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefb :=args [2].ValueNumber ;if _eefb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_gfd .Log10 (_eefb )-_gfd .Log10 (_gdfg ))/_gfd .Log10 (1+_ecdg ));};type countMode byte ;func _fcef (_efgc Result )[][]Result {switch _efgc .Type {case ResultTypeArray :return _efgc .ValueArray ;case ResultTypeList :return [][]Result {_efgc .ValueList };default:return [][]Result {};};};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_cffa :=len (args );if _cffa < 2||_cffa > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggbd :=args [0];if _ggbd .Type !=ResultTypeArray &&_ggbd .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fcdc :=args [1].AsNumber ();if _fcdc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_facg :=int (_fcdc .ValueNumber )-1;_ecbd :=-1;if _cffa ==3&&args [2].Type !=ResultTypeEmpty {_fda :=args [2].AsNumber ();if _fda .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ecbd =int (_fda .ValueNumber )-1;};if _facg ==-1&&_ecbd ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _cace []Result ;if _ggbd .Type ==ResultTypeArray {_egdc :=_ggbd .ValueArray ;if _facg < -1||_facg >=len (_egdc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _facg ==-1{if _ecbd >=len (_egdc [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_geebge :=[][]Result {};for _ ,_aabea :=range _egdc {_dfcc :=_aabea [_ecbd ];if _dfcc .Type ==ResultTypeEmpty {_dfcc =MakeNumberResult (0);};_geebge =append (_geebge ,[]Result {_dfcc });};return MakeArrayResult (_geebge );};_cace =_egdc [_facg ];}else {_gbee :=_ggbd .ValueList ;if _facg < -1||_facg >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _facg ==-1{if _ecbd >=len (_gbee ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_acde :=_gbee [_ecbd ];if _acde .Type ==ResultTypeEmpty {_acde =MakeNumberResult (0);};return _acde ;};_cace =_gbee ;};if _ecbd < -1||_ecbd > len (_cace ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ecbd ==-1{_dfeg :=[]Result {};for _ ,_fdbbd :=range _cace {if _fdbbd .Type ==ResultTypeEmpty {_dfeg =append (_dfeg ,MakeNumberResult (0));}else {_dfeg =append (_dfeg ,_fdbbd );};};return MakeArrayResult ([][]Result {_dfeg });};_fdae :=_cace [_ecbd ];if _fdae .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _fdae ;};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_fdfgc ,_fdfa ,_daec :=_fgefg (from ,to );if _daec !=nil {_ed .Log (_daec .Error ());return NewError (_daec .Error ());};return PrefixRangeExpr {_cegg :pfx ,_ggae :_fdfgc ,_bbafd :_fdfa };};const _ddbdg =57373;

// Reference returns a string reference value to a horizontal range with prefix.
func (_bdedg PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_afga :=_bdedg ._dceda .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bdedg .horizontalRangeReference (_afga .Value )};};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _ccbgg *_a .Rand ;func _ddad (_efaff []Result )[]rangeIndex {_bafb :=[]rangeIndex {};_deabd :=len (_efaff );for _aedbg :=0;_aedbg < _deabd -1;_aedbg +=2{_ecgd :=[]rangeIndex {};_ebdcd :=_fcef (_efaff [_aedbg ]);_decdc :=_egec (_efaff [_aedbg +1]);if _aedbg ==0{for _gfga ,_fgba :=range _ebdcd {for _fffg ,_ccde :=range _fgba {if _gccf (_ccde ,_decdc ){_ecgd =append (_ecgd ,rangeIndex {_gfga ,_fffg });};};};}else {for _ ,_edec :=range _bafb {_cdgca :=_ebdcd [_edec ._caca ][_edec ._eaeed ];if _gccf (_cdgca ,_decdc ){_ecgd =append (_ecgd ,_edec );};};};if len (_ecgd )==0{return []rangeIndex {};};_bafb =_ecgd [:];};return _bafb ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_cgde :=len (args );if _cgde < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cgde > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acgg :=args [0];_faec :=args [1];if _faec .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cefg :=args [2].AsNumber ();if _cefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdee :=false ;if _cgde ==4&&args [3].Type !=ResultTypeEmpty {_dbffg :=args [3].AsNumber ();if _dbffg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dbffg .ValueNumber ==0{_cdee =true ;};};_dcefe :=int (_cefg .ValueNumber )-1;_bcfe :=-1;_fbefd :=false ;_gaea :for _ddcab ,_gfdf :=range _faec .ValueArray {if len (_gfdf )==0{continue ;};_aebf :=_gfdf [0];switch _caba (_aebf ,_acgg ,false ,_cdee ){case _fceee :_bcfe =_ddcab ;case _agdb :_bcfe =_ddcab ;_fbefd =true ;break _gaea ;};};if _bcfe ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cdadf :=_faec .ValueArray [_bcfe ];if _dcefe < 0||_dcefe >=len (_cdadf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fbefd ||!_cdee {return _cdadf [_dcefe ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// String returns an empty string for EmptyExpr.
func (_cfbe EmptyExpr )String ()string {return ""};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_dgfe Expression ;_cdadd Expression ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_dadb (args ,_dbfd ))};

// Eval evaluates and returns the result of a constant array expression.
func (_acd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_bgg :=[][]Result {};for _ ,_daf :=range _acd ._ca {_ecg :=[]Result {};for _ ,_dg :=range _daf {_ecg =append (_ecg ,_dg .Eval (ctx ,ev ));};_bgg =append (_bgg ,_ecg );};return MakeArrayResult (_bgg );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdga :=args [0].AsString ();_bbgbb :=args [1].AsString ();if _fdga .Type !=ResultTypeString ||_bbgbb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_fdga .ValueString ==_bbgbb .ValueString );};

// Eval evaluates and returns the result of an empty expression.
func (_ada EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eafae :=[]float64 {};for _ ,_dffb :=range args {switch _dffb .Type {case ResultTypeString :_dbda :=_dffb .AsNumber ();if _dbda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eafae =append (_eafae ,_dbda .ValueNumber );case ResultTypeList ,ResultTypeArray :_cdeaf :=GCD (_dffb .ListValues ());if _cdeaf .Type !=ResultTypeNumber {return _cdeaf ;};_eafae =append (_eafae ,_cdeaf .ValueNumber );case ResultTypeNumber :_eafae =append (_eafae ,_dffb .ValueNumber );case ResultTypeError :return _dffb ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dffb .Type ));};};if _eafae [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_eafae )==1{return MakeNumberResult (_eafae [0]);};_dcab :=_eafae [0];for _aecg :=1;_aecg < len (_eafae );_aecg ++{if _eafae [_aecg ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcab =_gfeag (_dcab ,_eafae [_aecg ]);};return MakeNumberResult (_dcab );};var _fabdc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func init (){_edad ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func _gcddc (_dbee string ,_eeac []Result )(*parsedReplaceObject ,Result ){if len (_eeac )!=4{return nil ,MakeErrorResult (_dbee +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _eeac [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_dbee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fcae :=_eeac [0].ValueString ;if _eeac [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbee +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_cefcf :=int (_eeac [1].ValueNumber )-1;if _eeac [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bacbb :=int (_eeac [2].ValueNumber );if _eeac [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_dbee +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_feagd :=_eeac [3].ValueString ;return &parsedReplaceObject {_fcae ,_cefcf ,_bacbb ,_feagd },_gea ;};var _aceg =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_decdd :=_dadc (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _decdd .Type !=ResultTypeEmpty {return _decdd ;};_agfc :=_ddad (args [1:]);_fdege :=-_gfd .MaxFloat64 ;_aced :=_fcef (args [0]);for _ ,_bgab :=range _agfc {_gcff :=_aced [_bgab ._caca ][_bgab ._eaeed ].ValueNumber ;if _fdege < _gcff {_fdege =_gcff ;};};if _fdege ==-_gfd .MaxFloat64 {_fdege =0;};return MakeNumberResult (float64 (_fdege ));};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};const _egdg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _dbca :=0;_dbca < len (args )-1;_dbca +=2{if args [_dbca ].ValueNumber ==1{return args [_dbca +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};const _dagfe =57351;

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdae :=args [0].ValueNumber ;if _egdae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbdb :=args [1].ValueNumber ;if _fbdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acad :=args [2].ValueNumber ;if _acad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_gfd .Pow (_acad /_fbdb ,1/_egdae )-1);};const _gcceg =57371;func (_cgdgc *ivr )Sheet (name string )Context {return _cgdgc };func _bebbb (_fafbb Context ,_ccfdgd ,_aeff string )(string ,string ){_cgabe :=_ccfdgd +"\u0031";_ceae :=_fafbb .LastRow (_ccfdgd );_ccabg :=_aeff +_ab .Itoa (_ceae );return _cgabe ,_ccabg ;};func _gce ()evCache {_dab :=evCache {};_dab ._edg =make (map[string ]Result );_dab ._cee =&_b .Mutex {};return _dab ;};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgaf :=args [0].AsString ();if _dgaf .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggac :=_fc .Buffer {};_deafe :=false ;_fgcg :=false ;_becg :=0;for _ ,_gedgd :=range _dgaf .ValueString {_fgbbf :=_gedgd ==' ';if _fgbbf {if !_deafe {continue ;};if !_fgcg {_becg ++;_ggac .WriteRune (_gedgd );};}else {_becg =0;_deafe =true ;_ggac .WriteRune (_gedgd );};_fgcg =_fgbbf ;};_ggac .Truncate (_ggac .Len ()-_becg );return MakeStringResult (_ggac .String ());};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// String returns a string representation of Number.
func (_aegfd Number )String ()string {return _ab .FormatFloat (_aegfd ._fcca ,'f',-1,64)};func _bdgag ()yyParser {return &yyParserImpl {}};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dfee :=ctx .GetEpoch ();_abdfg ,_eeabgb :=_dbag (args [0].Value (),_dfee );if _eeabgb !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bcffe :=_abdfg .Year ();return MakeBoolResult (_geb (_bcffe ));};

// String returns a string of a range.
func (_bbdad Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_bbdad ._gbgbe .String (),_bbdad ._faccc .String ());};

// LastColumn returns empty string for the invalid reference context.
func (_acade *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_afcf :=args [0];if _afcf .Type !=ResultTypeArray &&_afcf .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cfce :=_afcf .ValueArray ;if len (_cfce )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_cfce )));};

// Update returns the same object as updating sheet references does not affect String.
func (_baabg String )Update (q *_da .UpdateQuery )Expression {return _baabg };const _cdafbc =57361;func _bgee (_cddcc string )*criteriaRegex {_ebcf :=&criteriaRegex {};if _cddcc ==""{return _ebcf ;};if _caecd :=_beef .FindStringSubmatch (_cddcc );len (_caecd )> 1{_ebcf ._gfde =_dcccf ;_ebcf ._dagdg =_caecd [1];}else if _bfdbf :=_cbaa .FindStringSubmatch (_cddcc );len (_bfdbf )> 1{_ebcf ._gfde =_dcccf ;_ebcf ._dagdg =_bfdbf [1];}else if _ceccb :=_efegf .FindStringSubmatch (_cddcc );len (_ceccb )> 1{_ebcf ._gfde =_ccfe ;_ebcf ._dagdg =_ceccb [1];}else if _ccgg :=_eggg .FindStringSubmatch (_cddcc );len (_ccgg )> 1{_ebcf ._gfde =_aagfe ;_ebcf ._dagdg =_ccgg [1];}else if _deebd :=_fgdeg .FindStringSubmatch (_cddcc );len (_deebd )> 1{_ebcf ._gfde =_fedcb ;_ebcf ._dagdg =_deebd [1];}else if _dda :=_eeaff .FindStringSubmatch (_cddcc );len (_dda )> 1{_ebcf ._gfde =_bffg ;_ebcf ._dagdg =_dda [1];};return _ebcf ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_abcd chan *node ;_dfafd _b .Mutex ;_ceba []chan *node ;_bdaa []*node ;};

// Reference returns an invalid reference for Bool.
func (_cdg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_cdbfdc .Lock ();defer _cdbfdc .Unlock ();if _ ,_fgbge :=_cccfb [name ];_fgbge {_ed .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cccfb [name ]=fn ;};const _cbdg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";const _gacae =16;

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cdcc Expression ;_abdc ,_bfbbe string ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfad ,_dbdf ,_dbga :=_gage (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _dbga .Type ==ResultTypeError {return _dbga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abef :=_dbdf -_dfad ;if _abef > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_bcec :=args [2].ValueNumber ;if _bcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_bcec )/(360-_bcec *_abef ));};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_ebeee ,_acfe ,_ccge :=_aegcd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _ccge .Type ==ResultTypeError {return _ccge ;};if _acfe < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _ebeee ==0{return MakeNumberResult (0);};_caab :=_ebeee < 0;if _caab {_ebeee =-_ebeee ;};_bfgc :=args [0].Value ();_fcee :=_dcf .Split (_bfgc ,"\u002e");_ebfb :=float64 (int (_ebeee ));_bfb :=_fcee [1];_bddd :=len (_bfb );_cddag :=int (_gfd .Log10 (_acfe ))+1;_cdbe :=float64 (_cddag -_bddd );_fcgg ,_adbb :=_ab .ParseFloat (_bfb ,64);if _adbb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_fcgg *=_gfd .Pow (10,_cdbe );_fcd :=_ebfb +_fcgg /_acfe ;if _caab {_fcd =-_fcd ;};return MakeNumberResult (_fcd );};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _eeca (_gdeb float64 )float64 {return float64 (int (_gdeb +0.5))};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_agfd :=_dcf .Split (v ,"\u003a");if len (_agfd )!=2{return nil ;};if _agfd [0]> _agfd [1]{_agfd [0],_agfd [1]=_agfd [1],_agfd [0];};return PrefixVerticalRange {_cdcc :pfx ,_abdc :_agfd [0],_bfbbe :_agfd [1]};};func (_efga node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_efga ._cdga ,_cgad (string (_efga ._ecfg )));};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _edfg (_gbfcd ,_aabf _bf .Time ,_ecec int )float64 {if _gbfcd .After (_aabf ){_gbfcd ,_aabf =_aabf ,_gbfcd ;};_gcgf :=0;_gfce ,_feg ,_cegc :=_gbfcd .Date ();_bbcf ,_edge ,_afg :=_aabf .Date ();_cag ,_bbbd :=int (_feg ),int (_edge );_aebe ,_fce :=_effb (_gfce ,_cag ,_cegc ,_ecec ),_effb (_bbcf ,_bbbd ,_afg ,_ecec );if !_ddgca (_ecec ){return _adfc (_bbcf ,_bbbd ,_fce )-_adfc (_gfce ,_cag ,_aebe );};if _ecec ==0{if (_cag ==2||_aebe < 30)&&_afg ==31{_fce =31;}else if _bbbd ==2&&_fce ==_cceg (_bbcf ,_bbbd ){_fce =_cceg (_bbcf ,2);};}else {if _cag ==2&&_aebe ==30{_aebe =_cceg (_gfce ,2);};if _bbbd ==2&&_fce ==30{_fce =_cceg (_bbcf ,2);};};if _gfce < _bbcf ||(_gfce ==_bbcf &&_cag < _bbbd ){_gcgf =30-_aebe +1;_cegc =1;_aebe =1;_dfef :=_bf .Date (_gfce ,_bf .Month (_cag ),_cegc ,0,0,0,0,_bf .UTC ).AddDate (0,1,0);if _dfef .Year ()< _bbcf {_gcgf +=_ggbb (_dfef .Year (),int (_dfef .Month ()),12,_ecec );_dfef =_dfef .AddDate (0,13-int (_dfef .Month ()),0);_gcgf +=_gdfa (_dfef .Year (),_bbcf -1,_ecec );};_gcgf +=_ggbb (_bbcf ,int (_dfef .Month ()),_bbbd -1,_ecec );_dfef =_dfef .AddDate (0,_bbbd -int (_dfef .Month ()),0);_cag =_dfef .Day ();};_gcgf +=_fce -_aebe ;if _gcgf > 0{return float64 (_gcgf );}else {return 0;};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agbb :=args [0].Ref ;if _agbb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_fbdgg ,_daag :=_bfd .ParseCellReference (_agbb .Value );if _daag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_agbb .Value );};return MakeNumberResult (float64 (_fbdgg .ColumnIdx +1));};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_dcf .NewReader (s ));};func _dbgfg (_gfff yyLexer )int {return _bdgag ().Parse (_gfff )};

// Number is a nubmer expression.
type Number struct{_fcca float64 };const _dga ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";var InvalidReferenceContext =&ivr {};func _caeab (_fcgd ,_fdff ,_cedc Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fcgd .Value ,_fdff .Value ,_cedc .Value );};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bggedg :=_dcf .Split (v ,"\u003a");if len (_bggedg )!=2{return nil ;};_gfeaf ,_ :=_ab .Atoi (_bggedg [0]);_bfdbdf ,_ :=_ab .Atoi (_bggedg [1]);if _gfeaf > _bfdbdf {_gfeaf ,_bfdbdf =_bfdbdf ,_gfeaf ;};return HorizontalRange {_cfde :_gfeaf ,_agbec :_bfdbdf };};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_beec :=args [0];if _beec .Type ==ResultTypeError ||_beec .Type ==ResultTypeString {return _beec ;};return _gea ;};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_agccb *ivr )GetLabelPrefix (cellRef string )string {return ""};const _ffde =57355;

// String returns a string representation of a vertical range.
func (_cbdb VerticalRange )String ()string {return _cbdb .verticalRangeReference ()};func _fbb (_ddbd ,_cfdd _bf .Time ,_dgge int )_bf .Time {_fdfg :=_bf .Date (_ddbd .Year (),_cfdd .Month (),_cfdd .Day (),0,0,0,0,_bf .UTC );if _fdfg .After (_ddbd ){_fdfg =_fdfg .AddDate (-1,0,0);};for !_fdfg .After (_ddbd ){_fdfg =_fdfg .AddDate (0,12/_dgge ,0);};return _fdfg ;};func _egae (_ccgea ,_dcbb Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_ccgea .Value ,_dcbb .Value );};

// Eval evaluates and returns the result of a sheet expression.
func (_cdead SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};const _gagga =57368;func (_eabda ReferenceType )String ()string {if _eabda >=ReferenceType (len (_cddca )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_eabda );};return _egbd [_cddca [_eabda ]:_cddca [_eabda +1]];};func _fgda (_fbab []Result ,_gegb bool )Result {_ececb :="\u004d\u0041\u0058";if _gegb {_ececb ="\u004d\u0041\u0058\u0041";};if len (_fbab )==0{return MakeErrorResult (_ececb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_febg :=-_gfd .MaxFloat64 ;for _ ,_begdd :=range _fbab {switch _begdd .Type {case ResultTypeNumber :if (_gegb ||!_begdd .IsBoolean )&&_begdd .ValueNumber > _febg {_febg =_begdd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dfaf :=_fgda (_begdd .ListValues (),_gegb );if _dfaf .ValueNumber > _febg {_febg =_dfaf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_cbgc :=0.0;if _gegb {_cbgc =_begdd .AsNumber ().ValueNumber ;};if _cbgc > _febg {_febg =_cbgc ;};default:_ed .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ececb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_begdd .Type );};};if _febg ==-_gfd .MaxFloat64 {_febg =0;};return MakeNumberResult (_febg );};func _egba (_begg ,_ebef ,_fegg ,_cece ,_dcbf ,_eccg float64 )float64 {var _cebbb ,_ffac float64 ;_bbeg :=0.0;_dbbf :=_gfd .Ceil (_dcbf );_cacgf :=_begg -_ebef ;_adcc :=false ;_bgfgf :=0.0;for _gfeg :=1.0;_gfeg <=_dbbf ;_gfeg ++{if !_adcc {_cebbb =_ebaa (_begg ,_ebef ,_fegg ,_gfeg ,_eccg );_bgfgf =_cacgf /(_fegg -_gfeg +1);if _bgfgf > _cebbb {_ffac =_bgfgf ;_adcc =true ;}else {_ffac =_cebbb ;_cacgf -=_cebbb ;};}else {_ffac =_bgfgf ;};if _gfeg ==_dbbf {_ffac *=_dcbf +1-_dbbf ;};_bbeg +=_ffac ;};return _bbeg ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_dadb (args ,_aagfd ));};

// GetEpoch returns a null time object for the invalid reference context.
func (_gaafc *ivr )GetEpoch ()_bf .Time {return _bf .Time {}};

// Update updates references in the PrefixExpr after removing a row/column.
func (_dfdag PrefixExpr )Update (q *_da .UpdateQuery )Expression {_bgadf :=_dfdag ;_gadca :=_dfdag ._dgfe .String ();if _gadca ==q .SheetToUpdate {_fafd :=*q ;_fafd .UpdateCurrentSheet =true ;_bgadf ._cdadd =_dfdag ._cdadd .Update (&_fafd );};return _bgadf ;};func _baece (_cgead Result ,_abggb ,_aggd string )(string ,Result ){switch _cgead .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _cgead .Value (),_gea ;default:return "",MakeErrorResult (_abggb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_aggd +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _fccc (_adee []Result ,_bggac []string ,_ebbb bool )[]string {for _ ,_bfffa :=range _adee {switch _bfffa .Type {case ResultTypeEmpty :if !_ebbb {_bggac =append (_bggac ,"");};case ResultTypeString :if _bfffa .ValueString !=""||!_ebbb {_bggac =append (_bggac ,_bfffa .ValueString );};case ResultTypeNumber :_bggac =append (_bggac ,_bfffa .Value ());case ResultTypeList :_bggac =_gfdd (_bggac ,_fccc (_bfffa .ValueList ,[]string {},_ebbb ));case ResultTypeArray :for _ ,_cabbb :=range _bfffa .ValueArray {_bggac =_gfdd (_bggac ,_fccc (_cabbb ,[]string {},_ebbb ));};};};return _bggac ;};type yySymType struct{_bgef int ;_agde *node ;_dfge Expression ;_cgeab []Expression ;_agbae [][]Expression ;};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cfde ,_agbec int };

// Reference returns a string reference value to a range.
func (_fdgecb Range )Reference (ctx Context ,ev Evaluator )Reference {_cdeb :=_fdgecb ._gbgbe .Reference (ctx ,ev );_abcf :=_fdgecb ._faccc .Reference (ctx ,ev );if _cdeb .Type ==ReferenceTypeCell &&_abcf .Type ==ReferenceTypeCell {return MakeRangeReference (_egae (_cdeb ,_abcf ));};return ReferenceInvalid ;};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_dd :v }};

// HasFormula returns FALSE for the invalid reference context.
func (_gbbcb *ivr )HasFormula (cellRef string )bool {return false };var _dbcd =[...]int {0};

// Eval evaluates and returns the result of a Negate expression.
func (_cdab Negate )Eval (ctx Context ,ev Evaluator )Result {_cefee :=_cdab ._fbbb .Eval (ctx ,ev );if _cefee .Type ==ResultTypeNumber {return MakeNumberResult (-_cefee .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// Error is called in the case of parsing error and saves an error to a plex.
func (_gfda *plex )Error (s string ){_ed .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gfda ._beeg =s ;};func (_fddfca Result )AsString ()Result {switch _fddfca .Type {case ResultTypeNumber :return MakeStringResult (_fddfca .Value ());default:return _fddfca ;};};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_dcf .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_cfgdg :v };};func NewLexer ()*Lexer {return &Lexer {_abcd :make (chan *node )}};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_ddfff Context ,_fbdd Evaluator ,_dbbed []Result )Result ;

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_egdf :=_dadc (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _egdf .Type !=ResultTypeEmpty {return _egdf ;};_bcde :=_ddad (args );return MakeNumberResult (float64 (len (_bcde )));};var _dffgf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Reference returns an invalid reference for Number.
func (_edfae Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgdef :=args [0].AsString ();if _bgdef .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_bgdef .ValueString ,ev );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_dbge :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbge =int (args [1].ValueNumber );if _dbge < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _dbge ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_egcbc :=args [0].Value ();_egbc :=len (_egcbc );if _dbge > _egbc {return MakeStringResult (_egcbc );};return MakeStringResult (_egcbc [_egbc -_dbge :_egbc ]);};func _adfb (_aacd ,_dcae Result ,_dbbc string )(*xargs ,Result ){if _aacd .Type !=ResultTypeList &&_aacd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbbc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_adge :=_fcef (_aacd );_bfabc :=[]float64 {};for _ ,_eecg :=range _adge {for _ ,_caae :=range _eecg {if _caae .Type ==ResultTypeNumber &&!_caae .IsBoolean {_bfabc =append (_bfabc ,_caae .ValueNumber );}else {return nil ,MakeErrorResult (_dbbc +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_bffa :=len (_bfabc );if len (_bfabc )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _dcae .Type !=ResultTypeList &&_dcae .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbbc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_gabb :=_fcef (_dcae );_gdeff :=[]float64 {};_fcc :=0.0;for _ ,_fegc :=range _gabb {for _ ,_babf :=range _fegc {if _babf .Type ==ResultTypeNumber &&!_babf .IsBoolean {_cefb :=float64 (int (_babf .ValueNumber ));if _cefb < _fcc {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbbc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_gdeff =append (_gdeff ,_cefb );_fcc =_cefb ;}else {return nil ,MakeErrorResult (_dbbc +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_gdeff )!=_bffa {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_bfabc ,_gdeff },MakeEmptyResult ();};func _bced (_addef ,_afcg ,_cgef ,_abgg ,_ddfa float64 ,_ebfba int )float64 {_gdcd :=_fdfgf (_addef ,_cgef ,_abgg ,_ddfa ,_ebfba );var _gffgb float64 ;if _afcg ==1{if _ebfba ==1{_gffgb =0;}else {_gffgb =-_abgg ;};}else {if _ebfba ==1{_gffgb =_gcdd (_addef ,_afcg -2,_gdcd ,_abgg ,1)-_gdcd ;}else {_gffgb =_gcdd (_addef ,_afcg -1,_gdcd ,_abgg ,0);};};return _gffgb *_addef ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_ggaa ,_eadc :=_gdfc (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _eadc .Type ==ResultTypeError {return _eadc ;};_dde :=_aee (_ggaa ._def );_bfab :=_aee (_ggaa ._ecacc );_gcf :=_ggaa ._cfgb ;_ebab :=_fbb (_dde ,_bfab ,_gcf );_cbf ,_dcc ,_eagf :=_ebab .Date ();return MakeNumberResult (_adfc (_cbf ,int (_dcc ),_eagf ));};const _fdgag =57353;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_babad :=args [0].AsNumber ();_gafa :=args [1].AsNumber ();if _babad .Type ==ResultTypeNumber &&_gafa .Type ==ResultTypeNumber {_cfdg :=_gfd .Atan2 (_gafa .ValueNumber ,_babad .ValueNumber );if _cfdg !=_cfdg {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_cfdg );};for _ ,_gfcc :=range []ResultType {_babad .Type ,_gafa .Type }{switch _gfcc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _babad ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gfcc ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fgfg :=args [0].ValueNumber ;if _fgfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_ccb :=float64 (int (args [1].ValueNumber ));if _ccb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_gfd .Pow (_fgfg +1,1/_ccb )-1)*_ccb );};type parsedSearchObject struct{_cfeee string ;_gbbf string ;_ggcg int ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cbab (args ,_ffag )};func _cga (_geec string )bool {for _ ,_bee :=range _eeea {_egg :=_bee .FindStringSubmatch (_geec );if len (_egg )> 1{return true ;};};return false ;};const _fagfdf =57376;func (_fced VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fced ._bbadb ,_fced ._fdaegd );};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_afagd :=MakeNumberResult (0);for _ ,_ggbag :=range args {_ggbag =_ggbag .AsNumber ();switch _ggbag .Type {case ResultTypeNumber :_afagd .ValueNumber +=_ggbag .ValueNumber *_ggbag .ValueNumber ;case ResultTypeList ,ResultTypeArray :_acdbdc :=SumSquares (_ggbag .ListValues ());if _acdbdc .Type !=ResultTypeNumber {return _acdbdc ;};_afagd .ValueNumber +=_acdbdc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ggbag ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ggbag .Type ));};};return _afagd ;};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fagc PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bgaf :=_fagc ._dceda .Reference (ctx ,ev );switch _bgaf .Type {case ReferenceTypeSheet :if _dcgc (_bgaf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bgaf .Value ));};_cgcdg :=_fagc .horizontalRangeReference (_bgaf .Value );if _bdbf ,_agebf :=ev .GetFromCache (_cgcdg );_agebf {return _bdbf ;};_babcc :=ctx .Sheet (_bgaf .Value );_dcag ,_bbgea :=_ebfed (_babcc ,_fagc ._fdgba ,_fagc ._dgefc );_acfdc :=_badgc (_babcc ,ev ,_dcag ,_bbgea );ev .SetCache (_cgcdg ,_acfdc );return _acfdc ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bgaf .Type ));};};func _ggad (_bcdcb Result )Result {if _bcdcb .Type ==ResultTypeEmpty {return _bcdcb ;};_eeabb :=_bcdcb .AsString ();if _eeabb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bcdcb .IsBoolean {if _eeabb .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _eeabb .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_dcf .ToLower (_eeabb .ValueString ));};};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_gagc :=len (args );if _gagc !=4&&_gagc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_eeff ,_aefd ,_bfae :=_gage (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bfae .Type ==ResultTypeError {return _bfae ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbce :=args [2].ValueNumber ;if _fbce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abdf :=args [3].ValueNumber ;if _abdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfa :=0;if _gagc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfa =int (args [4].ValueNumber );if !_eeaa (_ebfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_abee ,_bfae :=_debf (_eeff ,_aefd ,_ebfa );if _bfae .Type ==ResultTypeError {return _bfae ;};return MakeNumberResult (_fbce /(1-_abdf *_abee ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _ddca (_cea ,_dcfcfd float64 )bool {return _gfd .Abs (_cea -_dcfcfd )< 1.0e-6};func (_abecf HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_abecf ._cfde ,_abecf ._agbec );};func _bagfd (_gdfde int )string {if _gdfde >=1&&_gdfde -1< len (_adgag ){if _adgag [_gdfde -1]!=""{return _adgag [_gdfde -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gdfde );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dgg :=args [0];switch _dgg .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_ddcb :=_aee (_dgg .ValueNumber );return MakeNumberResult (float64 (_ddcb .Month ()));case ResultTypeString :_baag :=_dcf .ToLower (_dgg .ValueString );if !_cga (_baag ){_ ,_ ,_ ,_ ,_edff ,_cec :=_dbb (_baag );if _cec .Type ==ResultTypeError {_cec .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _cec ;};if _edff {return MakeNumberResult (1);};};_ ,_cebd ,_ ,_ ,_edab :=_gfbf (_baag );if _edab .Type ==ResultTypeError {return _edab ;};return MakeNumberResult (float64 (_cebd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};func _cgag (_fef int )int {if _fef < 1900{if _fef < 30{_fef +=2000;}else {_fef +=1900;};};return _fef ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adcee :=args [0];if _adcee .Type ==ResultTypeNumber {return _adcee ;};if _adcee .Type ==ResultTypeString {_egegb ,_fgcb :=_ab .ParseFloat (_adcee .Value (),64);if _fgcb ==nil {return MakeNumberResult (_egegb );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _gdfc (_gbd []Result ,_daad string )(*couponArgs ,Result ){_dggd :=len (_gbd );if _dggd !=3&&_dggd !=4{return nil ,MakeErrorResult (_daad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgge ,_eacd ,_gbcc :=_gage (_gbd [0],_gbd [1],_daad );if _gbcc .Type ==ResultTypeError {return nil ,_gbcc ;};if _gbd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_daad +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ageg :=_gbd [2].ValueNumber ;if !_dcd (_ageg ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_daad );};_fddg :=0;if _dggd ==4&&_gbd [3].Type !=ResultTypeEmpty {if _gbd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_daad +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fddg =int (_gbd [3].ValueNumber );if !_eeaa (_fddg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_daad );};};return &couponArgs {_bgge ,_eacd ,int (_ageg ),_fddg },_gea ;};func _feae (_geac float64 )float64 {_fabdb :=float64 (1);for _cfcd :=float64 (2);_cfcd <=_geac ;_cfcd ++{_fabdb *=_cfcd ;};return _fabdb ;};func _ag (_ea Result )bool {if _ea .Type ==ResultTypeString {return _ea .ValueString =="";};return _ea .ValueNumber ==0;};func _caba (_gdbcd ,_cdggf Result ,_eeeea ,_fefeg bool )cmpResult {_gdbcd =_gdbcd .AsNumber ();_cdggf =_cdggf .AsNumber ();if _gdbcd .Type !=_cdggf .Type {return _cffg ;};if _gdbcd .Type ==ResultTypeNumber {if _gdbcd .ValueNumber ==_cdggf .ValueNumber {return _agdb ;};if _gdbcd .ValueNumber < _cdggf .ValueNumber {return _fceee ;};return _cdbg ;};if _gdbcd .Type ==ResultTypeString {_dgeg :=_gdbcd .ValueString ;_dcaa :=_cdggf .ValueString ;if !_eeeea {_dgeg =_dcf .ToLower (_dgeg );_dcaa =_dcf .ToLower (_dcaa );};if _fefeg {_dccg :=_ba .Match (_dcaa ,_dgeg );if _dccg {return _agdb ;}else {return _cdbg ;};};return cmpResult (_dcf .Compare (_dgeg ,_dcaa ));};if _gdbcd .Type ==ResultTypeEmpty {return _agdb ;};if _gdbcd .Type ==ResultTypeList {if len (_gdbcd .ValueList )< len (_cdggf .ValueList ){return _fceee ;};if len (_gdbcd .ValueList )> len (_cdggf .ValueList ){return _cdbg ;};for _aagbc :=range _gdbcd .ValueList {_gdedf :=_caba (_gdbcd .ValueList [_aagbc ],_cdggf .ValueList [_aagbc ],_eeeea ,_fefeg );if _gdedf !=_agdb {return _gdedf ;};};return _agdb ;};if _gdbcd .Type ==ResultTypeList {if len (_gdbcd .ValueArray )< len (_cdggf .ValueArray ){return _fceee ;};if len (_gdbcd .ValueArray )> len (_cdggf .ValueArray ){return _cdbg ;};for _efaa :=range _gdbcd .ValueArray {_faef :=_gdbcd .ValueArray [_efaa ];_edcf :=_gdbcd .ValueArray [_efaa ];if len (_faef )< len (_edcf ){return _fceee ;};if len (_faef )> len (_edcf ){return _cdbg ;};for _cdgbg :=range _faef {_dcgd :=_caba (_faef [_cdgbg ],_edcf [_cdgbg ],_eeeea ,_fefeg );if _dcgd !=_agdb {return _dcgd ;};};};return _agdb ;};return _cffg ;};func _dada (_dfda [][]Result ,_cdfaf int )[][]Result {_cega :=[][]Result {};for _gegf :=range _dfda {if _gegf ==0{continue ;};_ddedf :=[]Result {};for _ceca :=range _dfda {if _ceca ==_cdfaf {continue ;};_ddedf =append (_ddedf ,_dfda [_gegf ][_ceca ]);};_cega =append (_cega ,_ddedf );};return _cega ;};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efcefc :=int (args [0].ValueNumber );return MakeBoolResult (_efcefc ==_efcefc /2*2);};func _cceg (_bbd ,_gfac int )int {if _gfac ==2&&_geb (_bbd ){return 29;}else {return _faa [_gfac -1];};};func _dbbfe (_gefbd Result ,_bagfc *criteriaParsed )bool {_cfedc :=_dcf .ToLower (_gefbd .ValueString );_eccga :=_bagfc ._bdae ._gfde ;_aace :=_bagfc ._bdae ._dagdg ;if _eccga ==_dcccf {return _cfedc ==_aace ||_ba .Match (_aace ,_cfedc );};if _gefbd .Type !=ResultTypeEmpty {if _cfedc ==_bagfc ._addc ||_ba .Match (_bagfc ._addc ,_cfedc ){return true ;};if _ ,_bbag :=_ab .ParseFloat (_aace ,64);_bbag ==nil {return false ;};switch _eccga {case _ccfe :return _cfedc <=_aace ;case _aagfe :return _cfedc >=_aace ;case _fedcb :return _cfedc < _aace ;case _bffg :return _cfedc > _aace ;};};return false ;};

// String returns a string representation of a vertical range with prefix.
func (_gddb PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gddb ._cdcc .String (),_gddb ._abdc ,_gddb ._bfbbe );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_bace string };

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ddefa :=args [0];if _ddefa .Type ==ResultTypeError {return _ddefa ;};if _ddefa .Type !=ResultTypeString &&_ddefa .Type !=ResultTypeNumber &&_ddefa .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gcce :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_abfed :=int (args [1].ValueNumber );if _abfed < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gcgbf :=int (args [2].ValueNumber );if _gcgbf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dbde :=len (_gcce );if _abfed > _dbde {return MakeStringResult ("");};_abfed --;_bedb :=_abfed +_gcgbf ;if _bedb > _dbde {return MakeStringResult (_gcce [_abfed :]);}else {return MakeStringResult (_gcce [_abfed :_bedb ]);};};

// Eval evaluates and returns the result of the cell reference.
func (_eca CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_eca ._dd ,ev )};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_bb CellRef )Update (q *_da .UpdateQuery )Expression {if q .UpdateCurrentSheet {_bb ._dd =_eed (_bb ._dd ,q );};return _bb ;};var _ccc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// SetLocked does nothing for the invalid reference context.
func (_aege *ivr )SetLocked (cellRef string ,locked bool ){};

// IsBool returns false for the invalid reference context.
func (_ggaac *ivr )IsBool (cellRef string )bool {return false };var _facbc =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};const _agc ="\u005e\u0028\u0028"+_dfc +"\u007c"+_gfbg +"\u007c"+_egdg +"\u007c"+_gabf +"\u0029\u0020\u0029\u003f";

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_bbgf :=len (args );if _bbgf < 3||_bbgf > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcba :=args [0].ValueNumber ;if _fcba !=float64 (int (_fcba )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdda :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cegcf :=args [2].ValueNumber ;_caea :=0.0;if _bbgf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_caea =args [3].ValueNumber ;};_egde :=0.0;if _bbgf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_egde =args [4].ValueNumber ;if _egde !=0{_egde =1;};};_dbaa :=0.1;if _bbgf >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbaa =args [5].ValueNumber ;};_aceee :=100;_cdadc :=0;_bagfe :=false ;_acbd :=1e-6;_afba :=_dbaa ;for _cdadc < _aceee &&!_bagfe {_fdbb :=_gfd .Pow (_afba +1,_fcba );_abd :=_gfd .Pow (_afba +1,_fcba -1);_abge :=_afba *_egde +1;_cfed :=_gdda *(_fdbb -1);_afbf :=_caea +_fdbb *_cegcf +_cfed *_abge /_afba ;_feee :=_fcba *_abd *_cegcf -_cfed *_abge /_gfd .Pow (_afba ,2);_bgc :=(_fcba *_gdda *_abd *_abge +_cfed *_egde )/_afba ;_bef :=_afbf /(_feee +_bgc );if _gfd .Abs (_bef )< _acbd {_bagfe =true ;};_cdadc ++;_afba -=_bef ;};return MakeNumberResult (_afba );};type noCache struct{};func _cebdd (_deag []Result ,_fdc bool )Result {var _dcgg string ;if _fdc {_dcgg ="\u004c\u0041\u0052G\u0045";}else {_dcgg ="\u0053\u004d\u0041L\u004c";};if len (_deag )!=2{return MakeErrorResult (_dcgg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_caec :=_deag [0];var _gceff [][]Result ;switch _caec .Type {case ResultTypeArray :_gceff =_caec .ValueArray ;case ResultTypeList :_gceff =[][]Result {_caec .ValueList };default:return MakeErrorResult (_dcgg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_gceff )==0{return MakeErrorResult (_dcgg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _deag [1].Type !=ResultTypeNumber {return MakeErrorResult (_dcgg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_dbaae :=_deag [1].ValueNumber ;if _dbaae < 1{return MakeErrorResultType (ErrorTypeNum ,_dcgg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_debg :=int (_dbaae );if float64 (_debg )!=_dbaae {return MakeErrorResultType (ErrorTypeNum ,_dcgg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gcag :=[]float64 {};for _ ,_dgbg :=range _gceff {for _ ,_dgfa :=range _dgbg {if _dgfa .Type ==ResultTypeNumber {_gcag =append (_gcag ,_dgfa .ValueNumber );};};};if _debg > len (_gcag ){return MakeErrorResultType (ErrorTypeNum ,_dcgg +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gedff :=_fcg .MergeSort (_gcag );if _fdc {return MakeNumberResult (_gedff [len (_gedff )-_debg ]);}else {return MakeNumberResult (_gedff [_debg -1]);};};func _adfc (_ccce ,_abfg ,_ead int )float64 {return float64 (_dfeb (_ccce ,_bf .Month (_abfg ),_ead )/86400)+_aegc ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _afag (_bfdc Result ,_eacaa ,_eggd int )[][]Result {_dfdf :=[][]Result {};switch _bfdc .Type {case ResultTypeArray :for _ddbda ,_fggdg :=range _bfdc .ValueArray {if _ddbda < _eacaa {_dfdf =append (_dfdf ,_fcff (MakeListResult (_fggdg ),_eggd ));}else {_dfdf =append (_dfdf ,_fcff (MakeErrorResultType (ErrorTypeNA ,""),_eggd ));};};case ResultTypeList :_dgae :=_fcff (_bfdc ,_eggd );for _gfeac :=0;_gfeac < _eacaa ;_gfeac ++{_dfdf =append (_dfdf ,_dgae );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bddg :=0;_bddg < _eacaa ;_bddg ++{_afab :=_fcff (_bfdc ,_eggd );_dfdf =append (_dfdf ,_afab );};};return _dfdf ;};func _cfaf (_ddfbd string ,_dabf []Result )(*parsedSearchObject ,Result ){_gefeg :=len (_dabf );if _gefeg !=2&&_gefeg !=3{return nil ,MakeErrorResult (_ddfbd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gagfb :=_dabf [0];if _gagfb .Type ==ResultTypeError {return nil ,_gagfb ;};if _gagfb .Type !=ResultTypeString &&_gagfb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fdfe :=_dabf [1];if _fdfe .Type ==ResultTypeError {return nil ,_fdfe ;};if _fdfe .Type !=ResultTypeString &&_fdfe .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_fefb :=_fdfe .Value ();_efgb :=_gagfb .Value ();_adafa :=1;if _gefeg ==3&&_dabf [2].Type !=ResultTypeEmpty {_ebb :=_dabf [2];if _ebb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_adafa =int (_ebb .ValueNumber );if _adafa < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _adafa > len (_fefb ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_efgb ,_fefb ,_adafa },_gea ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_abecd PrefixVerticalRange )Update (q *_da .UpdateQuery )Expression {if q .UpdateType ==_da .UpdateActionRemoveColumn {_eaed :=_abecd ;_cecef :=_abecd ._cdcc .String ();if _cecef ==q .SheetToUpdate {_eadf :=q .ColumnIdx ;_eaed ._abdc =_cdgc (_abecd ._abdc ,_eadf );_eaed ._bfbbe =_cdgc (_abecd ._bfbbe ,_eadf );};return _eaed ;};return _abecd ;};func (_gfdbg *Lexer )emit (_egafb tokenType ,_ebcb []byte ){if _babda {_g .Println ("\u0065\u006d\u0069\u0074",_egafb ,_cgad (string (_ebcb )));};_gfdbg ._abcd <-&node {_egafb ,string (_ebcb )};};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_fefab :=len (args );if _fefab !=4&&_fefab !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbdg ,_baaa ,_adef :=_gage (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _adef .Type ==ResultTypeError {return _adef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dege :=args [2].ValueNumber ;if _dege <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fabd :=args [3].ValueNumber ;if _fabd <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_egfd :=0;if _fefab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfd =int (args [4].ValueNumber );if !_eeaa (_egfd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_affec ,_adef :=_debf (_bbdg ,_baaa ,_egfd );if _adef .Type ==ResultTypeError {return _adef ;};return MakeNumberResult ((_fabd /_dege -1)/_affec );};type Expression interface{Eval (_efb Context ,_egf Evaluator )Result ;Reference (_aegf Context ,_bc Evaluator )Reference ;String ()string ;Update (_cge *_da .UpdateQuery )Expression ;};func _gcgg (_gfgg ,_afdb []float64 ,_aeba float64 )float64 {_aagbb :=_aeba +1;_agbg :=0.0;_gfag :=len (_gfgg );_fafe :=_afdb [0];for _ddfae :=1;_ddfae < _gfag ;_ddfae ++{_acb :=(_afdb [_ddfae ]-_fafe )/365;_agbg -=_acb *_gfgg [_ddfae ]/_gfd .Pow (_aagbb ,_acb +1);};return _agbg ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_dagb :=args [0].ValueNumber ;if _dagb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_eegdb :=float64 (int (args [1].ValueNumber ));if _eegdb < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_gfd .Pow ((1+_dagb /_eegdb ),_eegdb )-1);};var _geddf =map[string ]FunctionComplex {};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_bbadb ,_fdaegd string };var _aegc float64 =25569.0;func (_bbb *evCache )GetFromCache (key string )(Result ,bool ){_bbb ._cee .Lock ();_eeeb ,_adf :=_bbb ._edg [key ];_bbb ._cee .Unlock ();return _eeeb ,_adf ;};const _bga =86400000000000;const _eebge =-1000;

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_ecgac PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ffgd :=_ecgac ._cdcc .Reference (ctx ,ev );switch _ffgd .Type {case ReferenceTypeSheet :if _dcgc (_ffgd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ffgd .Value ));};_cebf :=_ecgac .verticalRangeReference (_ffgd .Value );if _ddac ,_gcaf :=ev .GetFromCache (_cebf );_gcaf {return _ddac ;};_gggg :=ctx .Sheet (_ffgd .Value );_gegcf ,_eadgf :=_bebbb (_gggg ,_ecgac ._abdc ,_ecgac ._bfbbe );_abdd :=_badgc (_gggg ,ev ,_gegcf ,_eadgf );ev .SetCache (_cebf ,_abdd );return _abdd ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffgd .Type ));};};

// Update updates the horizontal range references after removing a row/column.
func (_ddfgd HorizontalRange )Update (q *_da .UpdateQuery )Expression {return _ddfgd };type ivr struct{};const _bceg =57360;func _bfa (){_gg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_db .MustCompile ("\u005e"+_dfc +_bgde );_gg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_db .MustCompile ("\u005e"+_gfbg +_bgde );_gg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_db .MustCompile ("\u005e"+_egdg +_bgde );_gg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_db .MustCompile ("\u005e"+_gabf +_bgde );_dcfd ["\u0068\u0068"]=_db .MustCompile (_agc +_fee +"\u0024");_dcfd ["\u0068\u0068\u003am\u006d"]=_db .MustCompile (_agc +_eea +"\u0024");_dcfd ["\u006d\u006d\u003as\u0073"]=_db .MustCompile (_agc +_eafc +"\u0024");_dcfd ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_db .MustCompile (_agc +_fgb +"\u0024");_eeea =[]*_db .Regexp {_db .MustCompile ("\u005e"+_dfc +"\u0024"),_db .MustCompile ("\u005e"+_gfbg +"\u0024"),_db .MustCompile ("\u005e"+_egdg +"\u0024"),_db .MustCompile ("\u005e"+_gabf +"\u0024")};_ddg =[]*_db .Regexp {_db .MustCompile ("\u005e"+_fee +"\u0024"),_db .MustCompile ("\u005e"+_eea +"\u0024"),_db .MustCompile ("\u005e"+_eafc +"\u0024"),_db .MustCompile ("\u005e"+_fgb +"\u0024")};};const _gabf ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_dga +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Reference returns a string reference value to a vertical range.
func (_bbcg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_bbcg .verticalRangeReference ()};};var _fd int64 =_dfeb (1900,_bf .January ,1);func _ebaa (_gece ,_dfbg ,_egca ,_ceed ,_fgga float64 )float64 {var _fceed float64 ;_fggac :=_fgga /_egca ;if _fggac >=1{_fggac =1;if _ceed ==1{_fceed =_gece ;}else {_fceed =0;};}else {_fceed =_gece *_gfd .Pow (1-_fggac ,_ceed -1);};_egcb :=_gece *_gfd .Pow (1-_fggac ,_ceed );var _fgeb float64 ;if _egcb < _dfbg {_fgeb =_fceed -_dfbg ;}else {_fgeb =_fceed -_egcb ;};if _fgeb < 0{_fgeb =0;};return _fgeb ;};

// Negate is a negate expression like -A1.
type Negate struct{_fbbb Expression };

// Eval evaluates and returns the result of a function call.
func (_bbcbg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_bfbbf :=LookupFunction (_bbcbg ._gaec );if _bfbbf !=nil {_fdaf :=make ([]Result ,len (_bbcbg ._edafd ));for _fffec ,_ebfgg :=range _bbcbg ._edafd {_fdaf [_fffec ]=_ebfgg .Eval (ctx ,ev );_fdaf [_fffec ].Ref =_ebfgg .Reference (ctx ,ev );};if _ ,_ddfc :=_aceg [_bbcbg ._gaec ];!_ddfc {if _gecag ,_ebbge :=_dbea (_fdaf );_gecag {return _ebbge ;};};return _bfbbf (_fdaf );};_bbcc :=LookupFunctionComplex (_bbcbg ._gaec );if _bbcc !=nil {_agdg :=make ([]Result ,len (_bbcbg ._edafd ));for _fddfc ,_ecfd :=range _bbcbg ._edafd {_agdg [_fddfc ]=_ecfd .Eval (ctx ,ev );_agdg [_fddfc ].Ref =_ecfd .Reference (ctx ,ev );};if _ ,_aadgb :=_aceg [_bbcbg ._gaec ];!_aadgb {if _dgfae ,_cadc :=_dbea (_agdg );_dgfae {return _cadc ;};};return _bbcc (ctx ,ev ,_agdg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bbcbg ._gaec );};var _ddffe =[...]int {1};var _cddca =[...]uint8 {0,20,37,60,78,96};

// String returns a string representation of a horizontal range with prefix.
func (_gffc PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_gffc ._dceda .String (),_gffc ._fdgba ,_gffc ._dgefc );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_aeeb :=args [0].AsNumber ();if _aeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ccbd :=int (_aeeb .ValueNumber );_fgfc :=make ([][]Result ,0,_ccbd );for _agfg :=0;_agfg < _ccbd ;_agfg ++{_cgfa :=make ([]Result ,_ccbd );for _bdbg :=0;_bdbg < _ccbd ;_bdbg ++{if _agfg ==_bdbg {_cgfa [_bdbg ]=MakeNumberResult (1.0);}else {_cgfa [_bdbg ]=MakeNumberResult (0.0);};};_fgfc =append (_fgfc ,_cgfa );};return MakeArrayResult (_fgfc );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdea :=args [0].AsNumber ();if _gdea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_gfd .Pi /180.0*_gdea .ValueNumber );};func _dbbg (_bce ,_cadf _bf .Time ,_bae ,_ged int )_bf .Time {_afcd :=_cadf ;_cadbb :=_bce .Year ()-_cadf .Year ();_afcd =_afcd .AddDate (_cadbb ,0,0);if _bce .After (_afcd ){_afcd =_afcd .AddDate (1,0,0);};_gdbd :=-12/_bae ;for _afcd .After (_bce ){_afcd =_afcd .AddDate (0,_gdbd ,0);};return _afcd ;};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_aeeage ,_ggff :=_cfaf ("\u0046\u0049\u004e\u0044",args );if _ggff .Type !=ResultTypeEmpty {return _ggff ;};_bbff :=_dcf .ToLower (_aeeage ._cfeee );if _bbff ==""{return MakeNumberResult (1.0);};_abdg :=_dcf .ToLower (_aeeage ._gbbf );_acfde :=_aeeage ._ggcg ;_babd :=1;for _gagef :=range _abdg {if _babd < _acfde {_babd ++;continue ;};_adgba :=_ba .Index (_bbff ,_abdg [_gagef :]);if _adgba ==0{return MakeNumberResult (float64 (_babd ));};_babd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _fbgc (_cgagg []Result ,_adaf bool )Result {_egaf :="\u004d\u0049\u004e";if _adaf {_egaf ="\u004d\u0049\u004e\u0041";};if len (_cgagg )==0{return MakeErrorResult (_egaf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feag :=_gfd .MaxFloat64 ;for _ ,_ccgfb :=range _cgagg {switch _ccgfb .Type {case ResultTypeNumber :if (_adaf ||!_ccgfb .IsBoolean )&&_ccgfb .ValueNumber < _feag {_feag =_ccgfb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dgfg :=_fbgc (_ccgfb .ListValues (),_adaf );if _dgfg .ValueNumber < _feag {_feag =_dgfg .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bebc :=0.0;if _adaf {_bebc =_ccgfb .AsNumber ().ValueNumber ;};if _bebc < _feag {_feag =_bebc ;};default:_ed .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_egaf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccgfb .Type );};};if _feag ==_gfd .MaxFloat64 {_feag =0;};return MakeNumberResult (_feag );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_bdbff SheetPrefixExpr )Update (q *_da .UpdateQuery )Expression {return _bdbff };func _dadc (_ebdf []Result ,_bcage bool ,_bafg string )Result {var _dcbac ,_bfbd string ;if _bcage {_dcbac ="\u0074\u0068\u0072e\u0065";_bfbd ="\u006f\u0064\u0064";}else {_dcbac ="\u0074\u0077\u006f";_bfbd ="\u0065\u0076\u0065\u006e";};_edea :=len (_ebdf );if (_bcage &&_edea < 3)||(!_bcage &&_edea < 2){return MakeErrorResult (_bafg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dcbac +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_edea /2*2==_edea )==_bcage {return MakeErrorResult (_bafg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bfbd +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_agbc :=-1;_abcg :=-1;for _aegb :=0;_aegb < _edea ;_aegb +=2{_afdcc :=_ebdf [_aegb ];if _afdcc .Type !=ResultTypeArray &&_afdcc .Type !=ResultTypeList {return MakeErrorResult (_bafg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_eefc :=_fcef (_afdcc );if _abcg ==-1{_abcg =len (_eefc );_agbc =len (_eefc [0]);}else if len (_eefc )!=_abcg ||len (_eefc [0])!=_agbc {return MakeErrorResult (_bafg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _bcage &&_aegb ==0{_aegb --;};};return _gea ;};func _cbab (_bdgd []Result ,_cebbbf rmode )Result {if len (_bdgd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebfaa :=_bdgd [0].AsNumber ();if _ebfaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eegcg :=_bdgd [1].AsNumber ();if _eegcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eecbe :=_eegcg .ValueNumber ;_edfdf :=_ebfaa .ValueNumber ;_dddad :=1.0;if _eecbe > 0{_dddad =_gfd .Pow (1/10.0,_eecbe );}else {_dddad =_gfd .Pow (10.0,-_eecbe );};_edfdf ,_gafb :=_gfd .Modf (_edfdf /_dddad );switch _cebbbf {case _acdbd :const _abbg =0.499999999;if _gafb >=_abbg {_edfdf ++;}else if _gafb <=-_abbg {_edfdf --;};case _ffag :case _bdgfg :if _gafb > 0{_edfdf ++;}else if _gafb < 0{_edfdf --;};};return MakeNumberResult (_edfdf *_dddad );};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cefc ,_abdeb :=_debd (args ,false );if _abdeb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cefc /_abdeb );};type ri struct{_dgac float64 ;_gced string ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_ebdg :=_dadc (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _ebdg .Type !=ResultTypeEmpty {return _ebdg ;};_dagf :=_ddad (args [1:]);_caeb :=_gfd .MaxFloat64 ;_bbgeg :=_fcef (args [0]);for _ ,_dcedb :=range _dagf {_ccfb :=_bbgeg [_dcedb ._caca ][_dcedb ._eaeed ].ValueNumber ;if _caeb > _ccfb {_caeb =_ccfb ;};};if _caeb ==_gfd .MaxFloat64 {_caeb =0;};return MakeNumberResult (float64 (_caeb ));};func (_eaag tokenType )String ()string {return _bagfd (int (_eaag ))};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_gfbc ,_cbba :=_cfaf ("\u0046\u0049\u004e\u0044",args );if _cbba .Type !=ResultTypeEmpty {return _cbba ;};_cbaaf :=_dcf .ToLower (_gfbc ._cfeee );_fecfg :=_dcf .ToLower (_gfbc ._gbbf );if _cbaaf ==""{return MakeNumberResult (1.0);};_abbc :=_gfbc ._ggcg -1;_cgagc :=1;_afgc :=0;for _cffeg :=range _fecfg {if _cffeg !=0{_eeabd :=1;if _cffeg -_afgc > 1{_eeabd =2;};_cgagc +=_eeabd ;};if _cgagc > _abbc {_bdgc :=_ba .Index (_cbaaf ,_fecfg [_cffeg :]);if _bdgc ==0{return MakeNumberResult (float64 (_cgagc ));};};_afgc =_cffeg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bfgb :=args [0];if _bfgb .Type !=ResultTypeNumber &&_bfgb .Type !=ResultTypeString &&_bfgb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_aeacc :=args [1].ValueString ;switch _bfgb .Type {case ResultTypeNumber :return MakeStringResult (_fg .Number (_bfgb .ValueNumber ,_aeacc ));case ResultTypeString :return MakeStringResult (_fg .String (_bfgb .ValueString ,_aeacc ));case ResultTypeEmpty :return MakeStringResult (_fg .Number (0,_aeacc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// Update returns the same object as updating sheet references does not affect Number.
func (_afcab Number )Update (q *_da .UpdateQuery )Expression {return _afcab };

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fgg *defEval )LastEvalIsRef ()bool {return _fgg ._abf };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_eceg :=len (args );if _eceg < 4||_eceg > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cegf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geebg :=args [1].ValueNumber ;if _geebg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deac :=args [2].ValueNumber ;if _deac < _geebg {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_faab :=args [3].ValueNumber ;_cbae :=0.0;if _eceg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbae =args [4].ValueNumber ;};_fbdg :=0;if _eceg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbdg =int (args [5].ValueNumber );if _fbdg !=0{_fbdg =1;};};return MakeNumberResult (_fdfgf (_cegf ,_deac ,_faab ,_cbae ,_fbdg )-_bced (_cegf ,_geebg ,_deac ,_faab ,_cbae ,_fbdg ));};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fgda (args ,true )};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ca [][]Expression };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geca :=args [0].Ref ;if _geca .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_geca .Value ,ev ).IsBoolean );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_fecd ,_fcf :=_gdfc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _fcf .Type ==ResultTypeError {return _fcf ;};return MakeNumberResult (_ecae (_fecd ._def ,_fecd ._ecacc ,_fecd ._cfgb ,_fecd ._fdec ));};

// String returns a string representation of a horizontal range.
func (_ggbeb HorizontalRange )String ()string {return _ggbeb .horizontalRangeReference ()};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_deagg :=args [0].AsNumber ();if _deagg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_fea :=float64 (1);if _deagg .ValueNumber < 0{_fea =-1;};if len (args )> 1{_dccc :=args [1].AsNumber ();if _dccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fea =_dccc .ValueNumber ;};_bdac :=float64 (1);if len (args )> 2{_dcgda :=args [2].AsNumber ();if _dcgda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_bdac =_dcgda .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gfd .Ceil (_deagg .ValueNumber ));};_ebdc :=_deagg .ValueNumber ;_ebdc ,_fccg :=_gfd .Modf (_ebdc /_fea );if _fccg !=0{if _deagg .ValueNumber > 0{_ebdc ++;}else if _bdac < 0{_ebdc --;};};return MakeNumberResult (_ebdc *_fea );};func _cdfb (_cade Result )bool {_faga :=_cade .Type ;return _faga !=ResultTypeArray &&_faga !=ResultTypeList ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gbgbe ,_faccc Expression };func _eed (_bec string ,_cdc *_da .UpdateQuery )string {_ddc ,_gac :=_bfd .ParseCellReference (_bec );if _gac !=nil {return "\u0023\u0052\u0045F\u0021";};if _cdc .UpdateType ==_da .UpdateActionRemoveColumn {_geg :=_cdc .ColumnIdx ;_dcfc :=_ddc .ColumnIdx ;if _dcfc < _geg {return _bec ;}else if _dcfc ==_geg {return "\u0023\u0052\u0045F\u0021";}else {return _ddc .Update (_da .UpdateActionRemoveColumn ).String ();};};return _bec ;};

// Reference returns a string reference value to an expression with prefix.
func (_aeebc PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_cegcg :=_aeebc ._dgfe .Reference (ctx ,ev );_dfafgf :=_aeebc ._cdadd .Reference (ctx ,ev );if _cegcg .Type ==ReferenceTypeSheet &&_dfafgf .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_cegcg .Value +"\u0021"+_dfafgf .Value };};return ReferenceInvalid ;};type cumulArgs struct{_bbbdb float64 ;_fecf float64 ;_agf float64 ;_agad float64 ;_ggf float64 ;_eabd int ;};func _debd (_adggc []Result ,_bgeb bool )(float64 ,float64 ){_babb :=0.0;_edcfc :=0.0;for _ ,_bcgca :=range _adggc {switch _bcgca .Type {case ResultTypeNumber :if _bgeb ||!_bcgca .IsBoolean {_edcfc +=_bcgca .ValueNumber ;_babb ++;};case ResultTypeList ,ResultTypeArray :_cbfc ,_bgag :=_debd (_bcgca .ListValues (),_bgeb );_edcfc +=_cbfc ;_babb +=_bgag ;case ResultTypeString :if _bgeb {_babb ++;};case ResultTypeEmpty :};};return _edcfc ,_babb ;};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_eecac HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ccab :=_eecac .horizontalRangeReference ();if _cgdg ,_gbag :=ev .GetFromCache (_ccab );_gbag {return _cgdg ;};_gaaa ,_egebf :=_ebfed (ctx ,_eecac ._cfde ,_eecac ._agbec );_fbae :=_badgc (ctx ,ev ,_gaaa ,_egebf );ev .SetCache (_ccab ,_fbae );return _fbae ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ggca :=len (args );if _ggca < 3||_ggca > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gefd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ddcbe :=args [2].ValueNumber ;_cgee :=0.0;if _ggca >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgee =args [3].ValueNumber ;};_agbf :=0.0;if _ggca ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_agbf =args [4].ValueNumber ;if _agbf !=0{_agbf =1;};};_ccfd :=_gefd *(1+_bda *_agbf )-_cgee *_bda ;_dgfc :=(_ddcbe *_bda +_gefd *(1+_bda *_agbf ));return MakeNumberResult (_gfd .Log (_ccfd /_dgfc )/_gfd .Log (1+_bda ));};type rmode byte ;func _eccc (_fcda Result )[]Result {_gafeb :=_fcda .ValueList ;if _fcda .Type ==ResultTypeArray {_gafeb =nil ;for _ ,_cfbbf :=range _fcda .ValueArray {if len (_cfbbf )> 0{_gafeb =append (_gafeb ,_cfbbf [0]);}else {_gafeb =append (_gafeb ,_gea );};};};return _gafeb ;};const _egabg =57364;

// GetFilename returns an empty string for the invalid reference context.
func (_eedda *ivr )GetFilename ()string {return ""};func (_ecbc *Lexer )nextRaw ()*node {for len (_ecbc ._ceba )!=0{_aefgb :=<-_ecbc ._ceba [len (_ecbc ._ceba )-1];if _aefgb !=nil {return _aefgb ;};_ecbc ._ceba =_ecbc ._ceba [0:len (_ecbc ._ceba )-1];};return <-_ecbc ._abcd ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_dadb (args ,_fdeb ))};

// Reference returns a string reference value to a sheet.
func (_bdfa SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_bdfa ._bace };};func _ad (_egd BinOpType ,_edc ,_ff []Result )Result {_agg :=[]Result {};for _ge :=range _edc {_ga :=_edc [_ge ].AsNumber ();_faf :=_ff [_ge ].AsNumber ();if _ga .Type !=ResultTypeNumber ||_faf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _egd {case BinOpTypePlus :_agg =append (_agg ,MakeNumberResult (_ga .ValueNumber +_faf .ValueNumber ));case BinOpTypeMinus :_agg =append (_agg ,MakeNumberResult (_ga .ValueNumber -_faf .ValueNumber ));case BinOpTypeMult :_agg =append (_agg ,MakeNumberResult (_ga .ValueNumber *_faf .ValueNumber ));case BinOpTypeDiv :if _faf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_agg =append (_agg ,MakeNumberResult (_ga .ValueNumber /_faf .ValueNumber ));case BinOpTypeExp :_agg =append (_agg ,MakeNumberResult (_gfd .Pow (_ga .ValueNumber ,_faf .ValueNumber )));case BinOpTypeLT :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber < _faf .ValueNumber ));case BinOpTypeGT :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber > _faf .ValueNumber ));case BinOpTypeEQ :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber ==_faf .ValueNumber ));case BinOpTypeLEQ :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber <=_faf .ValueNumber ));case BinOpTypeGEQ :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber >=_faf .ValueNumber ));case BinOpTypeNE :_agg =append (_agg ,MakeBoolResult (_ga .ValueNumber !=_faf .ValueNumber ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_egd ));};};return MakeListResult (_agg );};func _gfdc (_feeg []Result )[]float64 {_agbcf :=make ([]float64 ,0);for _ ,_cdde :=range _feeg {if _cdde .Type ==ResultTypeEmpty {continue ;};_cdde =_cdde .AsNumber ();switch _cdde .Type {case ResultTypeNumber :if !_cdde .IsBoolean {_agbcf =append (_agbcf ,_cdde .ValueNumber );};case ResultTypeList ,ResultTypeArray :_agbcf =append (_agbcf ,_gfdc (_cdde .ListValues ())...);case ResultTypeString :default:_ed .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdde .Type );};};return _agbcf ;};func _fa (_ecb ,_gd [][]Result )bool {if len (_ecb )!=len (_gd ){return false ;};for _ceb :=range _ecb {if len (_ecb [_ceb ])!=len (_gd [_ceb ]){return false ;};};return true ;};const _cad =_bf .Second *1;

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_eafcd :=_dcf .Split (v ,"\u003a");if len (_eafcd )!=2{return nil ;};_bfffcf ,_ :=_ab .Atoi (_eafcd [0]);_gdab ,_ :=_ab .Atoi (_eafcd [1]);if _bfffcf > _gdab {_bfffcf ,_gdab =_gdab ,_bfffcf ;};return PrefixHorizontalRange {_dceda :pfx ,_fdgba :_bfffcf ,_dgefc :_gdab };};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_gfd .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};func _dbea (_fggc []Result )(bool ,Result ){for _ ,_agdcf :=range _fggc {if _agdcf .Type ==ResultTypeError {return true ,_agdcf ;};};return false ,MakeEmptyResult ();};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dcfcf ,_bcg :=_gdfc (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _bcg .Type ==ResultTypeError {return _bcg ;};_efc :=_aee (_dcfcf ._def );_gdcb :=_aee (_dcfcf ._ecacc );_bebf :=_dcfcf ._cfgb ;_afff :=_dcfcf ._fdec ;_fad :=_dbbg (_efc ,_gdcb ,_bebf ,_afff );_fdg ,_affg ,_gafd :=_fad .Date ();return MakeNumberResult (_adfc (_fdg ,int (_affg ),_gafd ));};

// Reference returns a string reference value to a range with prefix.
func (_fggacf PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_dedg :=_fggacf ._cegg .Reference (ctx ,ev );_bbda :=_fggacf ._ggae .Reference (ctx ,ev );_aedf :=_fggacf ._bbafd .Reference (ctx ,ev );if _dedg .Type ==ReferenceTypeSheet &&_bbda .Type ==ReferenceTypeCell &&_aedf .Type ==ReferenceTypeCell {return MakeRangeReference (_caeab (_dedg ,_bbda ,_aedf ));};return ReferenceInvalid ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gcdgc ,_dbce :=_ab .ParseFloat (v ,64);if _dbce !=nil {_ed .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_dbce );};return Number {_fcca :_gcdgc };};func _gfbf (_gdd string )(int ,int ,int ,bool ,Result ){_fgf :="";_baf :=[]string {};for _gaac ,_acfa :=range _gg {_baf =_acfa .FindStringSubmatch (_gdd );if len (_baf )> 1{_fgf =_gaac ;break ;};};if _fgf ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_fbg :=false ;var _aef ,_aff ,_dcfdg int ;var _bgb error ;switch _fgf {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_aff ,_bgb =_ab .Atoi (_baf [1]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_dcfdg ,_bgb =_ab .Atoi (_baf [3]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_aef ,_bgb =_ab .Atoi (_baf [5]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};if _aef < 0||_aef > 9999||(_aef > 99&&_aef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_aef =_cgag (_aef );_fbg =_baf [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_aff =_bed [_baf [1]];_dcfdg ,_bgb =_ab .Atoi (_baf [14]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_aef ,_bgb =_ab .Atoi (_baf [16]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};if _aef < 0||_aef > 9999||(_aef > 99&&_aef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_aef =_cgag (_aef );_fbg =_baf [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_cfbc ,_ffg :=_ab .Atoi (_baf [1]);if _ffg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_bdc ,_ffg :=_ab .Atoi (_baf [3]);if _ffg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_gcd ,_ffg :=_ab .Atoi (_baf [5]);if _ffg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};if _cfbc >=1900&&_cfbc < 10000{_aef =_cfbc ;_aff =_bdc ;_dcfdg =_gcd ;}else if _cfbc > 0&&_cfbc < 13{_aff =_cfbc ;_dcfdg =_bdc ;_aef =_gcd ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_fbg =_baf [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_aef ,_bgb =_ab .Atoi (_baf [16]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_aff =_bed [_baf [3]];_dcfdg ,_bgb =_ab .Atoi (_baf [1]);if _bgb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};_fbg =_baf [19]=="";};if !_fbf (_aef ,_aff ,_dcfdg ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbdg );};return _aef ,_aff ,_dcfdg ,_fbg ,_gea ;};const _dbgec =57344;func _ggdeg (_bgeab ,_fdca float64 )float64 {_bgeab =_gfd .Trunc (_bgeab );_fdca =_gfd .Trunc (_fdca );if _bgeab ==0&&_fdca ==0{return 0;};return _bgeab *_fdca /_gfeag (_bgeab ,_fdca );};var _gea Result =MakeEmptyResult ();const _fee ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fgda (args ,false )};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_beeaf :=args [0].AsNumber ();if _beeaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ddcag :=float64 (1);if _beeaf .ValueNumber < 0{_ddcag =-1;};if len (args )> 1{_ecga :=args [1].AsNumber ();if _ecga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddcag =_ecga .ValueNumber ;};if _ddcag < 0&&_beeaf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_gfd .Ceil (_beeaf .ValueNumber ));};_gabg :=_beeaf .ValueNumber ;_gabg ,_bebg :=_gfd .Modf (_gabg /_ddcag );if _bebg > 0{_gabg ++;};return MakeNumberResult (_gabg *_ddcag );};const _ecdcb =57374;

// Eval evaluates a vertical range returning a list of results or an error.
func (_cagb VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dbdb :=_cagb .verticalRangeReference ();if _cbbb ,_ffacfb :=ev .GetFromCache (_dbdb );_ffacfb {return _cbbb ;};_dadf ,_cbada :=_bebbb (ctx ,_cagb ._bbadb ,_cagb ._fdaegd );_gbda :=_badgc (ctx ,ev ,_dadf ,_cbada );ev .SetCache (_dbdb ,_gbda );return _gbda ;};var _fecbd =[...]uint8 {0,17,33,49,63,78,93,108};const _ccgd =57370;func (_agec *defEval )checkLastEvalIsRef (_aa Context ,_agbe Expression ){switch _agbe .(type ){case FunctionCall :switch _agbe .(FunctionCall )._gaec {case "\u0049\u0053\u0052E\u0046":for _ ,_cfbb :=range _agbe .(FunctionCall )._edafd {switch _cfbb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_dcb :=_cfbb .Eval (_aa ,_agec );_agec ._abf =!(_dcb .Type ==ResultTypeError &&_dcb .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_agec ._abf =false ;};};};};};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efad :=args [0].AsNumber ();if _efad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _dagd float64 ;_bdedb :=args [1].AsNumber ();if _bdedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dagd =_bdedb .ValueNumber ;if _dagd < 0&&_efad .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ffcg :=_efad .ValueNumber ;_ffcg ,_dfeac :=_gfd .Modf (_ffcg /_dagd );if _dfeac !=0{if _efad .ValueNumber < 0&&_dfeac < 0{_ffcg --;};};return MakeNumberResult (_ffcg *_dagd );};

// Eval evaluates the binary expression using the context given.
func (_abe BinaryExpr )String ()string {_ae :="";switch _abe ._ac {case BinOpTypePlus :_ae ="\u002b";case BinOpTypeMinus :_ae ="\u002d";case BinOpTypeMult :_ae ="\u002a";case BinOpTypeDiv :_ae ="\u002f";case BinOpTypeExp :_ae ="\u005e";case BinOpTypeLT :_ae ="\u003c";case BinOpTypeGT :_ae ="\u003e";case BinOpTypeEQ :_ae ="\u003d";case BinOpTypeLEQ :_ae ="\u003c\u003d";case BinOpTypeGEQ :_ae ="\u003e\u003d";case BinOpTypeNE :_ae ="\u003c\u003e";case BinOpTypeConcat :_ae ="\u0026";};return _abe ._ec .String ()+_ae +_abe ._ce .String ();};var _dedf string =string ([]byte {92});type Reference struct{Type ReferenceType ;Value string ;};func _eg (_be BinOpType ,_eafb ,_cc [][]Result )Result {_daa :=[][]Result {};for _age :=range _eafb {_ced :=_ad (_be ,_eafb [_age ],_cc [_age ]);if _ced .Type ==ResultTypeError {return _ced ;};_daa =append (_daa ,_ced .ValueList );};return MakeArrayResult (_daa );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_edgb :=len (args );if _edgb !=4&&_edgb !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddce :=args [0].ValueNumber ;if _ddce < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efgd :=args [1].ValueNumber ;if _efgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afd :=args [2].ValueNumber ;if _afd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ddef :=args [3].ValueNumber ;if _ddef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ddef -_afd > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cgbb :=12.0;if _edgb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbb =args [4].ValueNumber ;if _cgbb < 1||_cgbb > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cgbb ==12&&_ddef > _afd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _efgd >=_ddce {return MakeNumberResult (0);};_gcfe :=1-_gfd .Pow (_efgd /_ddce ,1/_afd );_gcfe =float64 (int (_gcfe *1000+0.5))/1000;_dfdd :=_ddce *_gcfe *_cgbb /12;if _ddef ==1{return MakeNumberResult (_dfdd );};_fdeg :=_dfdd ;_baea :=0.0;_dgb :=_afd ;if _dgb > _ddef {_dgb =_ddef ;};for _fega :=2.0;_fega <=_dgb ;_fega ++{_baea =(_ddce -_fdeg )*_gcfe ;_fdeg +=_baea ;};if _ddef > _afd {return MakeNumberResult ((_ddce -_fdeg )*_gcfe *(12-_cgbb )/12);};return MakeNumberResult (_baea );};const _ebbc =2;var _aadc =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _gcffc =[...]string {};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _fbgc (args ,false )};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _fbgc (args ,true )};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Eval evaluates and returns the result of an error expression.
func (_aga Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_aga ._ffef )};func _eegdc (_eage ,_aaa _bf .Time )bool {_ecff :=_eage .Unix ();_ege :=_aaa .Unix ();_gcdg :=_eage .Year ();_eeaf :=_dfeb (_gcdg ,_bf .March ,1);if _geb (_gcdg )&&_ecff < _eeaf &&_ege >=_eeaf {return true ;};var _dec =_aaa .Year ();var _bdd =_dfeb (_dec ,_bf .March ,1);return (_geb (_dec )&&_ege >=_bdd &&_ecff < _bdd );};

// Reference returns a string reference value to a horizontal range.
func (_gbdg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gbdg .horizontalRangeReference ()};};func (_fggbf Result )String ()string {return _fggbf .Value ()};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ffd :=args [1].ValueNumber ;_feea :=args [0];var _fed float64 ;switch _feea .Type {case ResultTypeEmpty :_fed =0;case ResultTypeNumber :_fed =_feea .ValueNumber ;case ResultTypeString :_gdf :=DateValue ([]Result {args [0]});if _gdf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fed =_gdf .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fba :=_aee (_fed );_cdbf :=_fba .AddDate (0,int (_ffd +1),0);_gbfc ,_dcff ,_ :=_cdbf .Date ();_acc :=_adfc (_gbfc ,int (_dcff ),0);if _acc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _gbfc ==1900&&_dcff ==3{_acc --;};return MakeNumberResult (_acc );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aab :=args [0].ValueNumber ;_ecac :=args [1].ValueNumber ;if _ecac < _aab {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _ecac ==_aab {return MakeNumberResult (0);};_dge :=_dcf .ToLower (args [2].ValueString );if _dge =="\u0064"{return MakeNumberResult (_ecac -_aab );};_eag :=_aee (_aab );_dcec :=_aee (_ecac );_eedd ,_ece ,_adg :=_eag .Date ();_fge ,_beb ,_edae :=_dcec .Date ();_ggb :=int (_ece );_acg :=int (_beb );var _gcb float64 ;switch _dge {case "\u0079":_gcb =float64 (_fge -_eedd );if _acg < _ggb ||(_acg ==_ggb &&_edae < _adg ){_gcb --;};case "\u006d":_gga :=_fge -_eedd ;_cccg :=_acg -_ggb ;if _edae < _adg {_cccg --;};if _cccg < 0{_gga --;_cccg +=12;};_gcb =float64 (_gga *12+_cccg );case "\u006d\u0064":_cdda :=_acg ;if _edae < _adg {_cdda --;};_gcb =float64 (int (_ecac -_adfc (_fge ,_cdda ,_adg )));case "\u0079\u006d":_gcb =float64 (_acg -_ggb );if _edae < _adg {_gcb --;};if _gcb < 0{_gcb +=12;};case "\u0079\u0064":_ebag :=_fge ;if _acg < _ggb ||(_acg ==_ggb &&_edae < _adg ){_ebag --;};_gcb =float64 (int (_ecac -_adfc (_ebag ,_ggb ,_adg )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gcb );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_ceef :=len (args );if _ceef !=5&&_ceef !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gcabb ,_gdffc ,_agcg :=_gage (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _agcg .Type ==ResultTypeError {return _agcg ;};_cbg ,_agcg :=_egbf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _agcg .Type ==ResultTypeError {return _agcg ;};if _cbg >=_gcabb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gedfc :=args [3].ValueNumber ;if _gedfc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bdddg :=args [4].ValueNumber ;if _bdddg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_geeef :=0;if _ceef ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geeef =int (args [5].ValueNumber );if !_eeaa (_geeef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_cgeed ,_agcg :=_debf (_gcabb ,_gdffc ,_geeef );if _agcg .Type ==ResultTypeError {return _agcg ;};_bbbb ,_agcg :=_debf (_cbg ,_gdffc ,_geeef );if _agcg .Type ==ResultTypeError {return _agcg ;};_gfeb ,_agcg :=_debf (_cbg ,_gcabb ,_geeef );if _agcg .Type ==ResultTypeError {return _agcg ;};_bagg :=1+_bbbb *_gedfc ;_aged :=1+_cgeed *_bdddg ;return MakeNumberResult ((_bagg /_aged -_gfeb *_gedfc )*100);};var _egbag []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _ebde (_bdeea float64 ,_efcag *criteriaRegex )bool {_gffb ,_cfgdc :=_ab .ParseFloat (_efcag ._dagdg ,64);if _cfgdc !=nil {return false ;};switch _efcag ._gfde {case _dcccf :return _bdeea ==_gffb ;case _ccfe :return _bdeea <=_gffb ;case _aagfe :return _bdeea >=_gffb ;case _fedcb :return _bdeea < _gffb ;case _bffg :return _bdeea > _gffb ;};return false ;};func _effb (_gca ,_ddge ,_caeg ,_fddc int )int {if !_ddgca (_fddc ){return _caeg ;};_baae :=_caeg ;_fggd :=_cceg (_gca ,_ddge );if _baae > 30||_caeg >=_fggd ||_baae >=_fggd {_baae =30;};return _baae ;};var _bed =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _fcff (_fgec Result ,_gecg int )[]Result {_dabbe :=[]Result {};switch _fgec .Type {case ResultTypeList :_ebacd :=_fgec .ValueList ;_cacgfc :=len (_ebacd );for _gedfb :=0;_gedfb < _gecg ;_gedfb ++{if _gedfb < _cacgfc {_dabbe =append (_dabbe ,_ebacd [_gedfb ]);}else {_dabbe =append (_dabbe ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cabf :=0;_cabf < _gecg ;_cabf ++{_dabbe =append (_dabbe ,_fgec );};};return _dabbe ;};

// Reference returns an invalid reference for ConstArrayExpr.
func (_eafd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_debfg Result )ListValues ()[]Result {if _debfg .Type ==ResultTypeArray {_gbgag :=[]Result {};for _ ,_egee :=range _debfg .ValueArray {for _ ,_bcdf :=range _egee {_gbgag =append (_gbgag ,_bcdf );};};return _gbgag ;};if _debfg .Type ==ResultTypeList {return _debfg .ValueList ;};return nil ;};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_gfb ,_bff :=_ab .ParseBool (v );if _bff !=nil {_ed .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_bff );};return Bool {_ebc :_gfb };};const _abba =57352;

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_dgfe :pfx ,_cdadd :exp }};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// String returns a string representation for Bool.
func (_gee Bool )String ()string {if _gee ._ebc {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};const _edfac =1;func _fdfgf (_deg ,_daadc ,_ccea ,_fcec float64 ,_gcaa int )float64 {var _eege float64 ;if _deg ==0{_eege =(_ccea +_fcec )/_daadc ;}else {_cbec :=_gfd .Pow (1+_deg ,_daadc );if _gcaa ==1{_eege =(_fcec *_deg /(_cbec -1)+_ccea *_deg /(1-1/_cbec ))/(1+_deg );}else {_eege =_fcec *_deg /(_cbec -1)+_ccea *_deg /(1-1/_cbec );};};return -_eege ;};const _ccfdg ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _bgde ="\u0028\u0020\u0028"+_fee +"\u007c"+_eea +"\u007c"+_eafc +"\u007c"+_fgb +"\u0029\u0029\u003f\u0024";

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbcg :=args [0];switch _fbcg .Type {case ResultTypeError :return _fbcg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_fbcg .ValueNumber !=0);};if _fbcg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _fafb (args );case ResultTypeArray :return _eebb (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dagbd :=args [0];if _dagbd .Type !=ResultTypeArray &&_dagbd .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abfag :=_fcef (_dagbd );_baaea :=args [2];if _baaea .Type !=ResultTypeArray &&_baaea .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bccg :=_fcef (_baaea );_bbgd :=_egec (args [1]);_gdebd :=0.0;for _dgec ,_fdef :=range _abfag {for _geab ,_gbbc :=range _fdef {if _gccf (_gbbc ,_bbgd ){_gdebd +=_bccg [_dgec ][_geab ].ValueNumber ;};};};return MakeNumberResult (_gdebd );};

// String returns an empty string for Error.
func (_afa Error )String ()string {return ""};

// String is a string expression.
type String struct{_cfgdg string };

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_gaec :name ,_edafd :args };};var _eeea =[]*_db .Regexp {};

// Function is a standard function whose result only depends on its arguments.
type Function func (_eacff []Result )Result ;type yyLexer interface{Lex (_fgce *yySymType )int ;Error (_afbg string );};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_aeebg :=args [0].AsNumber ();if _aeebg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dae :=_gfd .Signbit (_aeebg .ValueNumber );_cggaa ,_ffafb :=_gfd .Modf ((_aeebg .ValueNumber -1)/2);_adad :=_cggaa *2+1;if _ffafb !=0{if !_dae {_adad +=2;}else {_adad -=2;};};return MakeNumberResult (_adad );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_baab :=args [0].AsNumber ();if _baab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggfaa :=float64 (1);if _baab .ValueNumber < 0{_ggfaa =-1;};if len (args )> 1{_afdec :=args [1].AsNumber ();if _afdec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_ggfaa =_gfd .Abs (_afdec .ValueNumber );};if len (args )==1{return MakeNumberResult (_gfd .Floor (_baab .ValueNumber ));};_afdc :=_baab .ValueNumber ;_afdc ,_gbec :=_gfd .Modf (_afdc /_ggfaa );if _gbec !=0{if _baab .ValueNumber < 0{_afdc --;};};return MakeNumberResult (_afdc *_ggfaa );};func (_fded *yyParserImpl )Lookahead ()int {return _fded ._adeeb };

// String returns a string representation of String.
func (_dfefc String )String ()string {return "\u0022"+_dfefc ._cfgdg +"\u0022"};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fafgf :=args [0];if _fafgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbega :=int (_fafgf .ValueNumber );if _bbega < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_bbega {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_bbega ];};

// Error is an error expression.
type Error struct{_ffef string };

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_cdbfdc .Lock ();defer _cdbfdc .Unlock ();if _ ,_fgebf :=_geddf [name ];_fgebf {_ed .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_geddf [name ]=fn ;};func _dcd (_afcdd float64 )bool {return _afcdd ==1||_afcdd ==2||_afcdd ==4};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adbgg :=args [0].AsString ();if _adbgg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddfe :=_fc .Buffer {};for _ ,_cgcg :=range _adbgg .ValueString {if _dc .IsPrint (_cgcg ){_ddfe .WriteRune (_cgcg );};};return MakeStringResult (_ddfe .String ());};const (_agdb cmpResult =0;_fceee cmpResult =-1;_cdbg cmpResult =1;_cffg cmpResult =2;);func _cgad (_eebgd string )string {_eebgd =_dcf .Replace (_eebgd ,"\u000a","\u005c\u006e",-1);_eebgd =_dcf .Replace (_eebgd ,"\u000d","\u005c\u0072",-1);_eebgd =_dcf .Replace (_eebgd ,"\u0009","\u005c\u0074",-1);return _eebgd ;};type couponArgs struct{_def float64 ;_ecacc float64 ;_cfgb int ;_fdec int ;};var _dgabb =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcdc :=args [0].AsNumber ();if _dcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_gfd .Pi *_dcdc .ValueNumber );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_bace :s }};var _ddg =[]*_db .Regexp {};const _eafc ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _gdff (_begd ,_bggd float64 ,_fece ,_fagbb int )float64 {_eagb :=_aee (_begd );_cdae :=_aee (_bggd );_dca :=_dbbg (_eagb ,_cdae ,_fece ,_fagbb );return _edfg (_dca ,_eagb ,_fagbb );};const _adfba =57367;func (_cegbc *Lexer )lex (_ddedc _f .Reader ){_cgadg ,_bfaf ,_bfea :=0,0,0;_deebb :=-1;_gdgba ,_dbbgg ,_gaeg :=0,0,0;_ =_gaeg ;_eeaec :=1;_ =_eeaec ;_aebg :=make ([]byte ,4096);_ecfb :=false ;for !_ecfb {_bebfa :=0;if _gdgba > 0{_bebfa =_bfaf -_gdgba ;};_bfaf =0;_affa ,_ebfad :=_ddedc .Read (_aebg [_bebfa :]);if _affa ==0||_ebfad !=nil {_ecfb =true ;};_bfea =_affa +_bebfa ;if _bfea < len (_aebg ){_deebb =_bfea ;};{_cgadg =_cefcd ;_gdgba =0;_dbbgg =0;_gaeg =0;};{var _aegg int ;var _fageb uint ;if _bfaf ==_bfea {goto _decc ;};if _cgadg ==0{goto _aaba ;};_gcbc :_aegg =int (_fabdc [_cgadg ]);_fageb =uint (_cdegg [_aegg ]);_aegg ++;for ;_fageb > 0;_fageb --{_aegg ++;switch _cdegg [_aegg -1]{case 2:_gdgba =_bfaf ;};};switch _cgadg {case 30:switch _aebg [_bfaf ]{case 34:goto _cfca ;case 35:goto _bbcef ;case 36:goto _cafe ;case 38:goto _dcedf ;case 39:goto _aeace ;case 40:goto _abfac ;case 41:goto _egcg ;case 42:goto _dage ;case 43:goto _fdcd ;case 44:goto _eabcb ;case 45:goto _bgbd ;case 47:goto _fcdgf ;case 58:goto _ecegd ;case 59:goto _ggdef ;case 60:goto _gbea ;case 61:goto _ffeee ;case 62:goto _fbcgg ;case 63:goto _bcab ;case 70:goto _gdaf ;case 84:goto _fgcgb ;case 92:goto _abbe ;case 94:goto _fegb ;case 95:goto _cacae ;case 123:goto _gdgg ;case 125:goto _debda ;};switch {case _aebg [_bfaf ]< 65:switch {case _aebg [_bfaf ]> 37:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dggcf ;};case _aebg [_bfaf ]>=33:goto _bcab ;};case _aebg [_bfaf ]> 90:switch {case _aebg [_bfaf ]> 93:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dbfdg ;};case _aebg [_bfaf ]>=91:goto _bcab ;};default:goto _cddg ;};goto _gdgbb ;case 1:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _dgcae ;case 123:goto _dgcae ;case 125:goto _dgcae ;};switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _dgcae ;};case _aebg [_bfaf ]> 45:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _dgcae ;};case _aebg [_bfaf ]>=58:goto _dgcae ;};default:goto _dgcae ;};goto _gdgbb ;case 0:goto _aaba ;case 2:if _aebg [_bfaf ]==34{goto _adgagg ;};goto _cfca ;case 31:if _aebg [_bfaf ]==34{goto _cfca ;};goto _bbbaa ;case 3:switch _aebg [_bfaf ]{case 78:goto _ffed ;case 82:goto _aedeb ;};goto _bcab ;case 4:switch _aebg [_bfaf ]{case 47:goto _fgcef ;case 85:goto _ccgb ;};goto _bcab ;case 5:if _aebg [_bfaf ]==65{goto _gcbf ;};goto _bcab ;case 6:switch _aebg [_bfaf ]{case 76:goto _cbefg ;case 77:goto _decb ;};goto _bcab ;case 7:if _aebg [_bfaf ]==76{goto _decb ;};goto _bcab ;case 8:if _aebg [_bfaf ]==33{goto _gcbf ;};goto _bcab ;case 9:if _aebg [_bfaf ]==69{goto _cgdbg ;};goto _bcab ;case 10:if _aebg [_bfaf ]==70{goto _fdfcc ;};goto _bcab ;case 11:if _aebg [_bfaf ]==33{goto _dgdd ;};goto _bcab ;case 12:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _bcab ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _bcab ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]< 65:if 58<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=63{goto _bcab ;};case _aebg [_bfaf ]> 90:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _bcab ;};default:goto _cddf ;};default:goto _dgbbg ;};goto _gdgbb ;case 13:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _bcab ;case 58:goto _addce ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _bcab ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _bcab ;};case _aebg [_bfaf ]>=59:goto _bcab ;};default:goto _dgbbg ;};goto _gdgbb ;case 14:if _aebg [_bfaf ]==36{goto _bbegac ;};if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _gaagc ;};goto _dgcae ;case 15:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _gaagc ;};goto _dgcae ;case 32:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _gaagc ;};goto _ddgg ;case 16:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 47:goto _bcab ;case 58:goto _cecf ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 45:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _acfea ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]> 90:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _bcab ;};case _aebg [_bfaf ]>=65:goto _cddf ;};default:goto _bcab ;};goto _gdgbb ;case 17:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _dgcae ;case 123:goto _dgcae ;case 125:goto _dgcae ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _dgcae ;};case _aebg [_bfaf ]>=34:goto _dgcae ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _dgcae ;};case _aebg [_bfaf ]>=58:goto _dgcae ;};default:goto _acfea ;};goto _gdgbb ;case 33:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _debfb ;case 123:goto _debfb ;case 125:goto _debfb ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _debfb ;};case _aebg [_bfaf ]>=34:goto _debfb ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _debfb ;};case _aebg [_bfaf ]>=58:goto _debfb ;};default:goto _acfea ;};goto _gdgbb ;case 18:if _aebg [_bfaf ]==36{goto _edeg ;};if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _ebegb ;};goto _dgcae ;case 19:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _ebegb ;};goto _dgcae ;case 34:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _ebegb ;};goto _gdbfc ;case 20:switch _aebg [_bfaf ]{case 39:goto _bcab ;case 42:goto _bcab ;case 47:goto _bcab ;case 58:goto _bcab ;case 63:goto _bcab ;};if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=93{goto _bcab ;};goto _egac ;case 21:switch _aebg [_bfaf ]{case 39:goto _cefgf ;case 42:goto _bcab ;case 47:goto _bcab ;case 58:goto _bcab ;case 63:goto _bcab ;};if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=93{goto _bcab ;};goto _egac ;case 22:if _aebg [_bfaf ]==33{goto _eeabdf ;};goto _bcab ;case 35:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _aefag ;case 58:goto _addce ;case 101:goto _cdcg ;case 123:goto _cfdcb ;case 125:goto _cfdcb ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=47{goto _cfdcb ;};case _aebg [_bfaf ]>=34:goto _cfdcb ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _cfdcb ;};case _aebg [_bfaf ]>=59:goto _cfdcb ;};default:goto _dggcf ;};goto _gdgbb ;case 36:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _cfdcb ;case 101:goto _cdcg ;case 123:goto _cfdcb ;case 125:goto _cfdcb ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _cfdcb ;};case _aebg [_bfaf ]>=34:goto _cfdcb ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _cfdcb ;};case _aebg [_bfaf ]>=58:goto _cfdcb ;};default:goto _aefag ;};goto _gdgbb ;case 23:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _gcabe ;case 123:goto _gcabe ;case 125:goto _gcabe ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _gcabe ;};case _aebg [_bfaf ]>=34:goto _gcabe ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _gcabe ;};case _aebg [_bfaf ]>=58:goto _gcabe ;};default:goto _ebfge ;};goto _gdgbb ;case 37:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 47:goto _cfdcb ;case 123:goto _cfdcb ;case 125:goto _cfdcb ;};switch {case _aebg [_bfaf ]< 48:switch {case _aebg [_bfaf ]> 35:if 37<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=45{goto _cfdcb ;};case _aebg [_bfaf ]>=34:goto _cfdcb ;};case _aebg [_bfaf ]> 57:switch {case _aebg [_bfaf ]> 63:if 91<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=94{goto _cfdcb ;};case _aebg [_bfaf ]>=58:goto _cfdcb ;};default:goto _ebfge ;};goto _gdgbb ;case 38:switch _aebg [_bfaf ]{case 61:goto _gdfag ;case 62:goto _ecgab ;};goto _fabbd ;case 39:if _aebg [_bfaf ]==61{goto _aafa ;};goto _egece ;case 24:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _bcab ;};default:goto _bcab ;};goto _gdgbb ;case 40:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 40:goto _eaegc ;case 46:goto _eggb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _eggb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 41:switch _aebg [_bfaf ]{case 46:goto _edbe ;case 92:goto _edbe ;case 95:goto _edbe ;};switch {case _aebg [_bfaf ]< 65:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _edbe ;};case _aebg [_bfaf ]> 90:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _edbe ;};default:goto _edbe ;};goto _aeacf ;case 42:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 43:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 40:goto _eaegc ;case 46:goto _eggb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _debfb ;case 125:goto _debfb ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _debfb ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};default:goto _debfb ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _debfb ;};default:goto _debfb ;};goto _gdgbb ;case 44:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _dgcae ;case 125:goto _dgcae ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _dgcae ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _dgcae ;};default:goto _dgcae ;};goto _gdgbb ;case 25:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 65:goto _dgag ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 66<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _bcab ;};default:goto _bcab ;};goto _gdgbb ;case 45:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 76:goto _cbfaf ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 46:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 83:goto _dgfb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 47:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 69:goto _eadbg ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 26:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 79:goto _efegfe ;case 82:goto _cbga ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _bcab ;};default:goto _bcab ;};goto _gdgbb ;case 48:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 68:goto _cbfb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 49:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 79:goto _dcbfd ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 50:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 36:goto _gada ;case 40:goto _eaegc ;case 46:goto _eggb ;case 58:goto _cecf ;case 85:goto _dgfb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 59:switch {case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _bgbc ;};case _aebg [_bfaf ]>=34:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _eggcg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 27:switch _aebg [_bfaf ]{case 46:goto _edbe ;case 92:goto _edbe ;case 95:goto _edbe ;};switch {case _aebg [_bfaf ]< 65:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _edbe ;};case _aebg [_bfaf ]> 90:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _edbe ;};default:goto _edbe ;};goto _bcab ;case 28:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 120:goto _acgcf ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _bcab ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _bcab ;};default:goto _bcab ;};goto _gdgbb ;case 51:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 108:goto _dbedd ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 52:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 102:goto _fbed ;case 110:goto _agdca ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 53:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 110:goto _egad ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 54:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _gadc ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 55:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _begge ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _begge ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 56:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 40:goto _cadba ;case 46:goto _begge ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _begge ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _begge ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 57:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 109:goto _acaded ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 58:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _ffafg ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _aeacf ;case 125:goto _aeacf ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _aeacf ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _aeacf ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _aeacf ;};default:goto _aeacf ;};goto _gdgbb ;case 59:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dfafg ;case 123:goto _dgcae ;case 125:goto _dgcae ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _dgcae ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _dgcae ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dfafg ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _dgcae ;};default:goto _dgcae ;};goto _gdgbb ;case 29:switch _aebg [_bfaf ]{case 33:goto _affeb ;case 46:goto _dcccb ;case 92:goto _edbe ;case 95:goto _dcccb ;case 123:goto _bcab ;case 125:goto _bcab ;};switch {case _aebg [_bfaf ]< 58:switch {case _aebg [_bfaf ]< 37:if 34<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=35{goto _bcab ;};case _aebg [_bfaf ]> 47:if 48<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=57{goto _dcccb ;};default:goto _bcab ;};case _aebg [_bfaf ]> 63:switch {case _aebg [_bfaf ]< 91:if 65<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=90{goto _dcccb ;};case _aebg [_bfaf ]> 94:if 97<=_aebg [_bfaf ]&&_aebg [_bfaf ]<=122{goto _dcccb ;};default:goto _bcab ;};default:goto _bcab ;};goto _gdgbb ;};_bcab :_cgadg =0;goto _gbeec ;_gdgbb :_cgadg =1;goto _gbeec ;_cfca :_cgadg =2;goto _gbeec ;_bbcef :_cgadg =3;goto _gbeec ;_ffed :_cgadg =4;goto _gbeec ;_fgcef :_cgadg =5;goto _gbeec ;_ccgb :_cgadg =6;goto _gbeec ;_cbefg :_cgadg =7;goto _gbeec ;_decb :_cgadg =8;goto _gbeec ;_aedeb :_cgadg =9;goto _gbeec ;_cgdbg :_cgadg =10;goto _gbeec ;_fdfcc :_cgadg =11;goto _gbeec ;_cafe :_cgadg =12;goto _gbeec ;_dgbbg :_cgadg =13;goto _gbeec ;_addce :_cgadg =14;goto _gbeec ;_bbegac :_cgadg =15;goto _gbeec ;_cddf :_cgadg =16;goto _gbeec ;_gada :_cgadg =17;goto _gbeec ;_cecf :_cgadg =18;goto _gbeec ;_edeg :_cgadg =19;goto _gbeec ;_aeace :_cgadg =20;goto _gbeec ;_egac :_cgadg =21;goto _gbeec ;_cefgf :_cgadg =22;goto _gbeec ;_cdcg :_cgadg =23;goto _gbeec ;_cddg :_cgadg =24;goto _gbeec ;_gdaf :_cgadg =25;goto _gbeec ;_fgcgb :_cgadg =26;goto _gbeec ;_abbe :_cgadg =27;goto _gbeec ;_cacae :_cgadg =28;goto _gbeec ;_dbfdg :_cgadg =29;goto _gbeec ;_dgcae :_cgadg =30;goto _aecb ;_affeb :_cgadg =30;goto _cgbaa ;_gcbf :_cgadg =30;goto _fgeff ;_dgdd :_cgadg =30;goto _deaa ;_eeabdf :_cgadg =30;goto _cggc ;_gcabe :_cgadg =30;goto _ggcag ;_eaegc :_cgadg =30;goto _gdgff ;_dcedf :_cgadg =30;goto _dceg ;_abfac :_cgadg =30;goto _bgcf ;_egcg :_cgadg =30;goto _fedd ;_dage :_cgadg =30;goto _gfcd ;_fdcd :_cgadg =30;goto _fgfaf ;_eabcb :_cgadg =30;goto _fbdc ;_bgbd :_cgadg =30;goto _caefc ;_fcdgf :_cgadg =30;goto _cbda ;_ecegd :_cgadg =30;goto _bafcg ;_ggdef :_cgadg =30;goto _deaec ;_ffeee :_cgadg =30;goto _cafed ;_fegb :_cgadg =30;goto _aafc ;_gdgg :_cgadg =30;goto _afgff ;_debda :_cgadg =30;goto _dgga ;_bbbaa :_cgadg =30;goto _dbffa ;_ddgg :_cgadg =30;goto _cdfgc ;_debfb :_cgadg =30;goto _aacf ;_gdbfc :_cgadg =30;goto _edgfb ;_cfdcb :_cgadg =30;goto _bgfgbe ;_fabbd :_cgadg =30;goto _gfdcd ;_gdfag :_cgadg =30;goto _aeab ;_ecgab :_cgadg =30;goto _ggbc ;_egece :_cgadg =30;goto _bgbde ;_aafa :_cgadg =30;goto _dbfg ;_aeacf :_cgadg =30;goto _fdgec ;_cadba :_cgadg =30;goto _eacf ;_adgagg :_cgadg =31;goto _edfdfg ;_gaagc :_cgadg =32;goto _gbeec ;_acfea :_cgadg =33;goto _ebece ;_ebegb :_cgadg =34;goto _gbeec ;_dggcf :_cgadg =35;goto _eccb ;_aefag :_cgadg =36;goto _eccb ;_ebfge :_cgadg =37;goto _eccb ;_gbea :_cgadg =38;goto _gbeec ;_fbcgg :_cgadg =39;goto _gbeec ;_eggb :_cgadg =40;goto _adae ;_edbe :_cgadg =41;goto _gbeec ;_dcccb :_cgadg =42;goto _adae ;_bgbc :_cgadg =43;goto _ebece ;_eggcg :_cgadg =44;goto _adae ;_eadbg :_cgadg =44;goto _accbd ;_dcbfd :_cgadg =44;goto _gefgc ;_dgag :_cgadg =45;goto _adae ;_cbfaf :_cgadg =46;goto _adae ;_dgfb :_cgadg =47;goto _adae ;_efegfe :_cgadg =48;goto _adae ;_cbfb :_cgadg =49;goto _adae ;_cbga :_cgadg =50;goto _adae ;_acgcf :_cgadg =51;goto _adae ;_dbedd :_cgadg =52;goto _adae ;_fbed :_cgadg =53;goto _adae ;_egad :_cgadg =54;goto _adae ;_gadc :_cgadg =55;goto _adae ;_begge :_cgadg =56;goto _adae ;_agdca :_cgadg =57;goto _adae ;_acaded :_cgadg =58;goto _adae ;_ffafg :_cgadg =59;goto _adae ;_dfafg :_cgadg =59;goto _fdcc ;_fgeff :_aegg =3;goto _aceb ;_deaa :_aegg =5;goto _aceb ;_cgbaa :_aegg =7;goto _aceb ;_cggc :_aegg =9;goto _aceb ;_gdgff :_aegg =11;goto _aceb ;_eacf :_aegg =13;goto _aceb ;_dceg :_aegg =15;goto _aceb ;_afgff :_aegg =17;goto _aceb ;_dgga :_aegg =19;goto _aceb ;_bgcf :_aegg =21;goto _aceb ;_fedd :_aegg =23;goto _aceb ;_fgfaf :_aegg =25;goto _aceb ;_caefc :_aegg =27;goto _aceb ;_gfcd :_aegg =29;goto _aceb ;_cbda :_aegg =31;goto _aceb ;_aafc :_aegg =33;goto _aceb ;_cafed :_aegg =35;goto _aceb ;_aeab :_aegg =37;goto _aceb ;_dbfg :_aegg =39;goto _aceb ;_ggbc :_aegg =41;goto _aceb ;_bafcg :_aegg =43;goto _aceb ;_deaec :_aegg =45;goto _aceb ;_fbdc :_aegg =47;goto _aceb ;_bgfgbe :_aegg =49;goto _aceb ;_aacf :_aegg =51;goto _aceb ;_cdfgc :_aegg =53;goto _aceb ;_edgfb :_aegg =55;goto _aceb ;_fdgec :_aegg =57;goto _aceb ;_dbffa :_aegg =59;goto _aceb ;_gfdcd :_aegg =61;goto _aceb ;_bgbde :_aegg =63;goto _aceb ;_ggcag :_aegg =65;goto _aceb ;_aecb :_aegg =67;goto _aceb ;_accbd :_aegg =72;goto _aceb ;_eccb :_aegg =75;goto _aceb ;_ebece :_aegg =78;goto _aceb ;_gefgc :_aegg =81;goto _aceb ;_fdcc :_aegg =84;goto _aceb ;_adae :_aegg =87;goto _aceb ;_edfdfg :_aegg =90;goto _aceb ;_aceb :_fageb =uint (_cdegg [_aegg ]);_aegg ++;for ;_fageb > 0;_fageb --{_aegg ++;switch _cdegg [_aegg -1]{case 3:_dbbgg =_bfaf +1;case 4:_gaeg =1;case 5:_gaeg =2;case 6:_gaeg =3;case 7:_gaeg =4;case 8:_gaeg =11;case 9:_gaeg =14;case 10:_gaeg =15;case 11:_dbbgg =_bfaf +1;{_cegbc .emit (_ffde ,_aebg [_gdgba :_dbbgg ]);};case 12:_dbbgg =_bfaf +1;{_cegbc .emit (_fdcf ,_aebg [_gdgba :_dbbgg ]);};case 13:_dbbgg =_bfaf +1;{_cegbc .emit (_ecef ,_aebg [_gdgba :_dbbgg -1]);};case 14:_dbbgg =_bfaf +1;{_cegbc .emit (_ecef ,_aebg [_gdgba +1:_dbbgg -2]);};case 15:_dbbgg =_bfaf +1;{_cegbc .emit (_bdcf ,_aebg [_gdgba :_dbbgg -1]);};case 16:_dbbgg =_bfaf +1;{_cegbc .emit (_bdcf ,_aebg [_gdgba :_dbbgg -1]);};case 17:_dbbgg =_bfaf +1;{_cegbc .emit (_deedd ,_aebg [_gdgba :_dbbgg ]);};case 18:_dbbgg =_bfaf +1;{_cegbc .emit (_bceg ,_aebg [_gdgba :_dbbgg ]);};case 19:_dbbgg =_bfaf +1;{_cegbc .emit (_cdafbc ,_aebg [_gdgba :_dbbgg ]);};case 20:_dbbgg =_bfaf +1;{_cegbc .emit (_cegcb ,_aebg [_gdgba :_dbbgg ]);};case 21:_dbbgg =_bfaf +1;{_cegbc .emit (_dbdd ,_aebg [_gdgba :_dbbgg ]);};case 22:_dbbgg =_bfaf +1;{_cegbc .emit (_egabg ,_aebg [_gdgba :_dbbgg ]);};case 23:_dbbgg =_bfaf +1;{_cegbc .emit (_bbac ,_aebg [_gdgba :_dbbgg ]);};case 24:_dbbgg =_bfaf +1;{_cegbc .emit (_edgd ,_aebg [_gdgba :_dbbgg ]);};case 25:_dbbgg =_bfaf +1;{_cegbc .emit (_adfba ,_aebg [_gdgba :_dbbgg ]);};case 26:_dbbgg =_bfaf +1;{_cegbc .emit (_gagga ,_aebg [_gdgba :_dbbgg ]);};case 27:_dbbgg =_bfaf +1;{_cegbc .emit (_degca ,_aebg [_gdgba :_dbbgg ]);};case 28:_dbbgg =_bfaf +1;{_cegbc .emit (_fdaeg ,_aebg [_gdgba :_dbbgg ]);};case 29:_dbbgg =_bfaf +1;{_cegbc .emit (_ddbdg ,_aebg [_gdgba :_dbbgg ]);};case 30:_dbbgg =_bfaf +1;{_cegbc .emit (_ecdcb ,_aebg [_gdgba :_dbbgg ]);};case 31:_dbbgg =_bfaf +1;{_cegbc .emit (_abad ,_aebg [_gdgba :_dbbgg ]);};case 32:_dbbgg =_bfaf +1;{_cegbc .emit (_gaeb ,_aebg [_gdgba :_dbbgg ]);};case 33:_dbbgg =_bfaf +1;{_cegbc .emit (_fagfdf ,_aebg [_gdgba :_dbbgg ]);};case 34:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_fdgag ,_aebg [_gdgba :_dbbgg ]);};case 35:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_acbdd ,_aebg [_gdgba :_dbbgg ]);};case 36:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_fgbgg ,_aebg [_gdgba :_dbbgg ]);};case 37:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_ceccf ,_aebg [_gdgba :_dbbgg ]);};case 38:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_dagfe ,_aebg [_gdgba :_dbbgg ]);};case 39:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_bbfa ,_aebg [_gdgba +1:_dbbgg -1]);};case 40:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_ccgd ,_aebg [_gdgba :_dbbgg ]);};case 41:_dbbgg =_bfaf ;_bfaf --;{_cegbc .emit (_gcceg ,_aebg [_gdgba :_dbbgg ]);};case 42:_bfaf =(_dbbgg )-1;{_cegbc .emit (_fdgag ,_aebg [_gdgba :_dbbgg ]);};case 43:switch _gaeg {case 0:{_cgadg =0;goto _gbeec ;};case 1:{_bfaf =(_dbbgg )-1;_cegbc .emit (_abba ,_aebg [_gdgba :_dbbgg ]);};case 2:{_bfaf =(_dbbgg )-1;_cegbc .emit (_fdgag ,_aebg [_gdgba :_dbbgg ]);};case 3:{_bfaf =(_dbbgg )-1;_cegbc .emit (_acbdd ,_aebg [_gdgba :_dbbgg ]);};case 4:{_bfaf =(_dbbgg )-1;_cegbc .emit (_aaeb ,_aebg [_gdgba :_dbbgg ]);};case 11:{_bfaf =(_dbbgg )-1;_cegbc .emit (_eefd ,_aebg [_gdgba :_dbbgg ]);};case 14:{_bfaf =(_dbbgg )-1;_cegbc .emit (_dagfe ,_aebg [_gdgba :_dbbgg ]);};case 15:{_bfaf =(_dbbgg )-1;_cegbc .emit (_bbfa ,_aebg [_gdgba +1:_dbbgg -1]);};};};};goto _gbeec ;_gbeec :_aegg =int (_egbag [_cgadg ]);_fageb =uint (_cdegg [_aegg ]);_aegg ++;for ;_fageb > 0;_fageb --{_aegg ++;switch _cdegg [_aegg -1]{case 0:_gdgba =0;case 1:_gaeg =0;};};if _cgadg ==0{goto _aaba ;};if _bfaf ++;_bfaf !=_bfea {goto _gcbc ;};_decc :{};if _bfaf ==_deebb {switch _cgadg {case 1:goto _dgcae ;case 2:goto _dgcae ;case 31:goto _bbbaa ;case 14:goto _dgcae ;case 15:goto _dgcae ;case 32:goto _ddgg ;case 17:goto _dgcae ;case 33:goto _debfb ;case 18:goto _dgcae ;case 19:goto _dgcae ;case 34:goto _gdbfc ;case 35:goto _cfdcb ;case 36:goto _cfdcb ;case 23:goto _gcabe ;case 37:goto _cfdcb ;case 38:goto _fabbd ;case 39:goto _egece ;case 40:goto _aeacf ;case 41:goto _aeacf ;case 42:goto _aeacf ;case 43:goto _debfb ;case 44:goto _dgcae ;case 45:goto _aeacf ;case 46:goto _aeacf ;case 47:goto _aeacf ;case 48:goto _aeacf ;case 49:goto _aeacf ;case 50:goto _aeacf ;case 51:goto _aeacf ;case 52:goto _aeacf ;case 53:goto _aeacf ;case 54:goto _aeacf ;case 55:goto _aeacf ;case 56:goto _aeacf ;case 57:goto _aeacf ;case 58:goto _aeacf ;case 59:goto _dgcae ;};};_aaba :{};};if _gdgba > 0{copy (_aebg [0:],_aebg [_gdgba :]);};};_ =_deebb ;if _cgadg ==_caecdf {_cegbc .emit (_bdcb ,nil );};close (_cegbc ._abcd );};const _cefcd int =30;

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bagf ,_cfcf ,_fada :=_gage (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fada .Type ==ResultTypeError {return _fada ;};_ebcg ,_fada :=_egbf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fada .Type ==ResultTypeError {return _fada ;};if _ebcg >=_bagf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dggef :=args [3].ValueNumber ;if _dggef < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeddd :=args [4].ValueNumber ;if _eeddd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_afdbd :=args [5].ValueNumber ;if _afdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbbb :=float64 (int (args [6].ValueNumber ));if !_dcd (_dbbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dfcb :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfcb =int (args [7].ValueNumber );if !_eeaa (_dfcb ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_gfge ,_fada :=_debf (_ebcg ,_cfcf ,_dfcb );if _fada .Type ==ResultTypeError {return _fada ;};_gfge *=_dbbb ;_baba ,_fada :=_debf (_bagf ,_cfcf ,_dfcb );if _fada .Type ==ResultTypeError {return _fada ;};_baba *=_dbbb ;_bcbb ,_fada :=_debf (_ebcg ,_bagf ,_dfcb );if _fada .Type ==ResultTypeError {return _fada ;};_bcbb *=_dbbb ;_adda :=_afdbd +_gfge *100*_dggef /_dbbb ;_adda /=_eeddd +_bcbb *100*_dggef /_dbbb ;_adda --;_adda *=_dbbb /_baba ;return MakeNumberResult (_adda );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_gebb :=len (args );if _gebb ==0||_gebb > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_bdec :=_fcef (args [0]);_bbge :=[]float64 {};for _ ,_cbbd :=range _bdec {for _ ,_gbaa :=range _cbbd {if _gbaa .Type ==ResultTypeNumber &&!_gbaa .IsBoolean {_bbge =append (_bbge ,_gbaa .ValueNumber );};};};_cfdf :=len (_bbge );if len (_bbge )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_ggdbd :=0.1;if _gebb ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggdbd =args [1].ValueNumber ;if _ggdbd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_fcea :=[]float64 {};for _bacc :=0;_bacc < _cfdf ;_bacc ++{if _bacc ==0{_fcea =append (_fcea ,0);}else {_fcea =append (_fcea ,_fcea [_bacc -1]+365);};};return _egdgc (_bbge ,_fcea ,_ggdbd );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func (_becf *ivr )SetOffset (col ,row uint32 ){};func _fbf (_bab ,_gbf ,_cdb int )bool {if _gbf < 1||_gbf > 12{return false ;};if _cdb < 1{return false ;};return _cdb <=_cceg (_bab ,_gbf );};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _efg ,_dea float64 ;switch args [0].Type {case ResultTypeNumber :_dea =args [0].ValueNumber ;case ResultTypeString :_ace :=DateValue ([]Result {args [0]});if _ace .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dea =_ace .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_efg =args [1].ValueNumber ;if _efg < 62&&_dea >=62{_efg --;};case ResultTypeString :_gege :=DateValue ([]Result {args [1]});if _gege .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_efg =_gege .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bba :=float64 (int (_dea -_efg ));return MakeNumberResult (_bba );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_aadg :=len (args );if _aadg < 3||_aadg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbeb :=args [1].ValueNumber ;if _gbeb !=float64 (int (_gbeb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgeb :=args [2].ValueNumber ;_aega :=0.0;if _aadg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aega =args [3].ValueNumber ;};_dffe :=0;if _aadg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dffe =int (args [4].ValueNumber );if _dffe !=0{_dffe =1;};};return MakeNumberResult (_gcdd (_ggdc ,_gbeb ,_ccgeb ,_aega ,_dffe ));};

// Update updates references in the VerticalRange after removing a row/column.
func (_adba VerticalRange )Update (q *_da .UpdateQuery )Expression {if q .UpdateType ==_da .UpdateActionRemoveColumn {_effg :=_adba ;if q .UpdateCurrentSheet {_bcga :=q .ColumnIdx ;_effg ._bbadb =_cdgc (_adba ._bbadb ,_bcga );_effg ._fdaegd =_cdgc (_adba ._fdaegd ,_bcga );};return _effg ;};return _adba ;};func (_adb *evCache )SetCache (key string ,value Result ){_adb ._cee .Lock ();_adb ._edg [key ]=value ;_adb ._cee .Unlock ();};var _fdbcc =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};type plex struct{_dfdfg chan *node ;_bcgb Expression ;_beeg string ;};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_daac :=len (args );if _daac !=4&&_daac !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_faeac ,_ebed :=_egbf (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ebed .Type ==ResultTypeError {return _ebed ;};_cebe ,_ebed :=_egbf (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ebed .Type ==ResultTypeError {return _ebed ;};if _faeac >=_cebe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dfg :=args [2].ValueNumber ;if _dfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bede :=args [3].ValueNumber ;if _bede <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cefa :=0;if _daac ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cefa =int (args [4].ValueNumber );if !_eeaa (_cefa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_gdbc ,_ebed :=_debf (_faeac ,_cebe ,_cefa );if _ebed .Type ==ResultTypeError {return _ebed ;};return MakeNumberResult (_bede *_dfg *_gdbc );};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_gfd .Pi );};

// Update updates the FunctionCall references after removing a row/column.
func (_bgcc FunctionCall )Update (q *_da .UpdateQuery )Expression {_dacfc :=[]Expression {};for _ ,_ebdbb :=range _bgcc ._edafd {_gefcc :=_ebdbb .Update (q );_dacfc =append (_dacfc ,_gefcc );};return FunctionCall {_gaec :_bgcc ._gaec ,_edafd :_dacfc };};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_efef NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cdbafb :=ctx .NamedRange (_efef ._bdfb );_eeafe :=_cdbafb .Value ;if _bgce ,_dbedf :=ev .GetFromCache (_eeafe );_dbedf {return _bgce ;};_ffeae :=_dcf .Split (_eeafe ,"\u0021");if len (_ffeae )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_eeafe ));};_gabfd :=ctx .Sheet (_ffeae [0]);_gdbed :=_dcf .Split (_ffeae [1],"\u003a");switch len (_gdbed ){case 1:_gdbff :=ev .Eval (_gabfd ,_gdbed [0]);ev .SetCache (_eeafe ,_gdbff );return _gdbff ;case 2:_ebaf :=_badgc (_gabfd ,ev ,_gdbed [0],_gdbed [1]);ev .SetCache (_eeafe ,_ebaf );return _ebaf ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cdbafb .Type ));};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efca ,_feceb ,_bcbbb :=_gage (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bcbbb .Type ==ResultTypeError {return _bcbbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdefc :=_feceb -_efca ;if _gdefc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dfadb :=args [2].ValueNumber ;if _dfadb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_dfadb *_gdefc /360));};

// Reference returns an invalid reference for String.
func (_caead String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gfeag (_dgad ,_cffea float64 )float64 {_dgad =_gfd .Trunc (_dgad );_cffea =_gfd .Trunc (_cffea );if _dgad ==0{return _cffea ;};if _cffea ==0{return _dgad ;};for _dgad !=_cffea {if _dgad > _cffea {_dgad =_dgad -_cffea ;}else {_cffea =_cffea -_dgad ;};};return _dgad ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efcf ,_cca ,_dbbda :=_gage (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dbbda .Type ==ResultTypeError {return _dbbda ;};_affdg ,_dbbda :=_egbf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dbbda .Type ==ResultTypeError {return _dbbda ;};if _affdg >=_efcf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_bgbb :=args [3];if _bgbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_caef :=_bgbb .ValueNumber ;if _caef < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eef :=args [4];if _eef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cabe :=_eef .ValueNumber ;if _cabe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fabg :=args [5];if _fabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bfcb :=_fabg .ValueNumber ;if _bfcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_egda :=args [6];if _egda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbbef :=float64 (int (_egda .ValueNumber ));if !_dcd (_dbbef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_adca :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_bgea :=args [7];if _bgea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_adca =int (_bgea .ValueNumber );if !_eeaa (_adca ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_geeca ,_dbbda :=_debf (_affdg ,_cca ,_adca );if _dbbda .Type ==ResultTypeError {return _dbbda ;};_geeca *=_dbbef ;_dcea ,_dbbda :=_debf (_efcf ,_cca ,_adca );if _dbbda .Type ==ResultTypeError {return _dbbda ;};_dcea *=_dbbef ;_gcded ,_dbbda :=_debf (_affdg ,_efcf ,_adca );if _dbbda .Type ==ResultTypeError {return _dbbda ;};_gcded *=_dbbef ;_gaggf :=_bfcb +_geeca *100*_caef /_dbbef ;_gaggf /=_dcea *_cabe /_dbbef +1;_gaggf -=_gcded *100*_caef /_dbbef ;return MakeNumberResult (_gaggf );};

// String returns a string representation of a range with prefix.
func (_aeaf PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aeaf ._cegg .String (),_aeaf ._ggae .String (),_aeaf ._bbafd .String ());};type node struct{_cdga tokenType ;_ecfg string ;};func _gccf (_egab Result ,_geaca *criteriaParsed )bool {if _egab .IsBoolean {return false ;};_egeg :=_egab .Type ;if _geaca ._bffc {return _egeg ==ResultTypeNumber &&_egab .ValueNumber ==_geaca ._cdfbg ;}else if _egeg ==ResultTypeNumber {return _ebde (_egab .ValueNumber ,_geaca ._bdae );};return _dbbfe (_egab ,_geaca );};type evCache struct{_edg map[string ]Result ;_cee *_b .Mutex ;};type amorArgs struct{_eega float64 ;_gdfd float64 ;_ffeaa float64 ;_agef float64 ;_edfgc int ;_bbg float64 ;_ffb int ;};func _aeea (_dbbd []Result ,_fage string )(*cumulArgs ,Result ){if len (_dbbd )!=6{return nil ,MakeErrorResult (_fage +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dbbd [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fage +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcfg :=_dbbd [0].ValueNumber ;if _dcfg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dbbd [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fage +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbee :=_dbbd [1].ValueNumber ;if _cbee <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dbbd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fage +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdg :=_dbbd [2].ValueNumber ;if _dfdg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dbbd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fage +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cff :=_dbbd [3].ValueNumber ;if _cff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dbbd [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fage +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgf :=_dbbd [4].ValueNumber ;if _ecgf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _ecgf < _cff {return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _ecgf > _cbee {return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_baff :=int (_dbbd [5].ValueNumber );if _baff !=0&&_baff !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fage +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_dcfg ,_cbee ,_dfdg ,_cff ,_ecgf ,_baff },_gea ;};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gef :=args [1].ValueNumber ;_fagf :=args [0];var _cfa float64 ;switch _fagf .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_cfa =_fagf .ValueNumber ;case ResultTypeString :_cgf :=DateValue ([]Result {args [0]});if _cgf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cfa =_cgf .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gag :=_aee (_cfa );_eeba :=_gag .AddDate (0,int (_gef ),0);_ebe ,_fagfd ,_bde :=_eeba .Date ();_adfd :=_adfc (_ebe ,int (_fagfd ),_bde );if _adfd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_adfd );};

// Bool is a boolean expression.
type Bool struct{_ebc bool };

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eedc :=args [0].AsNumber ();if _eedc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eface :=args [1].AsNumber ();if _eface .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eggde :=int (_eface .ValueNumber );if _eggde < 0||_eggde > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_ddfg :=0;if len (args )> 2{_cbbcd :=args [2].AsNumber ();if _cbbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfg =int (_cbbcd .ValueNumber );};_ceac :=_ab .FormatInt (int64 (_eedc .ValueNumber ),_eggde );if len (_ceac )< _ddfg {_ceac =_dcf .Repeat ("\u0030",_ddfg -len (_ceac ))+_ceac ;};return MakeStringResult (_ceac );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_ddb ,_cebb :=_gdfc (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cebb .Type ==ResultTypeError {return _cebb ;};return MakeNumberResult (_gdff (_ddb ._def ,_ddb ._ecacc ,_ddb ._cfgb ,_ddb ._fdec ));};func _fbceg (_eaafc [][]Result )float64 {if len (_eaafc )==2{_dgcb :=_eaafc [0][0].AsNumber ();_fbeag :=_eaafc [0][1].AsNumber ();_cbfda :=_eaafc [1][0].AsNumber ();_ecdc :=_eaafc [1][1].AsNumber ();if _dgcb .Type !=ResultTypeNumber ||_fbeag .Type !=ResultTypeNumber ||_cbfda .Type !=ResultTypeNumber ||_ecdc .Type !=ResultTypeNumber {return _gfd .NaN ();};return _dgcb .ValueNumber *_ecdc .ValueNumber -_cbfda .ValueNumber *_fbeag .ValueNumber ;};_acbb :=float64 (0);_bcgc :=float64 (1);for _bedea :=range _eaafc {_acbb +=_bcgc *_eaafc [0][_bedea ].ValueNumber *_fbceg (_dada (_eaafc ,_bedea ));_bcgc *=-1;};return _acbb ;};const _ceccf =57347;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_gcga PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_gecd :=_gcga ._cegg .Reference (ctx ,ev );_dbebg :=_gcga ._ggae .Reference (ctx ,ev );_edda :=_gcga ._bbafd .Reference (ctx ,ev );switch _gecd .Type {case ReferenceTypeSheet :if _dcgc (_gecd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gecd .Value ));};_abaeb :=_caeab (_gecd ,_dbebg ,_edda );if _dbebg .Type ==ReferenceTypeCell &&_edda .Type ==ReferenceTypeCell {if _eadcf ,_fcfa :=ev .GetFromCache (_abaeb );_fcfa {return _eadcf ;}else {_gecae :=_badgc (ctx .Sheet (_gecd .Value ),ev ,_dbebg .Value ,_edda .Value );ev .SetCache (_abaeb ,_gecae );return _gecae ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_abaeb );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gecd .Type ));};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};const _agfcb int =30;