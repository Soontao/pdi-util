//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ga "bytes";_a "fmt";_da "github.com/unidoc/unioffice";_f "io";_c "math";_af "strconv";_e "strings";_d "time";);

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;const _bdebe int =34;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _c .Abs (v )>=_b ||_c .Abs (v )<=_ef &&v !=0{return _fbd (v );};_ac :=make ([]byte ,0,15);_ac =_af .AppendFloat (_ac ,v ,'f',-1,64);if len (_ac )> 11{_ecd :=_ac [11]-'0';if _ecd >=5&&_ecd <=9{_ac [10]++;_ac =_ac [0:11];_ac =_cac (_ac );};_ac =_ac [0:11];}else if len (_ac )==11{if _ac [len (_ac )-1]=='9'{_ac [len (_ac )-1]++;_ac =_cac (_ac );};};_ac =_cgf (_ac );return string (_ac );};var _ca =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};func (_ce FmtType )String ()string {if _ce >=FmtType (len (_ca )-1){return _a .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ce );};return _gag [_ca [_ce ]:_ca [_ce +1]];};func (_cbg *Lexer )nextFmt (){_cbg ._aca =append (_cbg ._aca ,_cbg ._aac );_cbg ._aac =Format {}};const _gag ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_gc bool ;_fg bool ;_ab bool ;_cc bool ;_gagf bool ;_bg bool ;_gg int64 ;_ag int ;};func _fab (_fda float64 ,_ff Format ,_faba bool )string {if _ff ._ab {return NumberGeneric (_fda );};_dd :=make ([]byte ,0,20);_ge :=_c .Signbit (_fda );_fc :=_c .Abs (_fda );_abe :=int64 (0);_abc :=int64 (0);if _ff .IsExponential {for _fc >=10{_abc ++;_fc /=10;};for _fc < 1{_abc --;_fc *=10;};}else if _ff ._fg {_fc *=100;}else if _ff ._gc {if _ff ._gg ==0{_fdae :=_c .Pow (10,float64 (_ff ._ag ));_caf ,_ed :=1.0,1.0;_ =_caf ;for _gaf :=1.0;_gaf < _fdae ;_gaf ++{_ ,_egf :=_c .Modf (_fc *float64 (_gaf ));if _egf < _ed {_ed =_egf ;_caf =_gaf ;if _egf ==0{break ;};};};_ff ._gg =int64 (_caf );};_abe =int64 (_fc *float64 (_ff ._gg )+0.5);if len (_ff .Whole )> 0&&_abe > _ff ._gg {_abe =int64 (_fc *float64 (_ff ._gg ))%_ff ._gg ;_fc -=float64 (_abe )/float64 (_ff ._gg );}else {_fc -=float64 (_abe )/float64 (_ff ._gg );if _c .Abs (_fc )< 1{_gab :=true ;for _ ,_fbb :=range _ff .Whole {if _fbb .Type ==FmtTypeDigitOpt {continue ;};if _fbb .Type ==FmtTypeLiteral &&_fbb .Literal ==' '{continue ;};_gab =false ;};if _gab {_ff .Whole =nil ;};};};};_aba :=1;for _ ,_gdg :=range _ff .Fractional {if _gdg .Type ==FmtTypeDigit ||_gdg .Type ==FmtTypeDigitOpt {_aba ++;};};_fc +=5*_c .Pow10 (-_aba );_abd ,_bed :=_c .Modf (_fc );_dd =append (_dd ,_bee (_abd ,_fda ,_ff )...);_dd =append (_dd ,_aae (_bed ,_fda ,_ff )...);_dd =append (_dd ,_gge (_abc ,_ff )...);if _ff ._gc {_dd =_af .AppendInt (_dd ,_abe ,10);_dd =append (_dd ,'/');_dd =_af .AppendInt (_dd ,_ff ._gg ,10);};if !_faba &&_ge {return "\u002d"+string (_dd );};return string (_dd );};func _beb (_cdb _d .Time ,_dcg float64 ,_fef string )[]byte {_ad :=[]byte {};_cf :=0;for _gga :=0;_gga < len (_fef );_gga ++{var _efdf string ;if _fef [_gga ]==':'{_efdf =string (_fef [_cf :_gga ]);_cf =_gga +1;}else if _gga ==len (_fef )-1{_efdf =string (_fef [_cf :_gga +1]);}else {continue ;};switch _efdf {case "\u0064":_ad =_cdb .AppendFormat (_ad ,"\u0032");case "\u0068":_ad =_cdb .AppendFormat (_ad ,"\u0033");case "\u0068\u0068":_ad =_cdb .AppendFormat (_ad ,"\u0031\u0035");case "\u006d":_ad =_cdb .AppendFormat (_ad ,"\u0034");case "\u006d\u006d":_ad =_cdb .AppendFormat (_ad ,"\u0030\u0034");case "\u0073":_ad =_cdb .Round (_d .Second ).AppendFormat (_ad ,"\u0035");case "\u0073\u002e\u0030":_ad =_cdb .Round (_d .Second /10).AppendFormat (_ad ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_ad =_cdb .Round (_d .Second /100).AppendFormat (_ad ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_ad =_cdb .Round (_d .Second /1000).AppendFormat (_ad ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_ad =_cdb .Round (_d .Second ).AppendFormat (_ad ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_ad =_cdb .Round (_d .Second /10).AppendFormat (_ad ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_ad =_cdb .Round (_d .Second /100).AppendFormat (_ad ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_ad =_cdb .Round (_d .Second /1000).AppendFormat (_ad ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_ad =_cdb .AppendFormat (_ad ,"\u0050\u004d");case "\u005b\u0068\u005d":_ad =_af .AppendInt (_ad ,int64 (_dcg *24),10);case "\u005b\u006d\u005d":_ad =_af .AppendInt (_ad ,int64 (_dcg *24*60),10);case "\u005b\u0073\u005d":_ad =_af .AppendInt (_ad ,int64 (_dcg *24*60*60),10);case "":default:_da .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_efdf );};if _fef [_gga ]==':'{_ad =append (_ad ,':');};};return _ad ;};const _eec int =0;func _abf (_edb int64 )int64 {if _edb < 0{return -_edb ;};return _edb ;};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_db :=Parse (f );var _dbg Format ;if len (_db )==1{_dbg =_db [0];}else if len (_db )==4{_dbg =_db [3];};_bd :=false ;for _ ,_gae :=range _dbg .Whole {if _gae .Type ==FmtTypeText {_bd =true ;};};if !_bd {return v ;};_ccf :=_ga .Buffer {};for _ ,_fb :=range _dbg .Whole {switch _fb .Type {case FmtTypeLiteral :_ccf .WriteByte (_fb .Literal );case FmtTypeText :_ccf .WriteString (v );};};return _ccf .String ();};func _aae (_gfb ,_fca float64 ,_gfc Format )[]byte {if len (_gfc .Fractional )==0{return nil ;};_de :=_af .AppendFloat (nil ,_gfb ,'f',-1,64);if len (_de )> 2{_de =_de [2:];}else {_de =nil ;};_dc :=make ([]byte ,0,len (_de ));_dc =append (_dc ,'.');_dg :=0;_bbf :for _aeg :=0;_aeg < len (_gfc .Fractional );_aeg ++{_fdf :=_aeg ;_edg :=_gfc .Fractional [_aeg ];switch _edg .Type {case FmtTypeDigit :if _fdf < len (_de ){_dc =append (_dc ,_de [_fdf ]);_dg ++;}else {_dc =append (_dc ,'0');};case FmtTypeDigitOpt :if _fdf >=0{_dc =append (_dc ,_de [_fdf ]);_dg ++;}else {break _bbf ;};case FmtTypeLiteral :_dc =append (_dc ,_edg .Literal );default:_da .Log ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_edg );};};return _dc ;};func IsNumber (data string )(_fcf bool ){_bbb ,_abeb ,_fgec :=0,0,len (data );_fag :=len (data );_gec ,_ggag ,_ffe :=0,0,0;_ =_ggag ;_ =_ffe ;_ =_gec ;{_bbb =_bggb ;_gec =0;_ggag =0;_ffe =0;};{if _abeb ==_fgec {goto _fdbd ;};switch _bbb {case 0:goto _bca ;case 1:goto _ggf ;case 2:goto _agb ;case 3:goto _efg ;case 4:goto _adb ;case 5:goto _cce ;case 6:goto _fgag ;case 7:goto _faf ;};goto _caa ;_bce :_ggag =_abeb ;_abeb --;{_fcf =false ;};goto _fdb ;_bbfa :_ggag =_abeb ;_abeb --;{_fcf =_ggag ==len (data );};goto _fdb ;_aag :_ggag =_abeb ;_abeb --;{_fcf =_ggag ==len (data );};goto _fdb ;_gce :switch _ffe {case 2:{_abeb =(_ggag )-1;_fcf =_ggag ==len (data );};case 3:{_abeb =(_ggag )-1;_fcf =false ;};};goto _fdb ;_fdb :_gec =0;if _abeb ++;_abeb ==_fgec {goto _cda ;};_bca :_gec =_abeb ;switch data [_abeb ]{case 43:goto _eac ;case 45:goto _eac ;};if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _eaca ;};goto _adf ;_adf :if _abeb ++;_abeb ==_fgec {goto _aab ;};_ggf :goto _adf ;_eac :if _abeb ++;_abeb ==_fgec {goto _bcac ;};_agb :if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _eaca ;};goto _adf ;_eaca :if _abeb ++;_abeb ==_fgec {goto _gcdd ;};_efg :if data [_abeb ]==46{goto _dag ;};if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _eaca ;};goto _adf ;_dag :if _abeb ++;_abeb ==_fgec {goto _ebb ;};_adb :if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _gb ;};goto _adf ;_gb :if _abeb ++;_abeb ==_fgec {goto _cca ;};_cce :if data [_abeb ]==69{goto _aggf ;};if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _gb ;};goto _adf ;_aggf :if _abeb ++;_abeb ==_fgec {goto _daag ;};_fgag :switch data [_abeb ]{case 43:goto _ebf ;case 45:goto _ebf ;};goto _adf ;_ebf :_ggag =_abeb +1;_ffe =3;goto _feaf ;_ffcd :_ggag =_abeb +1;_ffe =2;goto _feaf ;_feaf :if _abeb ++;_abeb ==_fgec {goto _gdbg ;};_faf :if 48<=data [_abeb ]&&data [_abeb ]<=57{goto _ffcd ;};goto _adf ;_caa :_cda :_bbb =0;goto _fdbd ;_aab :_bbb =1;goto _fdbd ;_bcac :_bbb =2;goto _fdbd ;_gcdd :_bbb =3;goto _fdbd ;_ebb :_bbb =4;goto _fdbd ;_cca :_bbb =5;goto _fdbd ;_daag :_bbb =6;goto _fdbd ;_gdbg :_bbb =7;goto _fdbd ;_fdbd :{};if _abeb ==_fag {switch _bbb {case 1:goto _bce ;case 2:goto _bce ;case 3:goto _bbfa ;case 4:goto _bce ;case 5:goto _aag ;case 6:goto _bce ;case 7:goto _gce ;};};};if _bbb ==_edd {return false ;};return ;};const _bea int =34;type Lexer struct{_aac Format ;_aca []Format ;};const _bggb int =0;func _cdcab (_fede _d .Time )_d .Time {_fede =_fede .UTC ();return _d .Date (_fede .Year (),_fede .Month (),_fede .Day (),_fede .Hour (),_fede .Minute (),_fede .Second (),_fede .Nanosecond (),_d .Local );};const _ef =1e-10;func _gge (_ea int64 ,_dbga Format )[]byte {if !_dbga .IsExponential ||len (_dbga .Exponent )==0{return nil ;};_fgg :=_af .AppendInt (nil ,_abf (_ea ),10);_cgc :=make ([]byte ,0,len (_fgg )+2);_cgc =append (_cgc ,'E');if _ea >=0{_cgc =append (_cgc ,'+');}else {_cgc =append (_cgc ,'-');_ea *=-1;};_dbc :=0;_gfbb :for _ead :=len (_dbga .Exponent )-1;_ead >=0;_ead --{_fcd :=len (_fgg )-1-_dbc ;_efc :=_dbga .Exponent [_ead ];switch _efc .Type {case FmtTypeDigit :if _fcd >=0{_cgc =append (_cgc ,_fgg [_fcd ]);_dbc ++;}else {_cgc =append (_cgc ,'0');};case FmtTypeDigitOpt :if _fcd >=0{_cgc =append (_cgc ,_fgg [_fcd ]);_dbc ++;}else {for _gef :=_ead ;_gef >=0;_gef --{_deb :=_dbga .Exponent [_gef ];if _deb .Type ==FmtTypeLiteral {_cgc =append (_cgc ,_deb .Literal );};};break _gfbb ;};case FmtTypeLiteral :_cgc =append (_cgc ,_efc .Literal );default:_da .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_efc );};};if _dbc < len (_fgg ){_cgc =append (_cgc ,_fgg [len (_fgg )-_dbc -1:_dbc -1]...);};_egd (_cgc [2:]);return _cgc ;};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_ec ,_ :=_af .ParseFloat (v ,64);return Number (_ec ,f );};return String (v ,f );};const _edd int =-1;func _bee (_cd ,_cdc float64 ,_fbf Format )[]byte {if len (_fbf .Whole )==0{return nil ;};_fga :=_d .Date (1899,12,30,0,0,0,0,_d .UTC );_cea :=_fga .Add (_d .Duration (_cdc *float64 (24*_d .Hour )));_cea =_cdcab (_cea );_bde :=_af .AppendFloat (nil ,_cd ,'f',-1,64);_gcd :=make ([]byte ,0,len (_bde ));_aa :=0;_ccg :=1;_bda :for _gde :=len (_fbf .Whole )-1;_gde >=0;_gde --{_gdb :=len (_bde )-1-_aa ;_cg :=_fbf .Whole [_gde ];switch _cg .Type {case FmtTypeDigit :if _gdb >=0{_gcd =append (_gcd ,_bde [_gdb ]);_aa ++;_ccg =_gde ;}else {_gcd =append (_gcd ,'0');};case FmtTypeDigitOpt :if _gdb >=0{_gcd =append (_gcd ,_bde [_gdb ]);_aa ++;_ccg =_gde ;}else {for _ee :=_gde ;_ee >=0;_ee --{_eea :=_fbf .Whole [_ee ];if _eea .Type ==FmtTypeLiteral {_gcd =append (_gcd ,_eea .Literal );};};break _bda ;};case FmtTypeDollar :for _fee :=_aa ;_fee < len (_bde );_fee ++{_gcd =append (_gcd ,_bde [len (_bde )-1-_fee ]);_aa ++;};_gcd =append (_gcd ,'$');case FmtTypeComma :if !_fbf ._cc {_gcd =append (_gcd ,',');};case FmtTypeLiteral :_gcd =append (_gcd ,_cg .Literal );case FmtTypeDate :_gcd =append (_gcd ,_egd (_fea (_cea ,_cg .DateTime ))...);case FmtTypeTime :_gcd =append (_gcd ,_egd (_beb (_cea ,_cdc ,_cg .DateTime ))...);default:_da .Log ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_cg );};};_aff :=_egd (_gcd );if _aa < len (_bde )&&(_aa !=0||_fbf ._bg ){_ecg :=len (_bde )-_aa ;_ba :=make ([]byte ,len (_aff )+_ecg );copy (_ba ,_aff [0:_ccg ]);copy (_ba [_ccg :],_bde [0:]);copy (_ba [_ccg +_ecg :],_aff [_ccg :]);_aff =_ba ;};if _fbf ._cc {_gf :=_ga .Buffer {};_fbg :=0;for _daa :=len (_aff )-1;_daa >=0;_daa --{if !(_aff [_daa ]>='0'&&_aff [_daa ]<='9'){_fbg ++;}else {break ;};};for _ffc :=0;_ffc < len (_aff );_ffc ++{_bgea :=(len (_aff )-_ffc -_fbg );if _bgea %3==0&&_bgea !=0&&_ffc !=0{_gf .WriteByte (',');};_gf .WriteByte (_aff [_ffc ]);};_aff =_gf .Bytes ();};return _aff ;};func Parse (s string )[]Format {_gfe :=Lexer {};_gfe .Lex (_e .NewReader (s ));_gfe ._aca =append (_gfe ._aca ,_gfe ._aac );return _gfe ._aca ;};const _aaga int =34;func _fbd (_gcg float64 )string {_efe :=_af .FormatFloat (_gcg ,'E',-1,64);_fggb :=_af .FormatFloat (_gcg ,'E',5,64);if len (_efe )< len (_fggb ){return _af .FormatFloat (_gcg ,'E',2,64);};return _fggb ;};func _cac (_dcb []byte )[]byte {for _fgd :=len (_dcb )-1;_fgd > 0;_fgd --{if _dcb [_fgd ]=='9'+1{_dcb [_fgd ]='0';if _dcb [_fgd -1]=='.'{_fgd --;};_dcb [_fgd -1]++;};};if _dcb [0]=='9'+1{_dcb [0]='0';copy (_dcb [1:],_dcb [0:]);_dcb [0]='1';};return _dcb ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_agg :=Parse (f );if len (_agg )==1{return _fab (v ,_agg [0],false );}else if len (_agg )> 1&&v < 0{return _fab (v ,_agg [1],true );}else if len (_agg )> 2&&v ==0{return _fab (v ,_agg [2],false );};return _fab (v ,_agg [0],false );};func _cgf (_afg []byte )[]byte {_fbc :=len (_afg );_gdf :=false ;_dge :=false ;for _fbdc :=len (_afg )-1;_fbdc >=0;_fbdc --{if _afg [_fbdc ]=='0'&&!_dge &&!_gdf {_fbc =_fbdc ;}else if _afg [_fbdc ]=='.'{_gdf =true ;}else {_dge =true ;};};if _gdf &&_dge {if _afg [_fbc -1]=='.'{_fbc --;};return _afg [0:_fbc ];};return _afg ;};const _fbfe int =-1;func _egd (_bb []byte )[]byte {for _bbe :=0;_bbe < len (_bb )/2;_bbe ++{_bgc :=len (_bb )-1-_bbe ;_bb [_bbe ],_bb [_bgc ]=_bb [_bgc ],_bb [_bbe ];};return _bb ;};const _ffa int =0;

// AddToken adds a format token to the format.
func (_be *Format )AddToken (t FmtType ,l []byte ){if _be ._gagf {_be ._gagf =false ;return ;};switch t {case FmtTypeDecimal :_be ._bg =true ;case FmtTypeUnderscore :_be ._gagf =true ;case FmtTypeText :_be .Whole =append (_be .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_be .Whole =append (_be .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_be ._fg =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_fge :=range l {if _be .IsExponential {_be .Exponent =append (_be .Exponent ,Token {Type :t ,Literal :_fge });}else if !_be ._bg {_be .Whole =append (_be .Whole ,Token {Type :t ,Literal :_fge });}else {_be .Fractional =append (_be .Fractional ,Token {Type :t ,Literal :_fge });};};case FmtTypeDigitOptThousands :_be ._cc =true ;case FmtTypeFraction :_bgg :=_e .Split (string (l ),"\u002f");if len (_bgg )==2{_be ._gc =true ;_be ._gg ,_ =_af .ParseInt (_bgg [1],10,64);for _ ,_fa :=range _bgg [1]{if _fa =='?'||_fa =='0'{_be ._ag ++;};};};default:_da .Log ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};func _fea (_eb _d .Time ,_aea string )[]byte {_cbe :=[]byte {};_efd :=0;for _edc :=0;_edc < len (_aea );_edc ++{var _gdc string ;if _aea [_edc ]=='/'{_gdc =string (_aea [_efd :_edc ]);_efd =_edc +1;}else if _edc ==len (_aea )-1{_gdc =string (_aea [_efd :_edc +1]);}else {continue ;};switch _gdc {case "\u0079\u0079":_cbe =_eb .AppendFormat (_cbe ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_cbe =_eb .AppendFormat (_cbe ,"\u0032\u0030\u0030\u0036");case "\u006d":_cbe =_eb .AppendFormat (_cbe ,"\u0031");case "\u006d\u006d":_cbe =_eb .AppendFormat (_cbe ,"\u0030\u0031");case "\u006d\u006d\u006d":_cbe =_eb .AppendFormat (_cbe ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_cbe =_eb .AppendFormat (_cbe ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _eb .Month (){case _d .January ,_d .July ,_d .June :_cbe =append (_cbe ,'J');case _d .February :_cbe =append (_cbe ,'M');case _d .March ,_d .May :_cbe =append (_cbe ,'M');case _d .April ,_d .August :_cbe =append (_cbe ,'A');case _d .September :_cbe =append (_cbe ,'S');case _d .October :_cbe =append (_cbe ,'O');case _d .November :_cbe =append (_cbe ,'N');case _d .December :_cbe =append (_cbe ,'D');};case "\u0064":_cbe =_eb .AppendFormat (_cbe ,"\u0032");case "\u0064\u0064":_cbe =_eb .AppendFormat (_cbe ,"\u0030\u0032");case "\u0064\u0064\u0064":_cbe =_eb .AppendFormat (_cbe ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_cbe =_eb .AppendFormat (_cbe ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_da .Log ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_gdc );};if _aea [_edc ]=='/'{_cbe =append (_cbe ,'/');};};return _cbe ;};const _b =1e11;func (_fcfg *Lexer )Lex (r _f .Reader ){_fged ,_abfb ,_edf :=0,0,0;_ddd :=-1;_dbb ,_afga ,_dde :=0,0,0;_ =_afga ;_ =_dde ;_gea :=1;_ =_gea ;_ade :=make ([]byte ,4096);_egg :=false ;for !_egg {_df :=0;if _dbb > 0{_df =_abfb -_dbb ;};_abfb =0;_dee ,_bf :=r .Read (_ade [_df :]);if _dee ==0||_bf !=nil {_egg =true ;};_edf =_dee +_df ;if _edf < len (_ade ){_ddd =_edf ;};{_fged =_aaga ;_dbb =0;_afga =0;_dde =0;};{if _abfb ==_edf {goto _gbd ;};switch _fged {case 34:goto _gfcc ;case 35:goto _caab ;case 0:goto _ddb ;case 36:goto _fedf ;case 37:goto _dbbf ;case 1:goto _gbb ;case 2:goto _efca ;case 38:goto _cge ;case 3:goto _cebf ;case 4:goto _aef ;case 39:goto _acd ;case 5:goto _fde ;case 6:goto _dgeb ;case 7:goto _ggd ;case 8:goto _dbcg ;case 40:goto _eab ;case 9:goto _cef ;case 41:goto _aefb ;case 10:goto _ddc ;case 42:goto _cfe ;case 11:goto _fabg ;case 43:goto _dcc ;case 44:goto _abea ;case 45:goto _fad ;case 12:goto _afb ;case 46:goto _gafg ;case 13:goto _dfd ;case 14:goto _bac ;case 15:goto _efb ;case 16:goto _bdg ;case 47:goto _aeb ;case 17:goto _ddcca ;case 48:goto _fbdd ;case 18:goto _afgb ;case 19:goto _ebfc ;case 20:goto _aee ;case 49:goto _ddf ;case 50:goto _faa ;case 21:goto _cebb ;case 22:goto _dcd ;case 23:goto _dgc ;case 24:goto _aed ;case 25:goto _ddeg ;case 51:goto _deg ;case 26:goto _ffeg ;case 52:goto _agd ;case 53:goto _ebd ;case 54:goto _aegf ;case 55:goto _dga ;case 56:goto _fff ;case 57:goto _adbg ;case 27:goto _ccdc ;case 28:goto _eebg ;case 29:goto _feeb ;case 30:goto _fabc ;case 31:goto _cdba ;case 58:goto _bfe ;case 32:goto _adgf ;case 59:goto _dbgf ;case 33:goto _cdbg ;case 60:goto _ffb ;case 61:goto _fafe ;case 62:goto _bfa ;};goto _feb ;_fdg :switch _dde {case 2:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeDigit ,nil );};case 3:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_abfb =(_afga )-1;};case 8:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypePercent ,nil );};case 13:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeFraction ,_ade [_dbb :_afga ]);};case 14:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeDate ,_ade [_dbb :_afga ]);};case 15:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeTime ,_ade [_dbb :_afga ]);};case 16:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeTime ,_ade [_dbb :_afga ]);};case 18:{_abfb =(_afga )-1;};case 20:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb :_afga ]);};case 21:{_abfb =(_afga )-1;_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb +1:_afga -1]);};};goto _bcec ;_bfc :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeFraction ,_ade [_dbb :_afga ]);};goto _bcec ;_ccc :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeDigitOpt ,nil );};goto _bcec ;_dba :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeDigitOptThousands ,nil );};goto _bcec ;_eacc :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypePercent ,nil );};goto _bcec ;_dgg :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeDate ,_ade [_dbb :_afga ]);};goto _bcec ;_dcgg :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeDigit ,nil );};goto _bcec ;_gba :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeTime ,_ade [_dbb :_afga ]);};goto _bcec ;_debg :_abfb =(_afga )-1;{_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb :_afga ]);};goto _bcec ;_eecc :_afga =_abfb +1;{_fcfg ._aac ._ab =true ;};goto _bcec ;_dbgd :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb :_afga ]);};goto _bcec ;_fbga :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeDollar ,nil );};goto _bcec ;_ccgg :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeComma ,nil );};goto _bcec ;_bec :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeDecimal ,nil );};goto _bcec ;_dcbb :_afga =_abfb +1;{_fcfg .nextFmt ();};goto _bcec ;_gff :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeText ,nil );};goto _bcec ;_cad :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeUnderscore ,nil );};goto _bcec ;_dgee :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb :_afga ]);};goto _bcec ;_gfcf :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb +1:_afga -1]);};goto _bcec ;_baf :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeDigitOpt ,nil );};goto _bcec ;_fbe :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeFraction ,_ade [_dbb :_afga ]);};goto _bcec ;_bff :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypePercent ,nil );};goto _bcec ;_dbcb :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeDate ,_ade [_dbb :_afga ]);};goto _bcec ;_efdb :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeDigit ,nil );};goto _bcec ;_bcb :_afga =_abfb ;_abfb --;{_fcfg ._aac .AddToken (FmtTypeTime ,_ade [_dbb :_afga ]);};goto _bcec ;_adg :_afga =_abfb ;_abfb --;{};goto _bcec ;_bfd :_afga =_abfb +1;{_fcfg ._aac .IsExponential =true ;};goto _bcec ;_ecf :_afga =_abfb +1;{_fcfg ._aac .AddToken (FmtTypeLiteral ,_ade [_dbb +1:_afga ]);};goto _bcec ;_bcec :_dbb =0;if _abfb ++;_abfb ==_edf {goto _dea ;};_gfcc :_dbb =_abfb ;switch _ade [_abfb ]{case 34:goto _abaf ;case 35:goto _egc ;case 36:goto _fbga ;case 37:goto _cdab ;case 44:goto _ccgg ;case 46:goto _bec ;case 47:goto _fgga ;case 48:goto _aaaa ;case 58:goto _gecf ;case 59:goto _dcbb ;case 63:goto _ccdg ;case 64:goto _gff ;case 65:goto _gdbf ;case 69:goto _afbe ;case 71:goto _bgbc ;case 91:goto _fbbf ;case 92:goto _bdde ;case 95:goto _cad ;case 100:goto _fgga ;case 104:goto _gecf ;case 109:goto _bddg ;case 115:goto _gad ;case 121:goto _gfca ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gcf ;};goto _dbgd ;_abaf :_afga =_abfb +1;_dde =20;goto _fed ;_fed :if _abfb ++;_abfb ==_edf {goto _gfa ;};_caab :if _ade [_abfb ]==34{goto _fgef ;};goto _eef ;_eef :if _abfb ++;_abfb ==_edf {goto _gegg ;};_ddb :if _ade [_abfb ]==34{goto _fgef ;};goto _eef ;_fgef :_afga =_abfb +1;_dde =21;goto _ecgf ;_ecgf :if _abfb ++;_abfb ==_edf {goto _gdcb ;};_fedf :if _ade [_abfb ]==34{goto _eef ;};goto _gfcf ;_egc :_afga =_abfb +1;_dde =3;goto _geag ;_geag :if _abfb ++;_abfb ==_edf {goto _daaa ;};_dbbf :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gfbd ;case 44:goto _bdfc ;case 47:goto _abfbe ;case 48:goto _gfbd ;case 63:goto _gfbd ;};goto _baf ;_gfbd :if _abfb ++;_abfb ==_edf {goto _bba ;};_gbb :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gfbd ;case 47:goto _abfbe ;case 48:goto _gfbd ;case 63:goto _gfbd ;};goto _fdg ;_abfbe :if _abfb ++;_abfb ==_edf {goto _bddgd ;};_efca :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _bdd ;case 48:goto _fgdd ;case 63:goto _bgb ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _bfg ;};goto _fdg ;_bgb :_afga =_abfb +1;goto _ece ;_ece :if _abfb ++;_abfb ==_edf {goto _beff ;};_cge :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _bgb ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _bgb ;case 63:goto _bgb ;case 65:goto _add ;};goto _fbe ;_add :if _abfb ++;_abfb ==_edf {goto _dcbba ;};_cebf :switch _ade [_abfb ]{case 47:goto _ggeg ;case 77:goto _fbef ;};goto _bfc ;_ggeg :if _abfb ++;_abfb ==_edf {goto _eaa ;};_aef :if _ade [_abfb ]==80{goto _ecge ;};goto _bfc ;_ecge :_afga =_abfb +1;goto _bef ;_bef :if _abfb ++;_abfb ==_edf {goto _cfg ;};_acd :if _ade [_abfb ]==65{goto _add ;};goto _fbe ;_fbef :if _abfb ++;_abfb ==_edf {goto _dbge ;};_fde :if _ade [_abfb ]==47{goto _cgeb ;};goto _bfc ;_cgeb :if _abfb ++;_abfb ==_edf {goto _dege ;};_dgeb :if _ade [_abfb ]==80{goto _fcg ;};goto _bfc ;_fcg :if _abfb ++;_abfb ==_edf {goto _dgb ;};_ggd :if _ade [_abfb ]==77{goto _ecge ;};goto _bfc ;_bdd :if _abfb ++;_abfb ==_edf {goto _dfb ;};_dbcg :switch _ade [_abfb ]{case 35:goto _adfg ;case 37:goto _gbf ;case 63:goto _adfg ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _ccd ;};goto _fdg ;_adfg :_afga =_abfb +1;goto _gafd ;_gafd :if _abfb ++;_abfb ==_edf {goto _bad ;};_eab :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _adea ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _bgb ;case 63:goto _bgb ;case 65:goto _add ;};goto _fbe ;_adea :if _abfb ++;_abfb ==_edf {goto _aaef ;};_cef :switch _ade [_abfb ]{case 35:goto _geg ;case 44:goto _geg ;case 46:goto _geg ;case 48:goto _geg ;case 63:goto _geg ;};goto _bfc ;_geg :_afga =_abfb +1;goto _eeb ;_eeb :if _abfb ++;_abfb ==_edf {goto _beeg ;};_aefb :switch _ade [_abfb ]{case 35:goto _geg ;case 44:goto _geg ;case 46:goto _geg ;case 48:goto _geg ;case 63:goto _geg ;case 65:goto _add ;};goto _fbe ;_gbf :if _abfb ++;_abfb ==_edf {goto _cab ;};_ddc :if _ade [_abfb ]==37{goto _gbf ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _ccd ;};goto _fdg ;_ccd :_afga =_abfb +1;_dde =13;goto _bdf ;_bdf :if _abfb ++;_abfb ==_edf {goto _bcd ;};_cfe :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _bead ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _gda ;case 63:goto _bgb ;case 65:goto _add ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _ccd ;};goto _fbe ;_bead :if _abfb ++;_abfb ==_edf {goto _cbf ;};_fabg :switch _ade [_abfb ]{case 35:goto _geg ;case 37:goto _gbf ;case 44:goto _geg ;case 46:goto _geg ;case 63:goto _geg ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _ccd ;};goto _bfc ;_gda :_afga =_abfb +1;goto _cfb ;_cfb :if _abfb ++;_abfb ==_edf {goto _bfda ;};_dcc :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _gda ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _gda ;case 63:goto _bgb ;case 65:goto _add ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _ccd ;};goto _fbe ;_fgdd :_afga =_abfb +1;goto _fcge ;_fcge :if _abfb ++;_abfb ==_edf {goto _eed ;};_abea :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _gda ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _fgdd ;case 63:goto _bgb ;case 65:goto _add ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _bfg ;};goto _fbe ;_bfg :_afga =_abfb +1;goto _gefb ;_gefb :if _abfb ++;_abfb ==_edf {goto _bcde ;};_fad :switch _ade [_abfb ]{case 35:goto _bgb ;case 37:goto _ccd ;case 44:goto _bgb ;case 46:goto _bgb ;case 48:goto _fgdd ;case 63:goto _bgb ;case 65:goto _add ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _bfg ;};goto _fbe ;_bdfc :if _abfb ++;_abfb ==_edf {goto _fefa ;};_afb :if _ade [_abfb ]==35{goto _dba ;};goto _ccc ;_cdab :_afga =_abfb +1;_dde =8;goto _eff ;_eff :if _abfb ++;_abfb ==_edf {goto _gacc ;};_gafg :switch _ade [_abfb ]{case 35:goto _eca ;case 37:goto _gcb ;case 48:goto _ddcc ;case 63:goto _eca ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gece ;};goto _bff ;_eca :if _abfb ++;_abfb ==_edf {goto _cdf ;};_dfd :switch _ade [_abfb ]{case 35:goto _eca ;case 47:goto _abfbe ;case 48:goto _eca ;case 63:goto _eca ;};goto _eacc ;_gcb :if _abfb ++;_abfb ==_edf {goto _cbec ;};_bac :if _ade [_abfb ]==37{goto _gcb ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gece ;};goto _fdg ;_gece :if _abfb ++;_abfb ==_edf {goto _gfg ;};_efb :switch _ade [_abfb ]{case 37:goto _gcb ;case 47:goto _abfbe ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gece ;};goto _fdg ;_ddcc :if _abfb ++;_abfb ==_edf {goto _fdgc ;};_bdg :switch _ade [_abfb ]{case 35:goto _eca ;case 37:goto _gcb ;case 47:goto _abfbe ;case 48:goto _ddcc ;case 63:goto _eca ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gece ;};goto _eacc ;_fgga :_afga =_abfb +1;goto _ddbe ;_ddbe :if _abfb ++;_abfb ==_edf {goto _eag ;};_aeb :switch _ade [_abfb ]{case 47:goto _fgga ;case 100:goto _fgga ;case 109:goto _fgga ;case 121:goto _eee ;};goto _dbcb ;_eee :if _abfb ++;_abfb ==_edf {goto _ggg ;};_ddcca :if _ade [_abfb ]==121{goto _fgga ;};goto _dgg ;_aaaa :_afga =_abfb +1;_dde =2;goto _aebe ;_aebe :if _abfb ++;_abfb ==_edf {goto _ecac ;};_fbdd :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gdag ;case 47:goto _abfbe ;case 48:goto _bcf ;case 63:goto _gfbd ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gac ;};goto _efdb ;_gdag :if _abfb ++;_abfb ==_edf {goto _cdca ;};_afgb :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gdag ;case 47:goto _abfbe ;case 48:goto _gdag ;case 63:goto _gfbd ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gece ;};goto _dcgg ;_bcf :if _abfb ++;_abfb ==_edf {goto _gabd ;};_ebfc :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gdag ;case 47:goto _abfbe ;case 48:goto _bcf ;case 63:goto _gfbd ;};if 49<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gac ;};goto _dcgg ;_gac :if _abfb ++;_abfb ==_edf {goto _fce ;};_aee :switch _ade [_abfb ]{case 37:goto _gece ;case 47:goto _abfbe ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gac ;};goto _fdg ;_gcf :_afga =_abfb +1;_dde =20;goto _ded ;_ded :if _abfb ++;_abfb ==_edf {goto _gcfe ;};_ddf :switch _ade [_abfb ]{case 37:goto _gece ;case 47:goto _abfbe ;};if 48<=_ade [_abfb ]&&_ade [_abfb ]<=57{goto _gac ;};goto _dgee ;_gecf :_afga =_abfb +1;_dde =15;goto _dfe ;_dfe :if _abfb ++;_abfb ==_edf {goto _ada ;};_faa :switch _ade [_abfb ]{case 58:goto _gecf ;case 65:goto _gdd ;case 104:goto _gecf ;case 109:goto _gecf ;case 115:goto _gad ;};goto _bcb ;_gdd :if _abfb ++;_abfb ==_edf {goto _gcea ;};_cebb :switch _ade [_abfb ]{case 47:goto _efa ;case 77:goto _cdad ;};goto _fdg ;_efa :if _abfb ++;_abfb ==_edf {goto _dfg ;};_dcd :if _ade [_abfb ]==80{goto _gecf ;};goto _fdg ;_cdad :if _abfb ++;_abfb ==_edf {goto _dfc ;};_dgc :if _ade [_abfb ]==47{goto _fcb ;};goto _fdg ;_fcb :if _abfb ++;_abfb ==_edf {goto _ebc ;};_aed :if _ade [_abfb ]==80{goto _age ;};goto _fdg ;_age :if _abfb ++;_abfb ==_edf {goto _bdbf ;};_ddeg :if _ade [_abfb ]==77{goto _gecf ;};goto _fdg ;_gad :_afga =_abfb +1;_dde =15;goto _eadc ;_eadc :if _abfb ++;_abfb ==_edf {goto _ebfb ;};_deg :switch _ade [_abfb ]{case 46:goto _dggg ;case 58:goto _gecf ;case 65:goto _gdd ;case 104:goto _gecf ;case 109:goto _gecf ;case 115:goto _gad ;};goto _bcb ;_dggg :if _abfb ++;_abfb ==_edf {goto _fae ;};_ffeg :if _ade [_abfb ]==48{goto _ecdc ;};goto _gba ;_ecdc :_afga =_abfb +1;_dde =15;goto _ggfb ;_ggfb :if _abfb ++;_abfb ==_edf {goto _eedd ;};_agd :switch _ade [_abfb ]{case 48:goto _acf ;case 58:goto _gecf ;case 65:goto _gdd ;case 104:goto _gecf ;case 109:goto _gecf ;case 115:goto _gad ;};goto _bcb ;_acf :_afga =_abfb +1;_dde =15;goto _adee ;_adee :if _abfb ++;_abfb ==_edf {goto _dbbd ;};_ebd :switch _ade [_abfb ]{case 48:goto _gecf ;case 58:goto _gecf ;case 65:goto _gdd ;case 104:goto _gecf ;case 109:goto _gecf ;case 115:goto _gad ;};goto _bcb ;_ccdg :_afga =_abfb +1;_dde =5;goto _bae ;_bae :if _abfb ++;_abfb ==_edf {goto _aaefd ;};_aegf :switch _ade [_abfb ]{case 35:goto _gfbd ;case 37:goto _gfbd ;case 47:goto _abfbe ;case 48:goto _gfbd ;case 63:goto _gfbd ;};goto _adg ;_gdbf :_afga =_abfb +1;_dde =20;goto _aefd ;_aefd :if _abfb ++;_abfb ==_edf {goto _fffa ;};_dga :switch _ade [_abfb ]{case 47:goto _efa ;case 77:goto _cdad ;};goto _dgee ;_afbe :if _abfb ++;_abfb ==_edf {goto _eagd ;};_fff :switch _ade [_abfb ]{case 43:goto _bfd ;case 45:goto _bfd ;};goto _dgee ;_bgbc :_afga =_abfb +1;goto _cfec ;_cfec :if _abfb ++;_abfb ==_edf {goto _cdcg ;};_adbg :if _ade [_abfb ]==101{goto _agea ;};goto _dgee ;_agea :if _abfb ++;_abfb ==_edf {goto _ebe ;};_ccdc :if _ade [_abfb ]==110{goto _fbeb ;};goto _debg ;_fbeb :if _abfb ++;_abfb ==_edf {goto _beffe ;};_eebg :if _ade [_abfb ]==101{goto _bdb ;};goto _debg ;_bdb :if _abfb ++;_abfb ==_edf {goto _gbfc ;};_feeb :if _ade [_abfb ]==114{goto _acdc ;};goto _debg ;_acdc :if _abfb ++;_abfb ==_edf {goto _fcde ;};_fabc :if _ade [_abfb ]==97{goto _bagd ;};goto _debg ;_bagd :if _abfb ++;_abfb ==_edf {goto _ggff ;};_cdba :if _ade [_abfb ]==108{goto _eecc ;};goto _debg ;_fbbf :_afga =_abfb +1;_dde =20;goto _bcbd ;_bcbd :if _abfb ++;_abfb ==_edf {goto _ged ;};_bfe :switch _ade [_abfb ]{case 104:goto _ddde ;case 109:goto _ddde ;case 115:goto _ddde ;};goto _abae ;_abae :if _abfb ++;_abfb ==_edf {goto _cgg ;};_adgf :if _ade [_abfb ]==93{goto _dfa ;};goto _abae ;_dfa :_afga =_abfb +1;_dde =18;goto _efge ;_dac :_afga =_abfb +1;_dde =16;goto _efge ;_efge :if _abfb ++;_abfb ==_edf {goto _agc ;};_dbgf :if _ade [_abfb ]==93{goto _dfa ;};goto _abae ;_ddde :if _abfb ++;_abfb ==_edf {goto _fdge ;};_cdbg :if _ade [_abfb ]==93{goto _dac ;};goto _abae ;_bdde :if _abfb ++;_abfb ==_edf {goto _ggb ;};_ffb :goto _ecf ;_bddg :_afga =_abfb +1;_dde =14;goto _cdcc ;_cdcc :if _abfb ++;_abfb ==_edf {goto _adfe ;};_fafe :switch _ade [_abfb ]{case 47:goto _fgga ;case 58:goto _gecf ;case 65:goto _gdd ;case 100:goto _fgga ;case 104:goto _gecf ;case 109:goto _bddg ;case 115:goto _gad ;case 121:goto _eee ;};goto _dbcb ;_gfca :if _abfb ++;_abfb ==_edf {goto _dca ;};_bfa :if _ade [_abfb ]==121{goto _fgga ;};goto _dgee ;_feb :_dea :_fged =34;goto _gbd ;_gfa :_fged =35;goto _gbd ;_gegg :_fged =0;goto _gbd ;_gdcb :_fged =36;goto _gbd ;_daaa :_fged =37;goto _gbd ;_bba :_fged =1;goto _gbd ;_bddgd :_fged =2;goto _gbd ;_beff :_fged =38;goto _gbd ;_dcbba :_fged =3;goto _gbd ;_eaa :_fged =4;goto _gbd ;_cfg :_fged =39;goto _gbd ;_dbge :_fged =5;goto _gbd ;_dege :_fged =6;goto _gbd ;_dgb :_fged =7;goto _gbd ;_dfb :_fged =8;goto _gbd ;_bad :_fged =40;goto _gbd ;_aaef :_fged =9;goto _gbd ;_beeg :_fged =41;goto _gbd ;_cab :_fged =10;goto _gbd ;_bcd :_fged =42;goto _gbd ;_cbf :_fged =11;goto _gbd ;_bfda :_fged =43;goto _gbd ;_eed :_fged =44;goto _gbd ;_bcde :_fged =45;goto _gbd ;_fefa :_fged =12;goto _gbd ;_gacc :_fged =46;goto _gbd ;_cdf :_fged =13;goto _gbd ;_cbec :_fged =14;goto _gbd ;_gfg :_fged =15;goto _gbd ;_fdgc :_fged =16;goto _gbd ;_eag :_fged =47;goto _gbd ;_ggg :_fged =17;goto _gbd ;_ecac :_fged =48;goto _gbd ;_cdca :_fged =18;goto _gbd ;_gabd :_fged =19;goto _gbd ;_fce :_fged =20;goto _gbd ;_gcfe :_fged =49;goto _gbd ;_ada :_fged =50;goto _gbd ;_gcea :_fged =21;goto _gbd ;_dfg :_fged =22;goto _gbd ;_dfc :_fged =23;goto _gbd ;_ebc :_fged =24;goto _gbd ;_bdbf :_fged =25;goto _gbd ;_ebfb :_fged =51;goto _gbd ;_fae :_fged =26;goto _gbd ;_eedd :_fged =52;goto _gbd ;_dbbd :_fged =53;goto _gbd ;_aaefd :_fged =54;goto _gbd ;_fffa :_fged =55;goto _gbd ;_eagd :_fged =56;goto _gbd ;_cdcg :_fged =57;goto _gbd ;_ebe :_fged =27;goto _gbd ;_beffe :_fged =28;goto _gbd ;_gbfc :_fged =29;goto _gbd ;_fcde :_fged =30;goto _gbd ;_ggff :_fged =31;goto _gbd ;_ged :_fged =58;goto _gbd ;_cgg :_fged =32;goto _gbd ;_agc :_fged =59;goto _gbd ;_fdge :_fged =33;goto _gbd ;_ggb :_fged =60;goto _gbd ;_adfe :_fged =61;goto _gbd ;_dca :_fged =62;goto _gbd ;_gbd :{};if _abfb ==_ddd {switch _fged {case 35:goto _dgee ;case 0:goto _fdg ;case 36:goto _gfcf ;case 37:goto _baf ;case 1:goto _fdg ;case 2:goto _fdg ;case 38:goto _fbe ;case 3:goto _bfc ;case 4:goto _bfc ;case 39:goto _fbe ;case 5:goto _bfc ;case 6:goto _bfc ;case 7:goto _bfc ;case 8:goto _fdg ;case 40:goto _fbe ;case 9:goto _bfc ;case 41:goto _fbe ;case 10:goto _fdg ;case 42:goto _fbe ;case 11:goto _bfc ;case 43:goto _fbe ;case 44:goto _fbe ;case 45:goto _fbe ;case 12:goto _ccc ;case 46:goto _bff ;case 13:goto _eacc ;case 14:goto _fdg ;case 15:goto _fdg ;case 16:goto _eacc ;case 47:goto _dbcb ;case 17:goto _dgg ;case 48:goto _efdb ;case 18:goto _dcgg ;case 19:goto _dcgg ;case 20:goto _fdg ;case 49:goto _dgee ;case 50:goto _bcb ;case 21:goto _fdg ;case 22:goto _fdg ;case 23:goto _fdg ;case 24:goto _fdg ;case 25:goto _fdg ;case 51:goto _bcb ;case 26:goto _gba ;case 52:goto _bcb ;case 53:goto _bcb ;case 54:goto _adg ;case 55:goto _dgee ;case 56:goto _dgee ;case 57:goto _dgee ;case 27:goto _debg ;case 28:goto _debg ;case 29:goto _debg ;case 30:goto _debg ;case 31:goto _debg ;case 58:goto _dgee ;case 32:goto _fdg ;case 59:goto _fdg ;case 33:goto _debg ;case 60:goto _dgee ;case 61:goto _dbcb ;case 62:goto _dgee ;};};};if _dbb > 0{copy (_ade [0:],_ade [_dbb :]);};};_ =_ddd ;if _fged ==_edd {_da .Log ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);