//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_f "encoding/xml";_g "fmt";_ff "github.com/unidoc/unioffice";);

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_ba *Iscomment )ValidateWithPath (path string )error {if _eac :=_ba .CT_Empty .ValidateWithPath (path );_eac !=nil {return _eac ;};return nil ;};func NewCT_Empty ()*CT_Empty {_fb :=&CT_Empty {};return _fb };

// Validate validates the Iscomment and its children
func (_ce *Iscomment )Validate ()error {return _ce .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func NewCT_Rel ()*CT_Rel {_d :=&CT_Rel {};return _d };func (_gd *Textdata )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {start .Attr =append (start .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _gd .CT_Rel .MarshalXML (e ,start );};

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_aff *Textdata )ValidateWithPath (path string )error {if _db :=_aff .CT_Rel .ValidateWithPath (path );_db !=nil {return _db ;};return nil ;};func NewIscomment ()*Iscomment {_ec :=&Iscomment {};_ec .CT_Empty =*NewCT_Empty ();return _ec };func (_bcc *Textdata )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_bcc .CT_Rel =*NewCT_Rel ();for _ ,_af :=range start .Attr {if _af .Name .Local =="\u0069\u0064"{_abc ,_abcd :=_af .Value ,error (nil );if _abcd !=nil {return _abcd ;};_bcc .IdAttr =&_abc ;continue ;};};for {_df ,_ga :=d .Token ();if _ga !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_ga );};if _abg ,_agd :=_df .(_f .EndElement );_agd &&_abg .Name ==start .Name {break ;};};return nil ;};type Iscomment struct{CT_Empty };

// Validate validates the CT_Empty and its children
func (_bf *CT_Empty )Validate ()error {return _bf .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};

// Validate validates the CT_Rel and its children
func (_cgb *CT_Rel )Validate ()error {return _cgb .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};

// Validate validates the Textdata and its children
func (_cdg *Textdata )Validate ()error {return _cdg .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_be *CT_Empty )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {e .EncodeToken (start );e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};type CT_Rel struct{IdAttr *string ;};type CT_Empty struct{};func (_ae *CT_Rel )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {for _ ,_gc :=range start .Attr {if _gc .Name .Local =="\u0069\u0064"{_ee ,_bfb :=_gc .Value ,error (nil );if _bfb !=nil {return _bfb ;};_ae .IdAttr =&_ee ;continue ;};};for {_fd ,_ab :=d .Token ();if _ab !=nil {return _g .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_ab );};if _cf ,_ag :=_fd .(_f .EndElement );_ag &&_cf .Name ==start .Name {break ;};};return nil ;};func (_c *CT_Empty )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {for {_cd ,_a :=d .Token ();if _a !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_a );};if _e ,_cg :=_cd .(_f .EndElement );_cg &&_e .Name ==start .Name {break ;};};return nil ;};type Textdata struct{CT_Rel };func (_cb *Iscomment )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {start .Attr =append (start .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_f .Attr {Name :_f .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _cb .CT_Empty .MarshalXML (e ,start );};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_eb *CT_Rel )ValidateWithPath (path string )error {return nil };func NewTextdata ()*Textdata {_bc :=&Textdata {};_bc .CT_Rel =*NewCT_Rel ();return _bc };func (_fdg *Iscomment )UnmarshalXML (d *_f .Decoder ,start _f .StartElement )error {_fdg .CT_Empty =*NewCT_Empty ();for {_eaa ,_gcc :=d .Token ();if _gcc !=nil {return _g .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_gcc );};if _bg ,_fg :=_eaa .(_f .EndElement );_fg &&_bg .Name ==start .Name {break ;};};return nil ;};func (_dc *CT_Rel )MarshalXML (e *_f .Encoder ,start _f .StartElement )error {if _dc .IdAttr !=nil {start .Attr =append (start .Attr ,_f .Attr {Name :_f .Name {Local :"\u0069\u0064"},Value :_g .Sprintf ("\u0025\u0076",*_dc .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_f .EndElement {Name :start .Name });return nil ;};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_bb *CT_Empty )ValidateWithPath (path string )error {return nil };func init (){_ff .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_ff .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_ff .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_ff .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};