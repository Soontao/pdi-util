//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_g "fmt";_d "github.com/unidoc/unioffice";_gg "github.com/unidoc/unioffice/color";_ab "github.com/unidoc/unioffice/drawing";_af "github.com/unidoc/unioffice/measurement";_da "github.com/unidoc/unioffice/schema/soo/dml";_a "github.com/unidoc/unioffice/schema/soo/dml/chart";_aa "math/rand";);type nullAxis byte ;

// X returns the inner wrapped XML type.
func (_edf BubbleChartSeries )X ()*_a .CT_BubbleSer {return _edf ._bf };

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_cddc CategoryAxisDataSource )SetLabelReference (s string ){_cddc ._efb .Choice =_a .NewCT_AxDataSourceChoice ();_cddc ._efb .Choice .StrRef =_a .NewCT_StrRef ();_cddc ._efb .Choice .StrRef .F =s ;};func (_gbf DateAxis )SetPosition (p _a .ST_AxPos ){_gbf ._ffgc .AxPos =_a .NewCT_AxPos ();_gbf ._ffgc .AxPos .ValAttr =p ;};

// SetOrder sets the order of the series
func (_gfd ScatterChartSeries )SetOrder (idx uint32 ){_gfd ._abfbf .Order .ValAttr =idx };

// Index returns the index of the series
func (_cac LineChartSeries )Index ()uint32 {return _cac ._cddd .Idx .ValAttr };

// CategoryAxis returns the category data source.
func (_bde RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bde ._dafe .Cat ==nil {_bde ._dafe .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_bde ._dafe .Cat );};func (_ec CategoryAxis )SetPosition (p _a .ST_AxPos ){_ec ._abe .AxPos =_a .NewCT_AxPos ();_ec ._abe .AxPos .ValAttr =p ;};func (_ea nullAxis )AxisID ()uint32 {return 0};

// Values returns the value data source.
func (_agc RadarChartSeries )Values ()NumberDataSource {if _agc ._dafe .Val ==nil {_agc ._dafe .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_agc ._dafe .Val );};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_fc Chart )AddBar3DChart ()Bar3DChart {_dad (_fc ._bcd .Chart );_cff :=_a .NewCT_PlotAreaChoice ();_fc ._bcd .Chart .PlotArea .Choice =append (_fc ._bcd .Chart .PlotArea .Choice ,_cff );_cff .Bar3DChart =_a .NewCT_Bar3DChart ();_cff .Bar3DChart .Grouping =_a .NewCT_BarGrouping ();_cff .Bar3DChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_dfe :=Bar3DChart {_ed :_cff .Bar3DChart };_dfe .InitializeDefaults ();return _dfe ;};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_gcg *_a .CT_BubbleChart ;};

// Properties returns the line chart series shape properties.
func (_deb SurfaceChartSeries )Properties ()_ab .ShapeProperties {if _deb ._bdd .SpPr ==nil {_deb ._bdd .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_deb ._bdd .SpPr );};type NumberDataSource struct{_feb *_a .CT_NumDataSource };func MakeLegend (l *_a .CT_Legend )Legend {return Legend {l }};

// AddArea3DChart adds a new area chart to a chart.
func (_bae Chart )AddArea3DChart ()Area3DChart {_dad (_bae ._bcd .Chart );_ggf :=_a .NewCT_PlotAreaChoice ();_bae ._bcd .Chart .PlotArea .Choice =append (_bae ._bcd .Chart .PlotArea .Choice ,_ggf );_ggf .Area3DChart =_a .NewCT_Area3DChart ();_ddf :=Area3DChart {_gb :_ggf .Area3DChart };_ddf .InitializeDefaults ();return _ddf ;};

// X returns the inner wrapped XML type.
func (_bggd SurfaceChartSeries )X ()*_a .CT_SurfaceSer {return _bggd ._bdd };

// SetIndex sets the index of the series
func (_gadf ScatterChartSeries )SetIndex (idx uint32 ){_gadf ._abfbf .Idx .ValAttr =idx };

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_gfg *_a .CT_BarSer };

// InitializeDefaults the Stock chart to its defaults
func (_bda StockChart )InitializeDefaults (){_bda ._acge .HiLowLines =_a .NewCT_ChartLines ();_bda ._acge .UpDownBars =_a .NewCT_UpDownBars ();_bda ._acge .UpDownBars .GapWidth =_a .NewCT_GapAmount ();_bda ._acge .UpDownBars .GapWidth .ValAttr =&_a .ST_GapAmount {};_bda ._acge .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_d .Uint16 (150);_bda ._acge .UpDownBars .UpBars =_a .NewCT_UpDownBar ();_bda ._acge .UpDownBars .DownBars =_a .NewCT_UpDownBar ();};func (_cabd ValueAxis )Properties ()_ab .ShapeProperties {if _cabd ._adaf .SpPr ==nil {_cabd ._adaf .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_cabd ._adaf .SpPr );};func MakeValueAxis (x *_a .CT_ValAx )ValueAxis {return ValueAxis {x }};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_edc *_a .CT_RadarChart ;};func (_cgb Legend )SetPosition (p _a .ST_LegendPos ){if p ==_a .ST_LegendPosUnset {_cgb ._eedf .LegendPos =nil ;}else {_cgb ._eedf .LegendPos =_a .NewCT_LegendPos ();_cgb ._eedf .LegendPos .ValAttr =p ;};};func (_ge Bar3DChart )AddAxis (axis Axis ){_aad :=_a .NewCT_UnsignedInt ();_aad .ValAttr =axis .AxisID ();_ge ._ed .AxId =append (_ge ._ed .AxId ,_aad );};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_ba CategoryAxisDataSource )SetNumberReference (s string ){_ba ._efb .Choice =_a .NewCT_AxDataSourceChoice ();_ba ._efb .Choice .NumRef =_a .NewCT_NumRef ();_ba ._efb .Choice .NumRef .F =s ;};type DataLabels struct{_ddb *_a .CT_DLbls };func (_gab chartBase )nextColor (_ada int )_gg .Color {return _eed [_ada %len (_eed )]};func (_faa DateAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_faa ._ffgc .MinorTickMark =nil ;}else {_faa ._ffgc .MinorTickMark =_a .NewCT_TickMark ();_faa ._ffgc .MinorTickMark .ValAttr =m ;};};type Legend struct{_eedf *_a .CT_Legend };

// Properties returns the bar chart series shape properties.
func (_be AreaChartSeries )Properties ()_ab .ShapeProperties {if _be ._dg .SpPr ==nil {_be ._dg .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_be ._dg .SpPr );};

// X returns the inner wrapped XML type.
func (_gdg Line3DChart )X ()*_a .CT_Line3DChart {return _gdg ._cde };func (_fef DateAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_fef ._ffgc .TickLblPos =nil ;}else {_fef ._ffgc .TickLblPos =_a .NewCT_TickLblPos ();_fef ._ffgc .TickLblPos .ValAttr =p ;};};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_abfbf *_a .CT_ScatterSer };

// AddPieChart adds a new pie chart to a chart.
func (_agb Chart )AddPieChart ()PieChart {_gdac :=_a .NewCT_PlotAreaChoice ();_agb ._bcd .Chart .PlotArea .Choice =append (_agb ._bcd .Chart .PlotArea .Choice ,_gdac );_gdac .PieChart =_a .NewCT_PieChart ();_dga :=PieChart {_efd :_gdac .PieChart };_dga .InitializeDefaults ();return _dga ;};func (_add DateAxis )Properties ()_ab .ShapeProperties {if _add ._ffgc .SpPr ==nil {_add ._ffgc .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_add ._ffgc .SpPr );};

// CategoryAxis returns the category data source.
func (_gc BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gc ._gfg .Cat ==nil {_gc ._gfg .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_gc ._gfg .Cat );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_efd *_a .CT_PieChart ;};func (_dbd Marker )SetSymbol (s _a .ST_MarkerStyle ){if s ==_a .ST_MarkerStyleUnset {_dbd ._gac .Symbol =nil ;}else {_dbd ._gac .Symbol =_a .NewCT_MarkerStyle ();_dbd ._gac .Symbol .ValAttr =s ;};};func _dad (_bbf *_a .CT_Chart ){_bbf .View3D =_a .NewCT_View3D ();_bbf .View3D .RotX =_a .NewCT_RotX ();_bbf .View3D .RotX .ValAttr =_d .Int8 (15);_bbf .View3D .RotY =_a .NewCT_RotY ();_bbf .View3D .RotY .ValAttr =_d .Uint16 (20);_bbf .View3D .RAngAx =_a .NewCT_Boolean ();_bbf .View3D .RAngAx .ValAttr =_d .Bool (false );_bbf .Floor =_a .NewCT_Surface ();_bbf .Floor .Thickness =_a .NewCT_Thickness ();_bbf .Floor .Thickness .ValAttr .Uint32 =_d .Uint32 (0);_bbf .SideWall =_a .NewCT_Surface ();_bbf .SideWall .Thickness =_a .NewCT_Thickness ();_bbf .SideWall .Thickness .ValAttr .Uint32 =_d .Uint32 (0);_bbf .BackWall =_a .NewCT_Surface ();_bbf .BackWall .Thickness =_a .NewCT_Thickness ();_bbf .BackWall .Thickness .ValAttr .Uint32 =_d .Uint32 (0);};func (_gee CategoryAxis )Properties ()_ab .ShapeProperties {if _gee ._abe .SpPr ==nil {_gee ._abe .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_gee ._abe .SpPr );};func (_bcb LineChartSeries )InitializeDefaults (){_bcb .Properties ().LineProperties ().SetWidth (1*_af .Point );_bcb .Properties ().LineProperties ().SetSolidFill (_gg .Black );_bcb .Properties ().LineProperties ().SetJoin (_ab .LineJoinRound );_bcb .Marker ().SetSymbol (_a .ST_MarkerStyleNone );_bcb .Labels ().SetShowLegendKey (false );_bcb .Labels ().SetShowValue (false );_bcb .Labels ().SetShowPercent (false );_bcb .Labels ().SetShowCategoryName (false );_bcb .Labels ().SetShowSeriesName (false );_bcb .Labels ().SetShowLeaderLines (false );};func (_gfbbc NumberDataSource )SetReference (s string ){_gfbbc .ensureChoice ();if _gfbbc ._feb .Choice .NumRef ==nil {_gfbbc ._feb .Choice .NumRef =_a .NewCT_NumRef ();};_gfbbc ._feb .Choice .NumRef .F =s ;};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_afeg *_a .CT_PieSer };func (_eaa Surface3DChart )InitializeDefaults (){_eaa ._bef .Wireframe =_a .NewCT_Boolean ();_eaa ._bef .Wireframe .ValAttr =_d .Bool (false );_eaa ._bef .BandFmts =_a .NewCT_BandFmts ();for _aef :=0;_aef < 15;_aef ++{_fceb :=_a .NewCT_BandFmt ();_fceb .Idx .ValAttr =uint32 (_aef );_fceb .SpPr =_da .NewCT_ShapeProperties ();_ggcg :=_ab .MakeShapeProperties (_fceb .SpPr );_ggcg .SetSolidFill (_eaa .nextColor (_aef ));_eaa ._bef .BandFmts .BandFmt =append (_eaa ._bef .BandFmts .BandFmt ,_fceb );};};func (_bedg DataLabels )SetShowSeriesName (b bool ){_bedg .ensureChoice ();_bedg ._ddb .Choice .ShowSerName =_a .NewCT_Boolean ();_bedg ._ddb .Choice .ShowSerName .ValAttr =_d .Bool (b );};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_gbg Chart )AddDoughnutChart ()DoughnutChart {_ggc :=_a .NewCT_PlotAreaChoice ();_gbg ._bcd .Chart .PlotArea .Choice =append (_gbg ._bcd .Chart .PlotArea .Choice ,_ggc );_ggc .DoughnutChart =_a .NewCT_DoughnutChart ();_ffd :=DoughnutChart {_bbc :_ggc .DoughnutChart };_ffd .InitializeDefaults ();return _ffd ;};

// InitializeDefaults the bar chart to its defaults
func (_dcaa Pie3DChart )InitializeDefaults (){_dcaa ._aae .VaryColors =_a .NewCT_Boolean ();_dcaa ._aae .VaryColors .ValAttr =_d .Bool (true );};func (_gae Legend )InitializeDefaults (){_gae .SetPosition (_a .ST_LegendPosR );_gae .SetOverlay (false );_gae .Properties ().SetNoFill ();_gae .Properties ().LineProperties ().SetNoFill ();};func (_egbd ValueAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_egbd ._adaf .MajorTickMark =nil ;}else {_egbd ._adaf .MajorTickMark =_a .NewCT_TickMark ();_egbd ._adaf .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_cdd BubbleChart )X ()*_a .CT_BubbleChart {return _cdd ._gcg };func (_eee BubbleChart )AddAxis (axis Axis ){_edb :=_a .NewCT_UnsignedInt ();_edb .ValAttr =axis .AxisID ();_eee ._gcg .AxId =append (_eee ._gcg .AxId ,_edb );};func (_ddea ScatterChart )InitializeDefaults (){_ddea ._ecf .ScatterStyle .ValAttr =_a .ST_ScatterStyleMarker ;};

// SetText sets the series text
func (_fgb SurfaceChartSeries )SetText (s string ){_fgb ._bdd .Tx =_a .NewCT_SerTx ();_fgb ._bdd .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_ced LineChartSeries )X ()*_a .CT_LineSer {return _ced ._cddd };

// Values returns the value data source.
func (_gbee BubbleChartSeries )Values ()NumberDataSource {if _gbee ._bf .YVal ==nil {_gbee ._bf .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_gbee ._bf .YVal );};

// AddDateAxis adds a value axis to the chart.
func (_fa Chart )AddDateAxis ()DateAxis {_dda :=_a .NewCT_DateAx ();if _fa ._bcd .Chart .PlotArea .CChoice ==nil {_fa ._bcd .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_dda .AxId =_a .NewCT_UnsignedInt ();_dda .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_fa ._bcd .Chart .PlotArea .CChoice .DateAx =append (_fa ._bcd .Chart .PlotArea .CChoice .DateAx ,_dda );_dda .Delete =_a .NewCT_Boolean ();_dda .Delete .ValAttr =_d .Bool (false );_dda .Scaling =_a .NewCT_Scaling ();_dda .Scaling .Orientation =_a .NewCT_Orientation ();_dda .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_dda .Choice =&_a .EG_AxSharedChoice {};_dda .Choice .Crosses =_a .NewCT_Crosses ();_dda .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_ecc :=DateAxis {_dda };_ecc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gg .LightGray );_ecc .SetMajorTickMark (_a .ST_TickMarkOut );_ecc .SetMinorTickMark (_a .ST_TickMarkIn );_ecc .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_ecc .Properties ().LineProperties ().SetSolidFill (_gg .Black );_ecc .SetPosition (_a .ST_AxPosL );return _ecc ;};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ggg *_a .CT_AreaChart ;};

// SetText sets the series text.
func (_fcbf PieChartSeries )SetText (s string ){_fcbf ._afeg .Tx =_a .NewCT_SerTx ();_fcbf ._afeg .Tx .Choice .V =&s ;};func (_gbdc DataLabels )SetShowPercent (b bool ){_gbdc .ensureChoice ();_gbdc ._ddb .Choice .ShowPercent =_a .NewCT_Boolean ();_gbdc ._ddb .Choice .ShowPercent .ValAttr =_d .Bool (b );};

// X returns the inner wrapped XML type.
func (_gcf ScatterChartSeries )X ()*_a .CT_ScatterSer {return _gcf ._abfbf };

// X returns the inner wrapped XML type.
func (_dbg Legend )X ()*_a .CT_Legend {return _dbg ._eedf };func (_cgbg StockChart )AddAxis (axis Axis ){_ccda :=_a .NewCT_UnsignedInt ();_ccda .ValAttr =axis .AxisID ();_cgbg ._acge .AxId =append (_cgbg ._acge .AxId ,_ccda );};func (_gage DateAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_gage ._ffgc .MajorTickMark =nil ;}else {_gage ._ffgc .MajorTickMark =_a .NewCT_TickMark ();_gage ._ffgc .MajorTickMark .ValAttr =m ;};};

// AddAreaChart adds a new area chart to a chart.
func (_cb Chart )AddAreaChart ()AreaChart {_cgc :=_a .NewCT_PlotAreaChoice ();_cb ._bcd .Chart .PlotArea .Choice =append (_cb ._bcd .Chart .PlotArea .Choice ,_cgc );_cgc .AreaChart =_a .NewCT_AreaChart ();_fee :=AreaChart {_ggg :_cgc .AreaChart };_fee .InitializeDefaults ();return _fee ;};type SurfaceChartSeries struct{_bdd *_a .CT_SurfaceSer };

// AddPie3DChart adds a new pie chart to a chart.
func (_dcf Chart )AddPie3DChart ()Pie3DChart {_dad (_dcf ._bcd .Chart );_afc :=_a .NewCT_PlotAreaChoice ();_dcf ._bcd .Chart .PlotArea .Choice =append (_dcf ._bcd .Chart .PlotArea .Choice ,_afc );_afc .Pie3DChart =_a .NewCT_Pie3DChart ();_fce :=Pie3DChart {_aae :_afc .Pie3DChart };_fce .InitializeDefaults ();return _fce ;};func MakeDataLabels (x *_a .CT_DLbls )DataLabels {return DataLabels {x }};

// AddCategoryAxis adds a category axis.
func (_gbb Chart )AddCategoryAxis ()CategoryAxis {_abb :=_a .NewCT_CatAx ();if _gbb ._bcd .Chart .PlotArea .CChoice ==nil {_gbb ._bcd .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_abb .AxId =_a .NewCT_UnsignedInt ();_abb .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_gbb ._bcd .Chart .PlotArea .CChoice .CatAx =append (_gbb ._bcd .Chart .PlotArea .CChoice .CatAx ,_abb );_abb .Auto =_a .NewCT_Boolean ();_abb .Auto .ValAttr =_d .Bool (true );_abb .Delete =_a .NewCT_Boolean ();_abb .Delete .ValAttr =_d .Bool (false );_acf :=MakeCategoryAxis (_abb );_acf .InitializeDefaults ();return _acf ;};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_dbb *_a .CT_OfPieChart ;};func (_beg Marker )Properties ()_ab .ShapeProperties {if _beg ._gac .SpPr ==nil {_beg ._gac .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_beg ._gac .SpPr );};func (_efbc SurfaceChartSeries )InitializeDefaults (){_efbc .Properties ().LineProperties ().SetWidth (1*_af .Point );_efbc .Properties ().LineProperties ().SetSolidFill (_gg .Black );_efbc .Properties ().LineProperties ().SetJoin (_ab .LineJoinRound );};

// X returns the inner wrapped XML type.
func (_ee Bar3DChart )X ()*_a .CT_Bar3DChart {return _ee ._ed };

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_a .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_dg *_a .CT_AreaSer };

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_fcb Chart )AddLegend ()Legend {_fcb ._bcd .Chart .Legend =_a .NewCT_Legend ();_fac :=MakeLegend (_fcb ._bcd .Chart .Legend );_fac .InitializeDefaults ();return _fac ;};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_acb PieChartSeries )SetExplosion (v uint32 ){_acb ._afeg .Explosion =_a .NewCT_UnsignedInt ();_acb ._afeg .Explosion .ValAttr =v ;};

// Properties returns the chart's shape properties.
func (_agba Chart )Properties ()_ab .ShapeProperties {if _agba ._bcd .SpPr ==nil {_agba ._bcd .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_agba ._bcd .SpPr );};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_cdca DoughnutChart )SetHoleSize (pct uint8 ){if _cdca ._bbc .HoleSize ==nil {_cdca ._bbc .HoleSize =_a .NewCT_HoleSize ();};if _cdca ._bbc .HoleSize .ValAttr ==nil {_cdca ._bbc .HoleSize .ValAttr =&_a .ST_HoleSize {};};_cdca ._bbc .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ffg *_a .CT_BarChart ;};

// AddSeries adds a default series to an Radar chart.
func (_gfbea RadarChart )AddSeries ()RadarChartSeries {_aac :=_gfbea .nextColor (len (_gfbea ._edc .Ser ));_cfe :=_a .NewCT_RadarSer ();_gfbea ._edc .Ser =append (_gfbea ._edc .Ser ,_cfe );_cfe .Idx .ValAttr =uint32 (len (_gfbea ._edc .Ser )-1);_cfe .Order .ValAttr =uint32 (len (_gfbea ._edc .Ser )-1);_fadd :=RadarChartSeries {_cfe };_fadd .InitializeDefaults ();_fadd .Properties ().SetSolidFill (_aac );return _fadd ;};

// X returns the inner wrapped XML type.
func (_afff Chart )X ()*_a .ChartSpace {return _afff ._bcd };type ValueAxis struct{_adaf *_a .CT_ValAx };func (_bffbb ValueAxis )AxisID ()uint32 {return _bffbb ._adaf .AxId .ValAttr };

// InitializeDefaults the Bubble chart to its defaults
func (_aec BubbleChart )InitializeDefaults (){};

// AddAxis adds an axis to a line chart.
func (_abeg Line3DChart )AddAxis (axis Axis ){_gcb :=_a .NewCT_UnsignedInt ();_gcb .ValAttr =axis .AxisID ();_abeg ._cde .AxId =append (_abeg ._cde .AxId ,_gcb );};func (_gge DateAxis )AxisID ()uint32 {return _gge ._ffgc .AxId .ValAttr };

// AddSeries adds a default series to an Pie3D chart.
func (_bdb Pie3DChart )AddSeries ()PieChartSeries {_cfa :=_a .NewCT_PieSer ();_bdb ._aae .Ser =append (_bdb ._aae .Ser ,_cfa );_cfa .Idx .ValAttr =uint32 (len (_bdb ._aae .Ser )-1);_cfa .Order .ValAttr =uint32 (len (_bdb ._aae .Ser )-1);_bcaf :=PieChartSeries {_cfa };_bcaf .InitializeDefaults ();return _bcaf ;};

// Values returns the value data source.
func (_gfgb PieChartSeries )Values ()NumberDataSource {if _gfgb ._afeg .Val ==nil {_gfgb ._afeg .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_gfgb ._afeg .Val );};func (_bdef ScatterChartSeries )InitializeDefaults (){_bdef .Properties ().LineProperties ().SetNoFill ();_bdef .Marker ().SetSymbol (_a .ST_MarkerStyleAuto );_bdef .Labels ().SetShowLegendKey (false );_bdef .Labels ().SetShowValue (true );_bdef .Labels ().SetShowPercent (false );_bdef .Labels ().SetShowCategoryName (false );_bdef .Labels ().SetShowSeriesName (false );_bdef .Labels ().SetShowLeaderLines (false );};

// Marker returns the marker properties.
func (_fcbd ScatterChartSeries )Marker ()Marker {if _fcbd ._abfbf .Marker ==nil {_fcbd ._abfbf .Marker =_a .NewCT_Marker ();};return MakeMarker (_fcbd ._abfbf .Marker );};

// Properties returns the bar chart series shape properties.
func (_fg BarChartSeries )Properties ()_ab .ShapeProperties {if _fg ._gfg .SpPr ==nil {_fg ._gfg .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_fg ._gfg .SpPr );};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_ed *_a .CT_Bar3DChart ;};

// X returns the inner wrapped XML type.
func (_fad PieOfPieChart )X ()*_a .CT_OfPieChart {return _fad ._dbb };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_gag Chart )AddLine3DChart ()Line3DChart {_dad (_gag ._bcd .Chart );_gda :=_a .NewCT_PlotAreaChoice ();_gag ._bcd .Chart .PlotArea .Choice =append (_gag ._bcd .Chart .PlotArea .Choice ,_gda );_gda .Line3DChart =_a .NewCT_Line3DChart ();_gda .Line3DChart .Grouping =_a .NewCT_Grouping ();_gda .Line3DChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return Line3DChart {_cde :_gda .Line3DChart };};

// X returns the inner wrapped XML type.
func (_ce DoughnutChart )X ()*_a .CT_DoughnutChart {return _ce ._bbc };func (_cfb AreaChart )AddAxis (axis Axis ){_cce :=_a .NewCT_UnsignedInt ();_cce .ValAttr =axis .AxisID ();_cfb ._ggg .AxId =append (_cfb ._ggg .AxId ,_cce );};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_dafe *_a .CT_RadarSer };var _eed =[]_gg .Color {_gg .RGB (0x33,0x66,0xcc),_gg .RGB (0xDC,0x39,0x12),_gg .RGB (0xFF,0x99,0x00),_gg .RGB (0x10,0x96,0x18),_gg .RGB (0x99,0x00,0x99),_gg .RGB (0x3B,0x3E,0xAC),_gg .RGB (0x00,0x99,0xC6),_gg .RGB (0xDD,0x44,0x77),_gg .RGB (0x66,0xAA,0x00),_gg .RGB (0xB8,0x2E,0x2E),_gg .RGB (0x31,0x63,0x95),_gg .RGB (0x99,0x44,0x99),_gg .RGB (0x22,0xAA,0x99),_gg .RGB (0xAA,0xAA,0x11),_gg .RGB (0x66,0x33,0xCC),_gg .RGB (0xE6,0x73,0x00),_gg .RGB (0x8B,0x07,0x07),_gg .RGB (0x32,0x92,0x62),_gg .RGB (0x55,0x74,0xA6),_gg .RGB (0x3B,0x3E,0xAC)};

// X returns the inner wrapped XML type.
func (_dfc BarChart )X ()*_a .CT_BarChart {return _dfc ._ffg };func (_ega CategoryAxis )MajorGridLines ()GridLines {if _ega ._abe .MajorGridlines ==nil {_ega ._abe .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_ega ._abe .MajorGridlines };};

// Values returns the bubble size data source.
func (_cfc BubbleChartSeries )BubbleSizes ()NumberDataSource {if _cfc ._bf .BubbleSize ==nil {_cfc ._bf .BubbleSize =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfc ._bf .BubbleSize );};func MakeMarker (x *_a .CT_Marker )Marker {return Marker {x }};func (_ead CategoryAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_ead ._abe .MinorTickMark =nil ;}else {_ead ._abe .MinorTickMark =_a .NewCT_TickMark ();_ead ._abe .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_eb AreaChart )InitializeDefaults (){};func (_gef LineChartSeries )SetSmooth (b bool ){_gef ._cddd .Smooth =_a .NewCT_Boolean ();_gef ._cddd .Smooth .ValAttr =&b ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_gfb Bar3DChart )SetDirection (d _a .ST_BarDir ){_gfb ._ed .BarDir .ValAttr =d };func MakeNumberDataSource (x *_a .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};func (_bba LineChartSeries )Values ()NumberDataSource {if _bba ._cddd .Val ==nil {_bba ._cddd .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_bba ._cddd .Val );};func (_abgb CategoryAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_abgb ._abe .TickLblPos =nil ;}else {_abgb ._abe .TickLblPos =_a .NewCT_TickLblPos ();_abgb ._abe .TickLblPos .ValAttr =p ;};};

// AddValueAxis adds a value axis to the chart.
func (_acc Chart )AddValueAxis ()ValueAxis {_cgg :=_a .NewCT_ValAx ();if _acc ._bcd .Chart .PlotArea .CChoice ==nil {_acc ._bcd .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_cgg .AxId =_a .NewCT_UnsignedInt ();_cgg .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_acc ._bcd .Chart .PlotArea .CChoice .ValAx =append (_acc ._bcd .Chart .PlotArea .CChoice .ValAx ,_cgg );_cgg .Delete =_a .NewCT_Boolean ();_cgg .Delete .ValAttr =_d .Bool (false );_cgg .Scaling =_a .NewCT_Scaling ();_cgg .Scaling .Orientation =_a .NewCT_Orientation ();_cgg .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_cgg .Choice =&_a .EG_AxSharedChoice {};_cgg .Choice .Crosses =_a .NewCT_Crosses ();_cgg .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_cgg .CrossBetween =_a .NewCT_CrossBetween ();_cgg .CrossBetween .ValAttr =_a .ST_CrossBetweenBetween ;_ede :=MakeValueAxis (_cgg );_ede .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gg .LightGray );_ede .SetMajorTickMark (_a .ST_TickMarkOut );_ede .SetMinorTickMark (_a .ST_TickMarkIn );_ede .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_ede .Properties ().LineProperties ().SetSolidFill (_gg .Black );_ede .SetPosition (_a .ST_AxPosL );return _ede ;};func (_dcca DateAxis )MajorGridLines ()GridLines {if _dcca ._ffgc .MajorGridlines ==nil {_dcca ._ffgc .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_dcca ._ffgc .MajorGridlines };};type LineChart struct{chartBase ;_gad *_a .CT_LineChart ;};func (_de Area3DChart )AddAxis (axis Axis ){_eg :=_a .NewCT_UnsignedInt ();_eg .ValAttr =axis .AxisID ();_de ._gb .AxId =append (_de ._gb .AxId ,_eg );};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_gb *_a .CT_Area3DChart ;};type SeriesAxis struct{_cab *_a .CT_SerAx };

// SetOrder sets the order of the series
func (_dce SurfaceChartSeries )SetOrder (idx uint32 ){_dce ._bdd .Order .ValAttr =idx };func (_dgf NumberDataSource )ensureChoice (){if _dgf ._feb .Choice ==nil {_dgf ._feb .Choice =_a .NewCT_NumDataSourceChoice ();};};type ScatterChart struct{chartBase ;_ecf *_a .CT_ScatterChart ;};type Marker struct{_gac *_a .CT_Marker };

// AddScatterChart adds a scatter (X/Y) chart.
func (_edg Chart )AddScatterChart ()ScatterChart {_aadb :=_a .NewCT_PlotAreaChoice ();_edg ._bcd .Chart .PlotArea .Choice =append (_edg ._bcd .Chart .PlotArea .Choice ,_aadb );_aadb .ScatterChart =_a .NewCT_ScatterChart ();_ffe :=ScatterChart {_ecf :_aadb .ScatterChart };_ffe .InitializeDefaults ();return _ffe ;};func (_dee CategoryAxis )SetCrosses (axis Axis ){_dee ._abe .Choice =_a .NewEG_AxSharedChoice ();_dee ._abe .Choice .Crosses =_a .NewCT_Crosses ();_dee ._abe .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_dee ._abe .CrossAx .ValAttr =axis .AxisID ();};

// AddBarChart adds a new bar chart to a chart.
func (_aeg Chart )AddBarChart ()BarChart {_gga :=_a .NewCT_PlotAreaChoice ();_aeg ._bcd .Chart .PlotArea .Choice =append (_aeg ._bcd .Chart .PlotArea .Choice ,_gga );_gga .BarChart =_a .NewCT_BarChart ();_gga .BarChart .Grouping =_a .NewCT_BarGrouping ();_gga .BarChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_eab :=BarChart {_ffg :_gga .BarChart };_eab .InitializeDefaults ();return _eab ;};

// X returns the inner wrapped XML type.
func (_edbc StockChart )X ()*_a .CT_StockChart {return _edbc ._acge };func (_fddc Title )InitializeDefaults (){_fddc .SetText ("\u0054\u0069\u0074l\u0065");_fddc .RunProperties ().SetSize (16*_af .Point );_fddc .RunProperties ().SetSolidFill (_gg .Black );_fddc .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_fddc .RunProperties ().SetBold (false );};func (_ag CategoryAxis )AxisID ()uint32 {return _ag ._abe .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_abfb Marker )X ()*_a .CT_Marker {return _abfb ._gac };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_bf *_a .CT_BubbleSer };type CategoryAxis struct{_abe *_a .CT_CatAx };func (_edgg ValueAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_edgg ._adaf .MinorTickMark =nil ;}else {_edgg ._adaf .MinorTickMark =_a .NewCT_TickMark ();_edgg ._adaf .MinorTickMark .ValAttr =m ;};};func (_dgeb ValueAxis )MajorGridLines ()GridLines {if _dgeb ._adaf .MajorGridlines ==nil {_dgeb ._adaf .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_dgeb ._adaf .MajorGridlines };};

// Properties returns the bar chart series shape properties.
func (_ddaf RadarChartSeries )Properties ()_ab .ShapeProperties {if _ddaf ._dafe .SpPr ==nil {_ddaf ._dafe .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_ddaf ._dafe .SpPr );};

// AddSeries adds a default series to a Bubble chart.
func (_ccd BubbleChart )AddSeries ()BubbleChartSeries {_gfa :=_ccd .nextColor (len (_ccd ._gcg .Ser ));_cdc :=_a .NewCT_BubbleSer ();_ccd ._gcg .Ser =append (_ccd ._gcg .Ser ,_cdc );_cdc .Idx .ValAttr =uint32 (len (_ccd ._gcg .Ser )-1);_cdc .Order .ValAttr =uint32 (len (_ccd ._gcg .Ser )-1);_bd :=BubbleChartSeries {_cdc };_bd .InitializeDefaults ();_bd .Properties ().SetSolidFill (_gfa );return _bd ;};

// Properties returns the line chart series shape properties.
func (_aab LineChartSeries )Properties ()_ab .ShapeProperties {if _aab ._cddd .SpPr ==nil {_aab ._cddd .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_aab ._cddd .SpPr );};func (_gdff Legend )Properties ()_ab .ShapeProperties {if _gdff ._eedf .SpPr ==nil {_gdff ._eedf .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_gdff ._eedf .SpPr );};

// X returns the inner wrapped XML type.
func (_bdc Pie3DChart )X ()*_a .CT_Pie3DChart {return _bdc ._aae };

// X returns the inner wrapped XML type.
func (_fff Title )X ()*_a .CT_Title {return _fff ._dae };func (_ffcab Title )SetText (s string ){if _ffcab ._dae .Tx ==nil {_ffcab ._dae .Tx =_a .NewCT_Tx ();};if _ffcab ._dae .Tx .Choice .Rich ==nil {_ffcab ._dae .Tx .Choice .Rich =_da .NewCT_TextBody ();};var _gbfd *_da .CT_TextParagraph ;if len (_ffcab ._dae .Tx .Choice .Rich .P )==0{_gbfd =_da .NewCT_TextParagraph ();_ffcab ._dae .Tx .Choice .Rich .P =[]*_da .CT_TextParagraph {_gbfd };}else {_gbfd =_ffcab ._dae .Tx .Choice .Rich .P [0];};var _ccg *_da .EG_TextRun ;if len (_gbfd .EG_TextRun )==0{_ccg =_da .NewEG_TextRun ();_gbfd .EG_TextRun =[]*_da .EG_TextRun {_ccg };}else {_ccg =_gbfd .EG_TextRun [0];};if _ccg .R ==nil {_ccg .R =_da .NewCT_RegularTextRun ();};_ccg .R .T =s ;};

// Properties returns the bar chart series shape properties.
func (_beda PieChartSeries )Properties ()_ab .ShapeProperties {if _beda ._afeg .SpPr ==nil {_beda ._afeg .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_beda ._afeg .SpPr );};

// CategoryAxis returns the category data source.
func (_adb PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _adb ._afeg .Cat ==nil {_adb ._afeg .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_adb ._afeg .Cat );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_cad NumberDataSource )CreateEmptyNumberCache (){_cad .ensureChoice ();if _cad ._feb .Choice .NumRef ==nil {_cad ._feb .Choice .NumRef =_a .NewCT_NumRef ();};_cad ._feb .Choice .NumLit =nil ;_cad ._feb .Choice .NumRef .NumCache =_a .NewCT_NumData ();_cad ._feb .Choice .NumRef .NumCache .PtCount =_a .NewCT_UnsignedInt ();_cad ._feb .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// AddAxis adds an axis to a Scatter chart.
func (_gbbg ScatterChart )AddAxis (axis Axis ){_dfd :=_a .NewCT_UnsignedInt ();_dfd .ValAttr =axis .AxisID ();_gbbg ._ecf .AxId =append (_gbbg ._ecf .AxId ,_dfd );};

// SetText sets the series text.
func (_bc BubbleChartSeries )SetText (s string ){_bc ._bf .Tx =_a .NewCT_SerTx ();_bc ._bf .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_fdd DateAxis )X ()*_a .CT_DateAx {return _fdd ._ffgc };func (_ca DataLabels )SetShowCategoryName (b bool ){_ca .ensureChoice ();_ca ._ddb .Choice .ShowCatName =_a .NewCT_Boolean ();_ca ._ddb .Choice .ShowCatName .ValAttr =_d .Bool (b );};func (_gbbe LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gbbe ._cddd .Cat ==nil {_gbbe ._cddd .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_gbbe ._cddd .Cat );};

// X returns the inner wrapped XML type.
func (_gcfb SeriesAxis )X ()*_a .CT_SerAx {return _gcfb ._cab };

// AddLineChart adds a new line chart to a chart.
func (_dca Chart )AddLineChart ()LineChart {_dfcc :=_a .NewCT_PlotAreaChoice ();_dca ._bcd .Chart .PlotArea .Choice =append (_dca ._bcd .Chart .PlotArea .Choice ,_dfcc );_dfcc .LineChart =_a .NewCT_LineChart ();_dfcc .LineChart .Grouping =_a .NewCT_Grouping ();_dfcc .LineChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return LineChart {_gad :_dfcc .LineChart };};func (_ggaa DataLabels )ensureChoice (){if _ggaa ._ddb .Choice ==nil {_ggaa ._ddb .Choice =_a .NewCT_DLblsChoice ();};};

// X returns the inner wrapped XML type.
func (_ddff ScatterChart )X ()*_a .CT_ScatterChart {return _ddff ._ecf };func MakeChart (x *_a .ChartSpace )Chart {return Chart {x }};

// Labels returns the data label properties.
func (_ffc LineChartSeries )Labels ()DataLabels {if _ffc ._cddd .DLbls ==nil {_ffc ._cddd .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_ffc ._cddd .DLbls );};

// AddStockChart adds a new stock chart.
func (_bed Chart )AddStockChart ()StockChart {_gbd :=_a .NewCT_PlotAreaChoice ();_bed ._bcd .Chart .PlotArea .Choice =append (_bed ._bcd .Chart .PlotArea .Choice ,_gbd );_gbd .StockChart =_a .NewCT_StockChart ();_bg :=StockChart {_acge :_gbd .StockChart };_bg .InitializeDefaults ();return _bg ;};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_cddd *_a .CT_LineSer };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_db BubbleChartSeries )InitializeDefaults (){};

// Marker returns the marker properties.
func (_bca LineChartSeries )Marker ()Marker {if _bca ._cddd .Marker ==nil {_bca ._cddd .Marker =_a .NewCT_Marker ();};return MakeMarker (_bca ._cddd .Marker );};

// X returns the inner wrapped XML type.
func (_abg Area3DChart )X ()*_a .CT_Area3DChart {return _abg ._gb };

// InitializeDefaults the bar chart to its defaults
func (_gfbe PieOfPieChart )InitializeDefaults (){_gfbe ._dbb .VaryColors =_a .NewCT_Boolean ();_gfbe ._dbb .VaryColors .ValAttr =_d .Bool (true );_gfbe .SetType (_a .ST_OfPieTypePie );_gfbe ._dbb .SecondPieSize =_a .NewCT_SecondPieSize ();_gfbe ._dbb .SecondPieSize .ValAttr =&_a .ST_SecondPieSize {};_gfbe ._dbb .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_d .Uint16 (75);_bce :=_a .NewCT_ChartLines ();_bce .SpPr =_da .NewCT_ShapeProperties ();_ffca :=_ab .MakeShapeProperties (_bce .SpPr );_ffca .LineProperties ().SetSolidFill (_gg .Auto );_gfbe ._dbb .SerLines =append (_gfbe ._dbb .SerLines ,_bce );};func (_gade SeriesAxis )AxisID ()uint32 {return _gade ._cab .AxId .ValAttr };

// AddBubbleChart adds a new bubble chart.
func (_edd Chart )AddBubbleChart ()BubbleChart {_fdf :=_a .NewCT_PlotAreaChoice ();_edd ._bcd .Chart .PlotArea .Choice =append (_edd ._bcd .Chart .PlotArea .Choice ,_fdf );_fdf .BubbleChart =_a .NewCT_BubbleChart ();_gfbb :=BubbleChart {_gcg :_fdf .BubbleChart };_gfbb .InitializeDefaults ();return _gfbb ;};func (_bad DataLabels )SetShowLeaderLines (b bool ){_bad .ensureChoice ();_bad ._ddb .Choice .ShowLeaderLines =_a .NewCT_Boolean ();_bad ._ddb .Choice .ShowLeaderLines .ValAttr =_d .Bool (b );};func (_adaa SeriesAxis )InitializeDefaults (){};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_egb *_a .CT_SurfaceChart ;};

// SetValues is used to set the source data to a set of values.
func (_dde CategoryAxisDataSource )SetValues (v []string ){_dde ._efb .Choice =_a .NewCT_AxDataSourceChoice ();_dde ._efb .Choice .StrLit =_a .NewCT_StrData ();_dde ._efb .Choice .StrLit .PtCount =_a .NewCT_UnsignedInt ();_dde ._efb .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _eef ,_bff :=range v {_dde ._efb .Choice .StrLit .Pt =append (_dde ._efb .Choice .StrLit .Pt ,&_a .CT_StrVal {IdxAttr :uint32 (_eef ),V :_bff });};};

// SetIndex sets the index of the series
func (_edab SurfaceChartSeries )SetIndex (idx uint32 ){_edab ._bdd .Idx .ValAttr =idx };type DateAxis struct{_ffgc *_a .CT_DateAx };

// AddSeries adds a default series to a line chart.
func (_eac Line3DChart )AddSeries ()LineChartSeries {_bgc :=_eac .nextColor (len (_eac ._cde .Ser ));_cfg :=_a .NewCT_LineSer ();_eac ._cde .Ser =append (_eac ._cde .Ser ,_cfg );_cfg .Idx .ValAttr =uint32 (len (_eac ._cde .Ser )-1);_cfg .Order .ValAttr =uint32 (len (_eac ._cde .Ser )-1);_eddc :=LineChartSeries {_cfg };_eddc .InitializeDefaults ();_eddc .Properties ().LineProperties ().SetSolidFill (_bgc );_eddc .Properties ().SetSolidFill (_bgc );return _eddc ;};

// InitializeDefaults initializes an area series to the default values.
func (_ga AreaChartSeries )InitializeDefaults (){};func (_agd Legend )SetOverlay (b bool ){_agd ._eedf .Overlay =_a .NewCT_Boolean ();_agd ._eedf .Overlay .ValAttr =_d .Bool (b );};

// AddSeries adds a default series to a Surface chart.
func (_aaba Surface3DChart )AddSeries ()SurfaceChartSeries {_bdf :=_aaba .nextColor (len (_aaba ._bef .Ser ));_ffgd :=_a .NewCT_SurfaceSer ();_aaba ._bef .Ser =append (_aaba ._bef .Ser ,_ffgd );_ffgd .Idx .ValAttr =uint32 (len (_aaba ._bef .Ser )-1);_ffgd .Order .ValAttr =uint32 (len (_aaba ._bef .Ser )-1);_eccc :=SurfaceChartSeries {_ffgd };_eccc .InitializeDefaults ();_eccc .Properties ().LineProperties ().SetSolidFill (_bdf );return _eccc ;};

// Values returns the value data source.
func (_bb BarChartSeries )Values ()NumberDataSource {if _bb ._gfg .Val ==nil {_bb ._gfg .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_bb ._gfg .Val );};func (_aggd ValueAxis )SetCrosses (axis Axis ){_aggd ._adaf .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_aegb GridLines )X ()*_a .CT_ChartLines {return _aegb ._gbdd };

// InitializeDefaults initializes an Pie series to the default values.
func (_efbd PieChartSeries )InitializeDefaults (){};

// SetDirection changes the direction of the bar chart (bar or column).
func (_egfd BarChart )SetDirection (d _a .ST_BarDir ){_egfd ._ffg .BarDir .ValAttr =d };func (_facb RadarChart )AddAxis (axis Axis ){_acfg :=_a .NewCT_UnsignedInt ();_acfg .ValAttr =axis .AxisID ();_facb ._edc .AxId =append (_facb ._edc .AxId ,_acfg );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_acge *_a .CT_StockChart ;};

// X returns the inner wrapped XML type.
func (_bdce SurfaceChart )X ()*_a .CT_SurfaceChart {return _bdce ._egb };

// Order returns the order of the series
func (_edfc SurfaceChartSeries )Order ()uint32 {return _edfc ._bdd .Order .ValAttr };func (_bge Title )ParagraphProperties ()_ab .ParagraphProperties {if _bge ._dae .Tx ==nil {_bge .SetText ("");};if _bge ._dae .Tx .Choice .Rich .P [0].PPr ==nil {_bge ._dae .Tx .Choice .Rich .P [0].PPr =_da .NewCT_TextParagraphProperties ();};return _ab .MakeParagraphProperties (_bge ._dae .Tx .Choice .Rich .P [0].PPr );};

// AddTitle sets a new title on the chart.
func (_eag Chart )AddTitle ()Title {_eag ._bcd .Chart .Title =_a .NewCT_Title ();_eag ._bcd .Chart .Title .Overlay =_a .NewCT_Boolean ();_eag ._bcd .Chart .Title .Overlay .ValAttr =_d .Bool (false );_eag ._bcd .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_eag ._bcd .Chart .AutoTitleDeleted .ValAttr =_d .Bool (false );_gdf :=MakeTitle (_eag ._bcd .Chart .Title );_gdf .InitializeDefaults ();return _gdf ;};

// Index returns the index of the series
func (_egc SurfaceChartSeries )Index ()uint32 {return _egc ._bdd .Idx .ValAttr };

// InitializeDefaults the bar chart to its defaults
func (_fcf RadarChart )InitializeDefaults (){_fcf ._edc .RadarStyle .ValAttr =_a .ST_RadarStyleMarker };func (_bffa ScatterChartSeries )Values ()NumberDataSource {if _bffa ._abfbf .YVal ==nil {_bffa ._abfbf .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_bffa ._abfbf .YVal );};

// SetText sets the series text.
func (_afe AreaChartSeries )SetText (s string ){_afe ._dg .Tx =_a .NewCT_SerTx ();_afe ._dg .Tx .Choice .V =&s ;};

// AddSeries adds a default series to a Scatter chart.
func (_deg ScatterChart )AddSeries ()ScatterChartSeries {_eea :=_deg .nextColor (len (_deg ._ecf .Ser ));_efba :=_a .NewCT_ScatterSer ();_deg ._ecf .Ser =append (_deg ._ecf .Ser ,_efba );_efba .Idx .ValAttr =uint32 (len (_deg ._ecf .Ser )-1);_efba .Order .ValAttr =uint32 (len (_deg ._ecf .Ser )-1);_eddd :=ScatterChartSeries {_efba };_eddd .InitializeDefaults ();_eddd .Marker ().Properties ().LineProperties ().SetSolidFill (_eea );_eddd .Marker ().Properties ().SetSolidFill (_eea );return _eddd ;};

// AddSeries adds a default series to a Stock chart.
func (_gea StockChart )AddSeries ()LineChartSeries {_cfcg :=_a .NewCT_LineSer ();_gea ._acge .Ser =append (_gea ._acge .Ser ,_cfcg );_cfcg .Idx .ValAttr =uint32 (len (_gea ._acge .Ser )-1);_cfcg .Order .ValAttr =uint32 (len (_gea ._acge .Ser )-1);_gff :=LineChartSeries {_cfcg };_gff .Values ().CreateEmptyNumberCache ();_gff .Properties ().LineProperties ().SetNoFill ();return _gff ;};

// X returns the inner wrapped XML type.
func (_cf AreaChart )X ()*_a .CT_AreaChart {return _cf ._ggg };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_bef *_a .CT_Surface3DChart ;};

// SetType sets the type the secone pie to either pie or bar
func (_fb PieOfPieChart )SetType (t _a .ST_OfPieType ){_fb ._dbb .OfPieType .ValAttr =t };

// AddRadarChart adds a new radar chart to a chart.
func (_ged Chart )AddRadarChart ()RadarChart {_efe :=_a .NewCT_PlotAreaChoice ();_ged ._bcd .Chart .PlotArea .Choice =append (_ged ._bcd .Chart .PlotArea .Choice ,_efe );_efe .RadarChart =_a .NewCT_RadarChart ();_cbe :=RadarChart {_edc :_efe .RadarChart };_cbe .InitializeDefaults ();return _cbe ;};

// AddAxis adds an axis to a Surface chart.
func (_fcfb Surface3DChart )AddAxis (axis Axis ){_dbe :=_a .NewCT_UnsignedInt ();_dbe .ValAttr =axis .AxisID ();_fcfb ._bef .AxId =append (_fcfb ._bef .AxId ,_dbe );};

// X returns the inner wrapped XML type.
func (_fea PieChart )X ()*_a .CT_PieChart {return _fea ._efd };

// X returns the inner wrapped XML type.
func (_ebc PieChartSeries )X ()*_a .CT_PieSer {return _ebc ._afeg };

// AddSeries adds a default series to an area chart.
func (_cc AreaChart )AddSeries ()AreaChartSeries {_f :=_cc .nextColor (len (_cc ._ggg .Ser ));_dea :=_a .NewCT_AreaSer ();_cc ._ggg .Ser =append (_cc ._ggg .Ser ,_dea );_dea .Idx .ValAttr =uint32 (len (_cc ._ggg .Ser )-1);_dea .Order .ValAttr =uint32 (len (_cc ._ggg .Ser )-1);_cd :=AreaChartSeries {_dea };_cd .InitializeDefaults ();_cd .Properties ().SetSolidFill (_f );return _cd ;};

// InitializeDefaults initializes an Radar series to the default values.
func (_dcff RadarChartSeries )InitializeDefaults (){};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_efb *_a .CT_AxDataSource };type Line3DChart struct{chartBase ;_cde *_a .CT_Line3DChart ;};func (_dfec ValueAxis )SetPosition (p _a .ST_AxPos ){_dfec ._adaf .AxPos =_a .NewCT_AxPos ();_dfec ._adaf .AxPos .ValAttr =p ;};

// AddSeries adds a default series to an Doughnut chart.
func (_afea DoughnutChart )AddSeries ()PieChartSeries {_bgb :=_a .NewCT_PieSer ();_afea ._bbc .Ser =append (_afea ._bbc .Ser ,_bgb );_bgb .Idx .ValAttr =uint32 (len (_afea ._bbc .Ser )-1);_bgb .Order .ValAttr =uint32 (len (_afea ._bbc .Ser )-1);_faad :=PieChartSeries {_bgb };_faad .InitializeDefaults ();return _faad ;};

// RemoveLegend removes the legend if the chart has one.
func (_dge Chart )RemoveLegend (){_dge ._bcd .Chart .Legend =nil };

// InitializeDefaults initializes a bar chart series to the default values.
func (_adg BarChartSeries )InitializeDefaults (){};func MakeSeriesAxis (x *_a .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// AddSeries adds a default series to an area chart.
func (_e Area3DChart )AddSeries ()AreaChartSeries {_cg :=_e .nextColor (len (_e ._gb .Ser ));_dd :=_a .NewCT_AreaSer ();_e ._gb .Ser =append (_e ._gb .Ser ,_dd );_dd .Idx .ValAttr =uint32 (len (_e ._gb .Ser )-1);_dd .Order .ValAttr =uint32 (len (_e ._gb .Ser )-1);_aff :=AreaChartSeries {_dd };_aff .InitializeDefaults ();_aff .Properties ().SetSolidFill (_cg );return _aff ;};

// X returns the inner wrapped XML type.
func (_gfaa RadarChartSeries )X ()*_a .CT_RadarSer {return _gfaa ._dafe };func (_eaba SurfaceChart )InitializeDefaults (){_eaba ._egb .Wireframe =_a .NewCT_Boolean ();_eaba ._egb .Wireframe .ValAttr =_d .Bool (false );_eaba ._egb .BandFmts =_a .NewCT_BandFmts ();for _cadg :=0;_cadg < 15;_cadg ++{_geb :=_a .NewCT_BandFmt ();_geb .Idx .ValAttr =uint32 (_cadg );_geb .SpPr =_da .NewCT_ShapeProperties ();_gfce :=_ab .MakeShapeProperties (_geb .SpPr );_gfce .SetSolidFill (_eaba .nextColor (_cadg ));_eaba ._egb .BandFmts .BandFmt =append (_eaba ._egb .BandFmts .BandFmt ,_geb );};};

// Properties returns the Bubble chart series shape properties.
func (_gd BubbleChartSeries )Properties ()_ab .ShapeProperties {if _gd ._bf .SpPr ==nil {_gd ._bf .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_gd ._bf .SpPr );};

// X returns the inner wrapped XML type.
func (_abbg Surface3DChart )X ()*_a .CT_Surface3DChart {return _abbg ._bef };

// Index returns the index of the series
func (_bgfa ScatterChartSeries )Index ()uint32 {return _bgfa ._abfbf .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_aba LineChart )X ()*_a .CT_LineChart {return _aba ._gad };

// AddSeries adds a default series to a bar chart.
func (_ad Bar3DChart )AddSeries ()BarChartSeries {_ae :=_ad .nextColor (len (_ad ._ed .Ser ));_eaf :=_a .NewCT_BarSer ();_ad ._ed .Ser =append (_ad ._ed .Ser ,_eaf );_eaf .Idx .ValAttr =uint32 (len (_ad ._ed .Ser )-1);_eaf .Order .ValAttr =uint32 (len (_ad ._ed .Ser )-1);_gaf :=BarChartSeries {_eaf };_gaf .InitializeDefaults ();_gaf .Properties ().SetSolidFill (_ae );return _gaf ;};func (_acd Chart )AddSeriesAxis ()SeriesAxis {_cfd :=_a .NewCT_SerAx ();if _acd ._bcd .Chart .PlotArea .CChoice ==nil {_acd ._bcd .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_cfd .AxId =_a .NewCT_UnsignedInt ();_cfd .AxId .ValAttr =0x7FFFFFFF&_aa .Uint32 ();_acd ._bcd .Chart .PlotArea .CChoice .SerAx =append (_acd ._bcd .Chart .PlotArea .CChoice .SerAx ,_cfd );_cfd .Delete =_a .NewCT_Boolean ();_cfd .Delete .ValAttr =_d .Bool (false );_dcc :=MakeSeriesAxis (_cfd );_dcc .InitializeDefaults ();return _dcc ;};

// AddAxis adds an axis to a line chart.
func (_aea LineChart )AddAxis (axis Axis ){_abf :=_a .NewCT_UnsignedInt ();_abf .ValAttr =axis .AxisID ();_aea ._gad .AxId =append (_aea ._gad .AxId ,_abf );};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// Values returns the value data source.
func (_ff AreaChartSeries )Values ()NumberDataSource {if _ff ._dg .Val ==nil {_ff ._dg .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_ff ._dg .Val );};type chartBase struct{};func (_cffa SeriesAxis )SetCrosses (axis Axis ){_cffa ._cab .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to a line chart.
func (_gbff LineChart )AddSeries ()LineChartSeries {_fde :=_gbff .nextColor (len (_gbff ._gad .Ser ));_fed :=_a .NewCT_LineSer ();_gbff ._gad .Ser =append (_gbff ._gad .Ser ,_fed );_fed .Idx .ValAttr =uint32 (len (_gbff ._gad .Ser )-1);_fed .Order .ValAttr =uint32 (len (_gbff ._gad .Ser )-1);_eeb :=LineChartSeries {_fed };_eeb .InitializeDefaults ();_eeb .Properties ().LineProperties ().SetSolidFill (_fde );return _eeb ;};func (_afg DataLabels )SetPosition (p _a .ST_DLblPos ){_afg .ensureChoice ();_afg ._ddb .Choice .DLblPos =_a .NewCT_DLblPos ();_afg ._ddb .Choice .DLblPos .ValAttr =p ;};

// InitializeDefaults the bar chart to its defaults
func (_egf BarChart )InitializeDefaults (){_egf .SetDirection (_a .ST_BarDirCol )};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_fd Chart )AddSurface3DChart ()Surface3DChart {_aaa :=_a .NewCT_PlotAreaChoice ();_fd ._bcd .Chart .PlotArea .Choice =append (_fd ._bcd .Chart .PlotArea .Choice ,_aaa );_aaa .Surface3DChart =_a .NewCT_Surface3DChart ();_dad (_fd ._bcd .Chart );_bfb :=Surface3DChart {_bef :_aaa .Surface3DChart };_bfb .InitializeDefaults ();return _bfb ;};func (_gbgg DataLabels )SetShowLegendKey (b bool ){_gbgg .ensureChoice ();_gbgg ._ddb .Choice .ShowLegendKey =_a .NewCT_Boolean ();_gbgg ._ddb .Choice .ShowLegendKey .ValAttr =_d .Bool (b );};var NullAxis Axis =nullAxis (0);

// SetText sets the series text.
func (_fefd RadarChartSeries )SetText (s string ){_fefd ._dafe .Tx =_a .NewCT_SerTx ();_fefd ._dafe .Tx .Choice .V =&s ;};

// AddSeries adds a default series to a bar chart.
func (_ef BarChart )AddSeries ()BarChartSeries {_gec :=_ef .nextColor (len (_ef ._ffg .Ser ));_gbc :=_a .NewCT_BarSer ();_ef ._ffg .Ser =append (_ef ._ffg .Ser ,_gbc );_gbc .Idx .ValAttr =uint32 (len (_ef ._ffg .Ser )-1);_gbc .Order .ValAttr =uint32 (len (_ef ._ffg .Ser )-1);_dfa :=BarChartSeries {_gbc };_dfa .InitializeDefaults ();_dfa .Properties ().SetSolidFill (_gec );return _dfa ;};func (_bffb SurfaceChartSeries )Values ()NumberDataSource {if _bffb ._bdd .Val ==nil {_bffb ._bdd .Val =_a .NewCT_NumDataSource ();};_ecg :=MakeNumberDataSource (_bffb ._bdd .Val );_ecg .CreateEmptyNumberCache ();return _ecg ;};

// SetText sets the series text
func (_aaf LineChartSeries )SetText (s string ){_aaf ._cddd .Tx =_a .NewCT_SerTx ();_aaf ._cddd .Tx .Choice .V =&s ;};

// Chart is a generic chart.
type Chart struct{_bcd *_a .ChartSpace };

// AddAxis adds an axis to a Surface chart.
func (_bfa SurfaceChart )AddAxis (axis Axis ){_gdd :=_a .NewCT_UnsignedInt ();_gdd .ValAttr =axis .AxisID ();_bfa ._egb .AxId =append (_bfa ._egb .AxId ,_gdd );};

// InitializeDefaults the bar chart to its defaults
func (_gf Bar3DChart )InitializeDefaults (){_gf .SetDirection (_a .ST_BarDirCol )};func (_fade SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fade ._bdd .Cat ==nil {_fade ._bdd .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_fade ._bdd .Cat );};

// SetValues sets values directly on a source.
func (_afd NumberDataSource )SetValues (v []float64 ){_afd .ensureChoice ();_afd ._feb .Choice .NumRef =nil ;_afd ._feb .Choice .NumLit =_a .NewCT_NumData ();_afd ._feb .Choice .NumLit .PtCount =_a .NewCT_UnsignedInt ();_afd ._feb .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _bfg ,_gbca :=range v {_afd ._feb .Choice .NumLit .Pt =append (_afd ._feb .Choice .NumLit .Pt ,&_a .CT_NumVal {IdxAttr :uint32 (_bfg ),V :_g .Sprintf ("\u0025\u0067",_gbca )});};};

// SetOrder sets the order of the series
func (_daf LineChartSeries )SetOrder (idx uint32 ){_daf ._cddd .Order .ValAttr =idx };func (_fca DataLabels )SetShowValue (b bool ){_fca .ensureChoice ();_fca ._ddb .Choice .ShowVal =_a .NewCT_Boolean ();_fca ._ddb .Choice .ShowVal .ValAttr =_d .Bool (b );};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_fgg Chart )SetDisplayBlanksAs (v _a .ST_DispBlanksAs ){_fgg ._bcd .Chart .DispBlanksAs =_a .NewCT_DispBlanksAs ();_fgg ._bcd .Chart .DispBlanksAs .ValAttr =v ;};

// SetIndex sets the index of the series
func (_eeba LineChartSeries )SetIndex (idx uint32 ){_eeba ._cddd .Idx .ValAttr =idx };

// Labels returns the data label properties.
func (_acg ScatterChartSeries )Labels ()DataLabels {if _acg ._abfbf .DLbls ==nil {_acg ._abfbf .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_acg ._abfbf .DLbls );};

// AddSeries adds a default series to an Pie chart.
func (_gagg PieChart )AddSeries ()PieChartSeries {_gdc :=_a .NewCT_PieSer ();_gagg ._efd .Ser =append (_gagg ._efd .Ser ,_gdc );_gdc .Idx .ValAttr =uint32 (len (_gagg ._efd .Ser )-1);_gdc .Order .ValAttr =uint32 (len (_gagg ._efd .Ser )-1);_geda :=PieChartSeries {_gdc };_geda .InitializeDefaults ();return _geda ;};func (_fda DateAxis )SetCrosses (axis Axis ){_fda ._ffgc .CrossAx .ValAttr =axis .AxisID ()};

// InitializeDefaults the bar chart to its defaults
func (_bea PieChart )InitializeDefaults (){_bea ._efd .VaryColors =_a .NewCT_Boolean ();_bea ._efd .VaryColors .ValAttr =_d .Bool (true );};

// InitializeDefaults the bar chart to its defaults
func (_ebf DoughnutChart )InitializeDefaults (){_ebf ._bbc .VaryColors =_a .NewCT_Boolean ();_ebf ._bbc .VaryColors .ValAttr =_d .Bool (true );_ebf ._bbc .HoleSize =_a .NewCT_HoleSize ();_ebf ._bbc .HoleSize .ValAttr =&_a .ST_HoleSize {};_ebf ._bbc .HoleSize .ValAttr .ST_HoleSizeUByte =_d .Uint8 (50);};

// CategoryAxis returns the category data source.
func (_df AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _df ._dg .Cat ==nil {_df ._dg .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_df ._dg .Cat );};

// X returns the inner wrapped XML type.
func (_fcg RadarChart )X ()*_a .CT_RadarChart {return _fcg ._edc };

// AddSeries adds a default series to an Pie chart.
func (_caa PieOfPieChart )AddSeries ()PieChartSeries {_abfd :=_a .NewCT_PieSer ();_caa ._dbb .Ser =append (_caa ._dbb .Ser ,_abfd );_abfd .Idx .ValAttr =uint32 (len (_caa ._dbb .Ser )-1);_abfd .Order .ValAttr =uint32 (len (_caa ._dbb .Ser )-1);_gfc :=PieChartSeries {_abfd };_gfc .InitializeDefaults ();return _gfc ;};func (_cdeb ValueAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_cdeb ._adaf .TickLblPos =nil ;}else {_cdeb ._adaf .TickLblPos =_a .NewCT_TickLblPos ();_cdeb ._adaf .TickLblPos .ValAttr =p ;};};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_aae *_a .CT_Pie3DChart ;};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_bgf Chart )AddPieOfPieChart ()PieOfPieChart {_dec :=_a .NewCT_PlotAreaChoice ();_bgf ._bcd .Chart .PlotArea .Choice =append (_bgf ._bcd .Chart .PlotArea .Choice ,_dec );_dec .OfPieChart =_a .NewCT_OfPieChart ();_fga :=PieOfPieChart {_dbb :_dec .OfPieChart };_fga .InitializeDefaults ();return _fga ;};func (_fe CategoryAxis )InitializeDefaults (){_fe .SetPosition (_a .ST_AxPosB );_fe .SetMajorTickMark (_a .ST_TickMarkOut );_fe .SetMinorTickMark (_a .ST_TickMarkIn );_fe .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_fe .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gg .LightGray );_fe .Properties ().LineProperties ().SetSolidFill (_gg .Black );};

// AddSeries adds a default series to a Surface chart.
func (_feg SurfaceChart )AddSeries ()SurfaceChartSeries {_eca :=_feg .nextColor (len (_feg ._egb .Ser ));_fdea :=_a .NewCT_SurfaceSer ();_feg ._egb .Ser =append (_feg ._egb .Ser ,_fdea );_fdea .Idx .ValAttr =uint32 (len (_feg ._egb .Ser )-1);_fdea .Order .ValAttr =uint32 (len (_feg ._egb .Ser )-1);_ecaf :=SurfaceChartSeries {_fdea };_ecaf .InitializeDefaults ();_ecaf .Properties ().LineProperties ().SetSolidFill (_eca );return _ecaf ;};

// InitializeDefaults the bar chart to its defaults
func (_b Area3DChart )InitializeDefaults (){};func MakeTitle (x *_a .CT_Title )Title {return Title {x }};

// CategoryAxis returns the category data source.
func (_gfe BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gfe ._bf .XVal ==nil {_gfe ._bf .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_gfe ._bf .XVal );};func MakeCategoryAxis (x *_a .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_cbef GridLines )Properties ()_ab .ShapeProperties {if _cbef ._gbdd .SpPr ==nil {_cbef ._gbdd .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_cbef ._gbdd .SpPr );};

// Order returns the order of the series
func (_cba LineChartSeries )Order ()uint32 {return _cba ._cddd .Order .ValAttr };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_bbc *_a .CT_DoughnutChart ;};func (_bgg ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bgg ._abfbf .XVal ==nil {_bgg ._abfbf .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_bgg ._abfbf .XVal );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_agg Chart )AddSurfaceChart ()SurfaceChart {_cffe :=_a .NewCT_PlotAreaChoice ();_agg ._bcd .Chart .PlotArea .Choice =append (_agg ._bcd .Chart .PlotArea .Choice ,_cffe );_cffe .SurfaceChart =_a .NewCT_SurfaceChart ();_dad (_agg ._bcd .Chart );_agg ._bcd .Chart .View3D .RotX .ValAttr =_d .Int8 (90);_agg ._bcd .Chart .View3D .RotY .ValAttr =_d .Uint16 (0);_agg ._bcd .Chart .View3D .Perspective =_a .NewCT_Perspective ();_agg ._bcd .Chart .View3D .Perspective .ValAttr =_d .Uint8 (0);_ac :=SurfaceChart {_egb :_cffe .SurfaceChart };_ac .InitializeDefaults ();return _ac ;};type GridLines struct{_gbdd *_a .CT_ChartLines };func (_aggf Title )RunProperties ()_ab .RunProperties {if _aggf ._dae .Tx ==nil {_aggf .SetText ("");};if _aggf ._dae .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_aggf ._dae .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_da .NewCT_TextCharacterProperties ();};return _ab .MakeRunProperties (_aggf ._dae .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_gdb CategoryAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_gdb ._abe .MajorTickMark =nil ;}else {_gdb ._abe .MajorTickMark =_a .NewCT_TickMark ();_gdb ._abe .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_gbe BarChartSeries )X ()*_a .CT_BarSer {return _gbe ._gfg };func (_ebd BarChart )AddAxis (axis Axis ){_dc :=_a .NewCT_UnsignedInt ();_dc .ValAttr =axis .AxisID ();_ebd ._ffg .AxId =append (_ebd ._ffg .AxId ,_dc );};func (_bega ScatterChartSeries )SetSmooth (b bool ){_bega ._abfbf .Smooth =_a .NewCT_Boolean ();_bega ._abfbf .Smooth .ValAttr =&b ;};

// Order returns the order of the series
func (_cdg ScatterChartSeries )Order ()uint32 {return _cdg ._abfbf .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_cca AreaChartSeries )X ()*_a .CT_AreaSer {return _cca ._dg };

// Properties returns the line chart series shape properties.
func (_eccb ScatterChartSeries )Properties ()_ab .ShapeProperties {if _eccb ._abfbf .SpPr ==nil {_eccb ._abfbf .SpPr =_da .NewCT_ShapeProperties ();};return _ab .MakeShapeProperties (_eccb ._abfbf .SpPr );};

// X returns the inner wrapped XML type.
func (_ege ValueAxis )X ()*_a .CT_ValAx {return _ege ._adaf };

// RemoveTitle removes any existing title from the chart.
func (_eda Chart )RemoveTitle (){_eda ._bcd .Chart .Title =nil ;_eda ._bcd .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_eda ._bcd .Chart .AutoTitleDeleted .ValAttr =_d .Bool (true );};func (_eedc Marker )SetSize (sz uint8 ){_eedc ._gac .Size =_a .NewCT_MarkerSize ();_eedc ._gac .Size .ValAttr =&sz ;};type Title struct{_dae *_a .CT_Title };

// SetText sets the series text
func (_aca ScatterChartSeries )SetText (s string ){_aca ._abfbf .Tx =_a .NewCT_SerTx ();_aca ._abfbf .Tx .Choice .V =&s ;};

// SetText sets the series text.
func (_dcd BarChartSeries )SetText (s string ){_dcd ._gfg .Tx =_a .NewCT_SerTx ();_dcd ._gfg .Tx .Choice .V =&s ;};